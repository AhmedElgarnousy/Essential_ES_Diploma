
SPI_MASTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000008ce  00000942  2**0
                  ALLOC, LOAD, DATA
  2 .stab         000013ec  00000000  00000000  00000944  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e6d  00000000  00000000  00001d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00002b9d  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002bb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000020  00000000  00000000  00002bf0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000050c  00000000  00000000  00002c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004b7  00000000  00000000  0000311c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000007e  00000000  00000000  000035d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001f4  00000000  00000000  00003651  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 aa 02 	call	0x554	; 0x554 <main>
  64:	0c 94 65 04 	jmp	0x8ca	; 0x8ca <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_u8SetPinValue>:
#include"DIO_private.h"



u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	00 d0       	rcall	.+0      	; 0x72 <DIO_u8SetPinValue+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <DIO_u8SetPinValue+0x8>
  74:	cd b7       	in	r28, 0x3d	; 61
  76:	de b7       	in	r29, 0x3e	; 62
  78:	8a 83       	std	Y+2, r24	; 0x02
  7a:	6b 83       	std	Y+3, r22	; 0x03
  7c:	4c 83       	std	Y+4, r20	; 0x04

u8 Local_u8ErrorState=0;
  7e:	19 82       	std	Y+1, r1	; 0x01

if(Copy_u8Pin<=DIO_u8PIN7)
  80:	8b 81       	ldd	r24, Y+3	; 0x03
  82:	88 30       	cpi	r24, 0x08	; 8
  84:	08 f0       	brcs	.+2      	; 0x88 <DIO_u8SetPinValue+0x1c>
  86:	f3 c0       	rjmp	.+486    	; 0x26e <DIO_u8SetPinValue+0x202>
{
	if(Copy_u8Value==DIO_u8PIN_HIGH)
  88:	8c 81       	ldd	r24, Y+4	; 0x04
  8a:	81 30       	cpi	r24, 0x01	; 1
  8c:	09 f0       	breq	.+2      	; 0x90 <DIO_u8SetPinValue+0x24>
  8e:	72 c0       	rjmp	.+228    	; 0x174 <DIO_u8SetPinValue+0x108>
		{
		switch(Copy_u8Port)
  90:	8a 81       	ldd	r24, Y+2	; 0x02
  92:	88 2f       	mov	r24, r24
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	84 30       	cpi	r24, 0x04	; 4
  98:	91 05       	cpc	r25, r1
  9a:	09 f4       	brne	.+2      	; 0x9e <DIO_u8SetPinValue+0x32>
  9c:	52 c0       	rjmp	.+164    	; 0x142 <DIO_u8SetPinValue+0xd6>
  9e:	85 30       	cpi	r24, 0x05	; 5
  a0:	91 05       	cpc	r25, r1
  a2:	0c f0       	brlt	.+2      	; 0xa6 <DIO_u8SetPinValue+0x3a>
  a4:	64 c0       	rjmp	.+200    	; 0x16e <DIO_u8SetPinValue+0x102>
  a6:	83 30       	cpi	r24, 0x03	; 3
  a8:	91 05       	cpc	r25, r1
  aa:	a9 f1       	breq	.+106    	; 0x116 <DIO_u8SetPinValue+0xaa>
  ac:	84 30       	cpi	r24, 0x04	; 4
  ae:	91 05       	cpc	r25, r1
  b0:	0c f0       	brlt	.+2      	; 0xb4 <DIO_u8SetPinValue+0x48>
  b2:	5d c0       	rjmp	.+186    	; 0x16e <DIO_u8SetPinValue+0x102>
  b4:	00 97       	sbiw	r24, 0x00	; 0
  b6:	19 f0       	breq	.+6      	; 0xbe <DIO_u8SetPinValue+0x52>
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	b9 f0       	breq	.+46     	; 0xea <DIO_u8SetPinValue+0x7e>
  bc:	58 c0       	rjmp	.+176    	; 0x16e <DIO_u8SetPinValue+0x102>
		{
			case DIO_u8PORTA:SET_BIT(PORTA,Copy_u8Pin);break;
  be:	8b e3       	ldi	r24, 0x3B	; 59
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	fc 01       	movw	r30, r24
  c4:	80 81       	ld	r24, Z
  c6:	48 2f       	mov	r20, r24
  c8:	8b 81       	ldd	r24, Y+3	; 0x03
  ca:	28 2f       	mov	r18, r24
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <DIO_u8SetPinValue+0x6c>
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	2a 95       	dec	r18
  da:	e2 f7       	brpl	.-8      	; 0xd4 <DIO_u8SetPinValue+0x68>
  dc:	24 2f       	mov	r18, r20
  de:	28 2b       	or	r18, r24
  e0:	8b e3       	ldi	r24, 0x3B	; 59
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	fc 01       	movw	r30, r24
  e6:	20 83       	st	Z, r18
  e8:	c4 c0       	rjmp	.+392    	; 0x272 <DIO_u8SetPinValue+0x206>
			case DIO_u8PORTB:SET_BIT(PORTB,Copy_u8Pin);break;
  ea:	88 e3       	ldi	r24, 0x38	; 56
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	fc 01       	movw	r30, r24
  f0:	80 81       	ld	r24, Z
  f2:	48 2f       	mov	r20, r24
  f4:	8b 81       	ldd	r24, Y+3	; 0x03
  f6:	28 2f       	mov	r18, r24
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_u8SetPinValue+0x98>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	2a 95       	dec	r18
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_u8SetPinValue+0x94>
 108:	24 2f       	mov	r18, r20
 10a:	28 2b       	or	r18, r24
 10c:	88 e3       	ldi	r24, 0x38	; 56
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	fc 01       	movw	r30, r24
 112:	20 83       	st	Z, r18
 114:	ae c0       	rjmp	.+348    	; 0x272 <DIO_u8SetPinValue+0x206>
			case DIO_u8PORTC:SET_BIT(PORTC,Copy_u8Pin);break;
 116:	85 e3       	ldi	r24, 0x35	; 53
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	fc 01       	movw	r30, r24
 11c:	80 81       	ld	r24, Z
 11e:	48 2f       	mov	r20, r24
 120:	8b 81       	ldd	r24, Y+3	; 0x03
 122:	28 2f       	mov	r18, r24
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_u8SetPinValue+0xc4>
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	2a 95       	dec	r18
 132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_u8SetPinValue+0xc0>
 134:	24 2f       	mov	r18, r20
 136:	28 2b       	or	r18, r24
 138:	85 e3       	ldi	r24, 0x35	; 53
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	fc 01       	movw	r30, r24
 13e:	20 83       	st	Z, r18
 140:	98 c0       	rjmp	.+304    	; 0x272 <DIO_u8SetPinValue+0x206>
			case DIO_u8PORTD:SET_BIT(PORTD,Copy_u8Pin);break;
 142:	82 e3       	ldi	r24, 0x32	; 50
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	fc 01       	movw	r30, r24
 148:	80 81       	ld	r24, Z
 14a:	48 2f       	mov	r20, r24
 14c:	8b 81       	ldd	r24, Y+3	; 0x03
 14e:	28 2f       	mov	r18, r24
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_u8SetPinValue+0xf0>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	2a 95       	dec	r18
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_u8SetPinValue+0xec>
 160:	24 2f       	mov	r18, r20
 162:	28 2b       	or	r18, r24
 164:	82 e3       	ldi	r24, 0x32	; 50
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	fc 01       	movw	r30, r24
 16a:	20 83       	st	Z, r18
 16c:	82 c0       	rjmp	.+260    	; 0x272 <DIO_u8SetPinValue+0x206>
			default :Local_u8ErrorState=1;break;
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	89 83       	std	Y+1, r24	; 0x01
 172:	7f c0       	rjmp	.+254    	; 0x272 <DIO_u8SetPinValue+0x206>
		}



		}
		else if(Copy_u8Value==DIO_u8PIN_LOW)
 174:	8c 81       	ldd	r24, Y+4	; 0x04
 176:	88 23       	and	r24, r24
 178:	09 f0       	breq	.+2      	; 0x17c <DIO_u8SetPinValue+0x110>
 17a:	76 c0       	rjmp	.+236    	; 0x268 <DIO_u8SetPinValue+0x1fc>
		{
			switch(Copy_u8Port)
 17c:	8a 81       	ldd	r24, Y+2	; 0x02
 17e:	88 2f       	mov	r24, r24
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	84 30       	cpi	r24, 0x04	; 4
 184:	91 05       	cpc	r25, r1
 186:	09 f4       	brne	.+2      	; 0x18a <DIO_u8SetPinValue+0x11e>
 188:	55 c0       	rjmp	.+170    	; 0x234 <DIO_u8SetPinValue+0x1c8>
 18a:	85 30       	cpi	r24, 0x05	; 5
 18c:	91 05       	cpc	r25, r1
 18e:	0c f0       	brlt	.+2      	; 0x192 <DIO_u8SetPinValue+0x126>
 190:	68 c0       	rjmp	.+208    	; 0x262 <DIO_u8SetPinValue+0x1f6>
 192:	83 30       	cpi	r24, 0x03	; 3
 194:	91 05       	cpc	r25, r1
 196:	b9 f1       	breq	.+110    	; 0x206 <DIO_u8SetPinValue+0x19a>
 198:	84 30       	cpi	r24, 0x04	; 4
 19a:	91 05       	cpc	r25, r1
 19c:	0c f0       	brlt	.+2      	; 0x1a0 <DIO_u8SetPinValue+0x134>
 19e:	61 c0       	rjmp	.+194    	; 0x262 <DIO_u8SetPinValue+0x1f6>
 1a0:	00 97       	sbiw	r24, 0x00	; 0
 1a2:	19 f0       	breq	.+6      	; 0x1aa <DIO_u8SetPinValue+0x13e>
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	c1 f0       	breq	.+48     	; 0x1d8 <DIO_u8SetPinValue+0x16c>
 1a8:	5c c0       	rjmp	.+184    	; 0x262 <DIO_u8SetPinValue+0x1f6>
		{
			case DIO_u8PORTA:CLR_BIT(PORTA,Copy_u8Pin);break;
 1aa:	8b e3       	ldi	r24, 0x3B	; 59
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	fc 01       	movw	r30, r24
 1b0:	80 81       	ld	r24, Z
 1b2:	48 2f       	mov	r20, r24
 1b4:	8b 81       	ldd	r24, Y+3	; 0x03
 1b6:	28 2f       	mov	r18, r24
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <DIO_u8SetPinValue+0x158>
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	2a 95       	dec	r18
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <DIO_u8SetPinValue+0x154>
 1c8:	80 95       	com	r24
 1ca:	24 2f       	mov	r18, r20
 1cc:	28 23       	and	r18, r24
 1ce:	8b e3       	ldi	r24, 0x3B	; 59
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	fc 01       	movw	r30, r24
 1d4:	20 83       	st	Z, r18
 1d6:	4d c0       	rjmp	.+154    	; 0x272 <DIO_u8SetPinValue+0x206>
			case DIO_u8PORTB:CLR_BIT(PORTB,Copy_u8Pin);break;
 1d8:	88 e3       	ldi	r24, 0x38	; 56
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	fc 01       	movw	r30, r24
 1de:	80 81       	ld	r24, Z
 1e0:	48 2f       	mov	r20, r24
 1e2:	8b 81       	ldd	r24, Y+3	; 0x03
 1e4:	28 2f       	mov	r18, r24
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_u8SetPinValue+0x186>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	2a 95       	dec	r18
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_u8SetPinValue+0x182>
 1f6:	80 95       	com	r24
 1f8:	24 2f       	mov	r18, r20
 1fa:	28 23       	and	r18, r24
 1fc:	88 e3       	ldi	r24, 0x38	; 56
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	fc 01       	movw	r30, r24
 202:	20 83       	st	Z, r18
 204:	36 c0       	rjmp	.+108    	; 0x272 <DIO_u8SetPinValue+0x206>
			case DIO_u8PORTC:CLR_BIT(PORTC,Copy_u8Pin);break;
 206:	85 e3       	ldi	r24, 0x35	; 53
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	fc 01       	movw	r30, r24
 20c:	80 81       	ld	r24, Z
 20e:	48 2f       	mov	r20, r24
 210:	8b 81       	ldd	r24, Y+3	; 0x03
 212:	28 2f       	mov	r18, r24
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_u8SetPinValue+0x1b4>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	2a 95       	dec	r18
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_u8SetPinValue+0x1b0>
 224:	80 95       	com	r24
 226:	24 2f       	mov	r18, r20
 228:	28 23       	and	r18, r24
 22a:	85 e3       	ldi	r24, 0x35	; 53
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	fc 01       	movw	r30, r24
 230:	20 83       	st	Z, r18
 232:	1f c0       	rjmp	.+62     	; 0x272 <DIO_u8SetPinValue+0x206>
			case DIO_u8PORTD:CLR_BIT(PORTD,Copy_u8Pin);break;
 234:	82 e3       	ldi	r24, 0x32	; 50
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	fc 01       	movw	r30, r24
 23a:	80 81       	ld	r24, Z
 23c:	48 2f       	mov	r20, r24
 23e:	8b 81       	ldd	r24, Y+3	; 0x03
 240:	28 2f       	mov	r18, r24
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	02 c0       	rjmp	.+4      	; 0x24e <DIO_u8SetPinValue+0x1e2>
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	2a 95       	dec	r18
 250:	e2 f7       	brpl	.-8      	; 0x24a <DIO_u8SetPinValue+0x1de>
 252:	80 95       	com	r24
 254:	24 2f       	mov	r18, r20
 256:	28 23       	and	r18, r24
 258:	82 e3       	ldi	r24, 0x32	; 50
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	fc 01       	movw	r30, r24
 25e:	20 83       	st	Z, r18
 260:	08 c0       	rjmp	.+16     	; 0x272 <DIO_u8SetPinValue+0x206>
			default :Local_u8ErrorState=1;break;
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	89 83       	std	Y+1, r24	; 0x01
 266:	05 c0       	rjmp	.+10     	; 0x272 <DIO_u8SetPinValue+0x206>


		}
		else
		{
		Local_u8ErrorState=1;
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	89 83       	std	Y+1, r24	; 0x01
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_u8SetPinValue+0x206>
		}
		
}
else
{
	 Local_u8ErrorState=1;
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	89 83       	std	Y+1, r24	; 0x01
}

return Local_u8ErrorState;
 272:	89 81       	ldd	r24, Y+1	; 0x01
}
 274:	0f 90       	pop	r0
 276:	0f 90       	pop	r0
 278:	0f 90       	pop	r0
 27a:	0f 90       	pop	r0
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	08 95       	ret

00000282 <DIO_u8SetPortValue>:


u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
 286:	00 d0       	rcall	.+0      	; 0x288 <DIO_u8SetPortValue+0x6>
 288:	0f 92       	push	r0
 28a:	cd b7       	in	r28, 0x3d	; 61
 28c:	de b7       	in	r29, 0x3e	; 62
 28e:	8a 83       	std	Y+2, r24	; 0x02
 290:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
 292:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
 294:	8a 81       	ldd	r24, Y+2	; 0x02
 296:	88 2f       	mov	r24, r24
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	84 30       	cpi	r24, 0x04	; 4
 29c:	91 05       	cpc	r25, r1
 29e:	01 f1       	breq	.+64     	; 0x2e0 <DIO_u8SetPortValue+0x5e>
 2a0:	85 30       	cpi	r24, 0x05	; 5
 2a2:	91 05       	cpc	r25, r1
 2a4:	1c f5       	brge	.+70     	; 0x2ec <DIO_u8SetPortValue+0x6a>
 2a6:	83 30       	cpi	r24, 0x03	; 3
 2a8:	91 05       	cpc	r25, r1
 2aa:	a1 f0       	breq	.+40     	; 0x2d4 <DIO_u8SetPortValue+0x52>
 2ac:	84 30       	cpi	r24, 0x04	; 4
 2ae:	91 05       	cpc	r25, r1
 2b0:	ec f4       	brge	.+58     	; 0x2ec <DIO_u8SetPortValue+0x6a>
 2b2:	00 97       	sbiw	r24, 0x00	; 0
 2b4:	19 f0       	breq	.+6      	; 0x2bc <DIO_u8SetPortValue+0x3a>
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	39 f0       	breq	.+14     	; 0x2c8 <DIO_u8SetPortValue+0x46>
 2ba:	18 c0       	rjmp	.+48     	; 0x2ec <DIO_u8SetPortValue+0x6a>
				{
					case DIO_u8PORTA: PORTA=Copy_u8Value; break;
 2bc:	8b e3       	ldi	r24, 0x3B	; 59
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	2b 81       	ldd	r18, Y+3	; 0x03
 2c2:	fc 01       	movw	r30, r24
 2c4:	20 83       	st	Z, r18
 2c6:	15 c0       	rjmp	.+42     	; 0x2f2 <DIO_u8SetPortValue+0x70>
				    case DIO_u8PORTB: PORTB=Copy_u8Value; break;
 2c8:	88 e3       	ldi	r24, 0x38	; 56
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	2b 81       	ldd	r18, Y+3	; 0x03
 2ce:	fc 01       	movw	r30, r24
 2d0:	20 83       	st	Z, r18
 2d2:	0f c0       	rjmp	.+30     	; 0x2f2 <DIO_u8SetPortValue+0x70>
				    case DIO_u8PORTC: PORTC=Copy_u8Value; break;
 2d4:	85 e3       	ldi	r24, 0x35	; 53
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	2b 81       	ldd	r18, Y+3	; 0x03
 2da:	fc 01       	movw	r30, r24
 2dc:	20 83       	st	Z, r18
 2de:	09 c0       	rjmp	.+18     	; 0x2f2 <DIO_u8SetPortValue+0x70>
				    case DIO_u8PORTD: PORTD=Copy_u8Value; break;
 2e0:	82 e3       	ldi	r24, 0x32	; 50
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	2b 81       	ldd	r18, Y+3	; 0x03
 2e6:	fc 01       	movw	r30, r24
 2e8:	20 83       	st	Z, r18
 2ea:	03 c0       	rjmp	.+6      	; 0x2f2 <DIO_u8SetPortValue+0x70>
				    default :Local_u8ErrorState=1; break;
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	89 83       	std	Y+1, r24	; 0x01
 2f0:	00 00       	nop
				}


	return Local_u8ErrorState;
 2f2:	89 81       	ldd	r24, Y+1	; 0x01

}
 2f4:	0f 90       	pop	r0
 2f6:	0f 90       	pop	r0
 2f8:	0f 90       	pop	r0
 2fa:	df 91       	pop	r29
 2fc:	cf 91       	pop	r28
 2fe:	08 95       	ret

00000300 <DIO_u8GetPinValue>:



u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8* Copy_pu8Value)
{
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	00 d0       	rcall	.+0      	; 0x306 <DIO_u8GetPinValue+0x6>
 306:	00 d0       	rcall	.+0      	; 0x308 <DIO_u8GetPinValue+0x8>
 308:	0f 92       	push	r0
 30a:	cd b7       	in	r28, 0x3d	; 61
 30c:	de b7       	in	r29, 0x3e	; 62
 30e:	8a 83       	std	Y+2, r24	; 0x02
 310:	6b 83       	std	Y+3, r22	; 0x03
 312:	5d 83       	std	Y+5, r21	; 0x05
 314:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState=0;
 316:	19 82       	std	Y+1, r1	; 0x01
	if( (Copy_pu8Value!=NULL) && (Copy_u8Pin<=DIO_u8PIN7) )
 318:	8c 81       	ldd	r24, Y+4	; 0x04
 31a:	9d 81       	ldd	r25, Y+5	; 0x05
 31c:	89 2b       	or	r24, r25
 31e:	09 f4       	brne	.+2      	; 0x322 <DIO_u8GetPinValue+0x22>
 320:	73 c0       	rjmp	.+230    	; 0x408 <__FUSE_REGION_LENGTH__+0x8>
 322:	8b 81       	ldd	r24, Y+3	; 0x03
 324:	88 30       	cpi	r24, 0x08	; 8
 326:	08 f0       	brcs	.+2      	; 0x32a <DIO_u8GetPinValue+0x2a>
 328:	6f c0       	rjmp	.+222    	; 0x408 <__FUSE_REGION_LENGTH__+0x8>
		{
			switch(Copy_u8Port)
 32a:	8a 81       	ldd	r24, Y+2	; 0x02
 32c:	88 2f       	mov	r24, r24
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	84 30       	cpi	r24, 0x04	; 4
 332:	91 05       	cpc	r25, r1
 334:	09 f4       	brne	.+2      	; 0x338 <DIO_u8GetPinValue+0x38>
 336:	4f c0       	rjmp	.+158    	; 0x3d6 <DIO_u8GetPinValue+0xd6>
 338:	85 30       	cpi	r24, 0x05	; 5
 33a:	91 05       	cpc	r25, r1
 33c:	0c f0       	brlt	.+2      	; 0x340 <DIO_u8GetPinValue+0x40>
 33e:	60 c0       	rjmp	.+192    	; 0x400 <__FUSE_REGION_LENGTH__>
 340:	83 30       	cpi	r24, 0x03	; 3
 342:	91 05       	cpc	r25, r1
 344:	99 f1       	breq	.+102    	; 0x3ac <DIO_u8GetPinValue+0xac>
 346:	84 30       	cpi	r24, 0x04	; 4
 348:	91 05       	cpc	r25, r1
 34a:	0c f0       	brlt	.+2      	; 0x34e <DIO_u8GetPinValue+0x4e>
 34c:	59 c0       	rjmp	.+178    	; 0x400 <__FUSE_REGION_LENGTH__>
 34e:	00 97       	sbiw	r24, 0x00	; 0
 350:	19 f0       	breq	.+6      	; 0x358 <DIO_u8GetPinValue+0x58>
 352:	01 97       	sbiw	r24, 0x01	; 1
 354:	b1 f0       	breq	.+44     	; 0x382 <DIO_u8GetPinValue+0x82>
 356:	54 c0       	rjmp	.+168    	; 0x400 <__FUSE_REGION_LENGTH__>
			{
				case DIO_u8PORTA: *Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin); break;
 358:	89 e3       	ldi	r24, 0x39	; 57
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	fc 01       	movw	r30, r24
 35e:	80 81       	ld	r24, Z
 360:	88 2f       	mov	r24, r24
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	2b 81       	ldd	r18, Y+3	; 0x03
 366:	22 2f       	mov	r18, r18
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	02 c0       	rjmp	.+4      	; 0x370 <DIO_u8GetPinValue+0x70>
 36c:	95 95       	asr	r25
 36e:	87 95       	ror	r24
 370:	2a 95       	dec	r18
 372:	e2 f7       	brpl	.-8      	; 0x36c <DIO_u8GetPinValue+0x6c>
 374:	28 2f       	mov	r18, r24
 376:	21 70       	andi	r18, 0x01	; 1
 378:	8c 81       	ldd	r24, Y+4	; 0x04
 37a:	9d 81       	ldd	r25, Y+5	; 0x05
 37c:	fc 01       	movw	r30, r24
 37e:	20 83       	st	Z, r18
 380:	42 c0       	rjmp	.+132    	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
			    case DIO_u8PORTB: *Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin); break;
 382:	86 e3       	ldi	r24, 0x36	; 54
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	fc 01       	movw	r30, r24
 388:	80 81       	ld	r24, Z
 38a:	88 2f       	mov	r24, r24
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	2b 81       	ldd	r18, Y+3	; 0x03
 390:	22 2f       	mov	r18, r18
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	02 c0       	rjmp	.+4      	; 0x39a <DIO_u8GetPinValue+0x9a>
 396:	95 95       	asr	r25
 398:	87 95       	ror	r24
 39a:	2a 95       	dec	r18
 39c:	e2 f7       	brpl	.-8      	; 0x396 <DIO_u8GetPinValue+0x96>
 39e:	28 2f       	mov	r18, r24
 3a0:	21 70       	andi	r18, 0x01	; 1
 3a2:	8c 81       	ldd	r24, Y+4	; 0x04
 3a4:	9d 81       	ldd	r25, Y+5	; 0x05
 3a6:	fc 01       	movw	r30, r24
 3a8:	20 83       	st	Z, r18
 3aa:	2d c0       	rjmp	.+90     	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
			    case DIO_u8PORTC: *Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin); break;
 3ac:	83 e3       	ldi	r24, 0x33	; 51
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	fc 01       	movw	r30, r24
 3b2:	80 81       	ld	r24, Z
 3b4:	88 2f       	mov	r24, r24
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	2b 81       	ldd	r18, Y+3	; 0x03
 3ba:	22 2f       	mov	r18, r18
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <DIO_u8GetPinValue+0xc4>
 3c0:	95 95       	asr	r25
 3c2:	87 95       	ror	r24
 3c4:	2a 95       	dec	r18
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <DIO_u8GetPinValue+0xc0>
 3c8:	28 2f       	mov	r18, r24
 3ca:	21 70       	andi	r18, 0x01	; 1
 3cc:	8c 81       	ldd	r24, Y+4	; 0x04
 3ce:	9d 81       	ldd	r25, Y+5	; 0x05
 3d0:	fc 01       	movw	r30, r24
 3d2:	20 83       	st	Z, r18
 3d4:	18 c0       	rjmp	.+48     	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
			    case DIO_u8PORTD: *Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin); break;
 3d6:	80 e3       	ldi	r24, 0x30	; 48
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	fc 01       	movw	r30, r24
 3dc:	80 81       	ld	r24, Z
 3de:	88 2f       	mov	r24, r24
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	2b 81       	ldd	r18, Y+3	; 0x03
 3e4:	22 2f       	mov	r18, r18
 3e6:	30 e0       	ldi	r19, 0x00	; 0
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <DIO_u8GetPinValue+0xee>
 3ea:	95 95       	asr	r25
 3ec:	87 95       	ror	r24
 3ee:	2a 95       	dec	r18
 3f0:	e2 f7       	brpl	.-8      	; 0x3ea <DIO_u8GetPinValue+0xea>
 3f2:	28 2f       	mov	r18, r24
 3f4:	21 70       	andi	r18, 0x01	; 1
 3f6:	8c 81       	ldd	r24, Y+4	; 0x04
 3f8:	9d 81       	ldd	r25, Y+5	; 0x05
 3fa:	fc 01       	movw	r30, r24
 3fc:	20 83       	st	Z, r18
 3fe:	03 c0       	rjmp	.+6      	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
			    default : Local_u8ErrorState=1; break;
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	89 83       	std	Y+1, r24	; 0x01
 404:	00 00       	nop
{

	u8 Local_u8ErrorState=0;
	if( (Copy_pu8Value!=NULL) && (Copy_u8Pin<=DIO_u8PIN7) )
		{
			switch(Copy_u8Port)
 406:	02 c0       	rjmp	.+4      	; 0x40c <__FUSE_REGION_LENGTH__+0xc>
			}

		}
		else
		{
		Local_u8ErrorState=1;
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	89 83       	std	Y+1, r24	; 0x01

		}

	return Local_u8ErrorState;
 40c:	89 81       	ldd	r24, Y+1	; 0x01
}
 40e:	0f 90       	pop	r0
 410:	0f 90       	pop	r0
 412:	0f 90       	pop	r0
 414:	0f 90       	pop	r0
 416:	0f 90       	pop	r0
 418:	df 91       	pop	r29
 41a:	cf 91       	pop	r28
 41c:	08 95       	ret

0000041e <PORT_voidInit>:
#include"PORT_interface.h"
#include"PORT_register.h"


void PORT_voidInit()
{
 41e:	cf 93       	push	r28
 420:	df 93       	push	r29
 422:	cd b7       	in	r28, 0x3d	; 61
 424:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
 426:	8a e3       	ldi	r24, 0x3A	; 58
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	fc 01       	movw	r30, r24
 42c:	10 82       	st	Z, r1
	DDRB=PORTB_DIR;
 42e:	87 e3       	ldi	r24, 0x37	; 55
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	20 ea       	ldi	r18, 0xA0	; 160
 434:	fc 01       	movw	r30, r24
 436:	20 83       	st	Z, r18
	DDRC=PORTC_DIR;
 438:	84 e3       	ldi	r24, 0x34	; 52
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	27 e0       	ldi	r18, 0x07	; 7
 43e:	fc 01       	movw	r30, r24
 440:	20 83       	st	Z, r18
	DDRD=PORTD_DIR;
 442:	81 e3       	ldi	r24, 0x31	; 49
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	fc 01       	movw	r30, r24
 448:	10 82       	st	Z, r1

	PORTA=PORTA_InitVal;
 44a:	8b e3       	ldi	r24, 0x3B	; 59
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	fc 01       	movw	r30, r24
 450:	10 82       	st	Z, r1
	PORTB=PORTB_InitVal;
 452:	88 e3       	ldi	r24, 0x38	; 56
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	28 e0       	ldi	r18, 0x08	; 8
 458:	fc 01       	movw	r30, r24
 45a:	20 83       	st	Z, r18
	PORTC=PORTC_InitVal;
 45c:	85 e3       	ldi	r24, 0x35	; 53
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	fc 01       	movw	r30, r24
 462:	10 82       	st	Z, r1
	PORTD=PORTD_InitVal;
 464:	82 e3       	ldi	r24, 0x32	; 50
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	fc 01       	movw	r30, r24
 46a:	10 82       	st	Z, r1
}
 46c:	00 00       	nop
 46e:	df 91       	pop	r29
 470:	cf 91       	pop	r28
 472:	08 95       	ret

00000474 <SPI_voidInitMaster>:
#include "SPI_config.h"
#include "SPI_private.h"


void SPI_voidInitMaster(void)
{
 474:	cf 93       	push	r28
 476:	df 93       	push	r29
 478:	cd b7       	in	r28, 0x3d	; 61
 47a:	de b7       	in	r29, 0x3e	; 62
	/* master initialization*/
	SET_BIT(SPCR,SPCR_MSTR);
 47c:	8d e2       	ldi	r24, 0x2D	; 45
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	fc 01       	movw	r30, r24
 482:	20 81       	ld	r18, Z
 484:	8d e2       	ldi	r24, 0x2D	; 45
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	20 61       	ori	r18, 0x10	; 16
 48a:	fc 01       	movw	r30, r24
 48c:	20 83       	st	Z, r18

	/*SPI Enable*/
	SET_BIT(SPCR,SPCR_SPE);
 48e:	8d e2       	ldi	r24, 0x2D	; 45
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	fc 01       	movw	r30, r24
 494:	20 81       	ld	r18, Z
 496:	8d e2       	ldi	r24, 0x2D	; 45
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	20 64       	ori	r18, 0x40	; 64
 49c:	fc 01       	movw	r30, r24
 49e:	20 83       	st	Z, r18

	/*Clock prescaler: divide by 16*/
	SET_BIT(SPCR,SPCR_SPR0);
 4a0:	8d e2       	ldi	r24, 0x2D	; 45
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	fc 01       	movw	r30, r24
 4a6:	20 81       	ld	r18, Z
 4a8:	8d e2       	ldi	r24, 0x2D	; 45
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	21 60       	ori	r18, 0x01	; 1
 4ae:	fc 01       	movw	r30, r24
 4b0:	20 83       	st	Z, r18
	CLR_BIT(SPCR,SPCR_SPR1);
 4b2:	8d e2       	ldi	r24, 0x2D	; 45
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	fc 01       	movw	r30, r24
 4b8:	20 81       	ld	r18, Z
 4ba:	8d e2       	ldi	r24, 0x2D	; 45
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	2d 7f       	andi	r18, 0xFD	; 253
 4c0:	fc 01       	movw	r30, r24
 4c2:	20 83       	st	Z, r18
	SET_BIT(SPSR,SPSR_SPI2X);
 4c4:	8e e2       	ldi	r24, 0x2E	; 46
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	fc 01       	movw	r30, r24
 4ca:	20 81       	ld	r18, Z
 4cc:	8e e2       	ldi	r24, 0x2E	; 46
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	21 60       	ori	r18, 0x01	; 1
 4d2:	fc 01       	movw	r30, r24
 4d4:	20 83       	st	Z, r18

}
 4d6:	00 00       	nop
 4d8:	df 91       	pop	r29
 4da:	cf 91       	pop	r28
 4dc:	08 95       	ret

000004de <SPI_voidInitSlave>:

void SPI_voidInitSlave(void)
{
 4de:	cf 93       	push	r28
 4e0:	df 93       	push	r29
 4e2:	cd b7       	in	r28, 0x3d	; 61
 4e4:	de b7       	in	r29, 0x3e	; 62
	/*master initialization*/
	CLR_BIT(SPCR,SPCR_MSTR);
 4e6:	8d e2       	ldi	r24, 0x2D	; 45
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	fc 01       	movw	r30, r24
 4ec:	20 81       	ld	r18, Z
 4ee:	8d e2       	ldi	r24, 0x2D	; 45
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	2f 7e       	andi	r18, 0xEF	; 239
 4f4:	fc 01       	movw	r30, r24
 4f6:	20 83       	st	Z, r18

	/*SPI Enable*/
	SET_BIT(SPCR,SPCR_SPE);
 4f8:	8d e2       	ldi	r24, 0x2D	; 45
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	fc 01       	movw	r30, r24
 4fe:	20 81       	ld	r18, Z
 500:	8d e2       	ldi	r24, 0x2D	; 45
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	20 64       	ori	r18, 0x40	; 64
 506:	fc 01       	movw	r30, r24
 508:	20 83       	st	Z, r18

}
 50a:	00 00       	nop
 50c:	df 91       	pop	r29
 50e:	cf 91       	pop	r28
 510:	08 95       	ret

00000512 <SPI_u8TranSceive>:

u8 SPI_u8TranSceive(u8 Copy_u8Data)
{
 512:	cf 93       	push	r28
 514:	df 93       	push	r29
 516:	0f 92       	push	r0
 518:	cd b7       	in	r28, 0x3d	; 61
 51a:	de b7       	in	r29, 0x3e	; 62
 51c:	89 83       	std	Y+1, r24	; 0x01
	/*Send the data*/
	SPDR = Copy_u8Data;
 51e:	8f e2       	ldi	r24, 0x2F	; 47
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	29 81       	ldd	r18, Y+1	; 0x01
 524:	fc 01       	movw	r30, r24
 526:	20 83       	st	Z, r18

	/*Wait (Busy Waiting ) until transfer is complete*/
	while(GET_BIT(SPSR,SPSR_SPIF) == 0);
 528:	00 00       	nop
 52a:	8e e2       	ldi	r24, 0x2E	; 46
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	fc 01       	movw	r30, r24
 530:	80 81       	ld	r24, Z
 532:	88 1f       	adc	r24, r24
 534:	88 27       	eor	r24, r24
 536:	88 1f       	adc	r24, r24
 538:	88 2f       	mov	r24, r24
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	81 70       	andi	r24, 0x01	; 1
 53e:	99 27       	eor	r25, r25
 540:	89 2b       	or	r24, r25
 542:	99 f3       	breq	.-26     	; 0x52a <SPI_u8TranSceive+0x18>

	/*Get the exchanged data*/
	return SPDR;
 544:	8f e2       	ldi	r24, 0x2F	; 47
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	fc 01       	movw	r30, r24
 54a:	80 81       	ld	r24, Z
}
 54c:	0f 90       	pop	r0
 54e:	df 91       	pop	r29
 550:	cf 91       	pop	r28
 552:	08 95       	ret

00000554 <main>:
#include "SPI_interface.h"

#include"util/delay.h"

void main(void)
{
 554:	cf 93       	push	r28
 556:	df 93       	push	r29
 558:	cd b7       	in	r28, 0x3d	; 61
 55a:	de b7       	in	r29, 0x3e	; 62
 55c:	a2 97       	sbiw	r28, 0x22	; 34
 55e:	0f b6       	in	r0, 0x3f	; 63
 560:	f8 94       	cli
 562:	de bf       	out	0x3e, r29	; 62
 564:	0f be       	out	0x3f, r0	; 63
 566:	cd bf       	out	0x3d, r28	; 61
	PORT_voidInit();
 568:	0e 94 0f 02 	call	0x41e	; 0x41e <PORT_voidInit>
	SPI_voidInitMaster();
 56c:	0e 94 3a 02 	call	0x474	; 0x474 <SPI_voidInitMaster>

	while(1)
	{
		SPI_u8TranSceive(1);
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	0e 94 89 02 	call	0x512	; 0x512 <SPI_u8TranSceive>
 576:	80 e0       	ldi	r24, 0x00	; 0
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	a0 e2       	ldi	r26, 0x20	; 32
 57c:	b1 e4       	ldi	r27, 0x41	; 65
 57e:	89 83       	std	Y+1, r24	; 0x01
 580:	9a 83       	std	Y+2, r25	; 0x02
 582:	ab 83       	std	Y+3, r26	; 0x03
 584:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 586:	20 e0       	ldi	r18, 0x00	; 0
 588:	30 e0       	ldi	r19, 0x00	; 0
 58a:	4a ef       	ldi	r20, 0xFA	; 250
 58c:	54 e4       	ldi	r21, 0x44	; 68
 58e:	69 81       	ldd	r22, Y+1	; 0x01
 590:	7a 81       	ldd	r23, Y+2	; 0x02
 592:	8b 81       	ldd	r24, Y+3	; 0x03
 594:	9c 81       	ldd	r25, Y+4	; 0x04
 596:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__mulsf3>
 59a:	6b 8b       	std	Y+19, r22	; 0x13
 59c:	7c 8b       	std	Y+20, r23	; 0x14
 59e:	8d 8b       	std	Y+21, r24	; 0x15
 5a0:	9e 8b       	std	Y+22, r25	; 0x16
 5a2:	8b 89       	ldd	r24, Y+19	; 0x13
 5a4:	9c 89       	ldd	r25, Y+20	; 0x14
 5a6:	ad 89       	ldd	r26, Y+21	; 0x15
 5a8:	be 89       	ldd	r27, Y+22	; 0x16
 5aa:	8d 83       	std	Y+5, r24	; 0x05
 5ac:	9e 83       	std	Y+6, r25	; 0x06
 5ae:	af 83       	std	Y+7, r26	; 0x07
 5b0:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 5b2:	20 e0       	ldi	r18, 0x00	; 0
 5b4:	30 e0       	ldi	r19, 0x00	; 0
 5b6:	40 e8       	ldi	r20, 0x80	; 128
 5b8:	5f e3       	ldi	r21, 0x3F	; 63
 5ba:	6d 81       	ldd	r22, Y+5	; 0x05
 5bc:	7e 81       	ldd	r23, Y+6	; 0x06
 5be:	8f 81       	ldd	r24, Y+7	; 0x07
 5c0:	98 85       	ldd	r25, Y+8	; 0x08
 5c2:	0e 94 4a 03 	call	0x694	; 0x694 <__cmpsf2>
 5c6:	88 23       	and	r24, r24
 5c8:	2c f4       	brge	.+10     	; 0x5d4 <main+0x80>
		__ticks = 1;
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	9a 87       	std	Y+10, r25	; 0x0a
 5d0:	89 87       	std	Y+9, r24	; 0x09
 5d2:	54 c0       	rjmp	.+168    	; 0x67c <main+0x128>
	else if (__tmp > 65535)
 5d4:	20 e0       	ldi	r18, 0x00	; 0
 5d6:	3f ef       	ldi	r19, 0xFF	; 255
 5d8:	4f e7       	ldi	r20, 0x7F	; 127
 5da:	57 e4       	ldi	r21, 0x47	; 71
 5dc:	6d 81       	ldd	r22, Y+5	; 0x05
 5de:	7e 81       	ldd	r23, Y+6	; 0x06
 5e0:	8f 81       	ldd	r24, Y+7	; 0x07
 5e2:	98 85       	ldd	r25, Y+8	; 0x08
 5e4:	0e 94 cb 03 	call	0x796	; 0x796 <__gesf2>
 5e8:	18 16       	cp	r1, r24
 5ea:	d4 f5       	brge	.+116    	; 0x660 <main+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 5ec:	20 e0       	ldi	r18, 0x00	; 0
 5ee:	30 e0       	ldi	r19, 0x00	; 0
 5f0:	40 e2       	ldi	r20, 0x20	; 32
 5f2:	51 e4       	ldi	r21, 0x41	; 65
 5f4:	69 81       	ldd	r22, Y+1	; 0x01
 5f6:	7a 81       	ldd	r23, Y+2	; 0x02
 5f8:	8b 81       	ldd	r24, Y+3	; 0x03
 5fa:	9c 81       	ldd	r25, Y+4	; 0x04
 5fc:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__mulsf3>
 600:	6f 8b       	std	Y+23, r22	; 0x17
 602:	78 8f       	std	Y+24, r23	; 0x18
 604:	89 8f       	std	Y+25, r24	; 0x19
 606:	9a 8f       	std	Y+26, r25	; 0x1a
 608:	8f 89       	ldd	r24, Y+23	; 0x17
 60a:	98 8d       	ldd	r25, Y+24	; 0x18
 60c:	a9 8d       	ldd	r26, Y+25	; 0x19
 60e:	ba 8d       	ldd	r27, Y+26	; 0x1a
 610:	8f 87       	std	Y+15, r24	; 0x0f
 612:	98 8b       	std	Y+16, r25	; 0x10
 614:	a9 8b       	std	Y+17, r26	; 0x11
 616:	ba 8b       	std	Y+18, r27	; 0x12
 618:	6f 85       	ldd	r22, Y+15	; 0x0f
 61a:	78 89       	ldd	r23, Y+16	; 0x10
 61c:	89 89       	ldd	r24, Y+17	; 0x11
 61e:	9a 89       	ldd	r25, Y+18	; 0x12
 620:	0e 94 4f 03 	call	0x69e	; 0x69e <__fixunssfsi>
 624:	6b 8f       	std	Y+27, r22	; 0x1b
 626:	7c 8f       	std	Y+28, r23	; 0x1c
 628:	8d 8f       	std	Y+29, r24	; 0x1d
 62a:	9e 8f       	std	Y+30, r25	; 0x1e
 62c:	ab 8d       	ldd	r26, Y+27	; 0x1b
 62e:	bc 8d       	ldd	r27, Y+28	; 0x1c
 630:	ba 87       	std	Y+10, r27	; 0x0a
 632:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
 634:	10 c0       	rjmp	.+32     	; 0x656 <main+0x102>
 636:	88 ec       	ldi	r24, 0xC8	; 200
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	9c 87       	std	Y+12, r25	; 0x0c
 63c:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 63e:	8b 85       	ldd	r24, Y+11	; 0x0b
 640:	9c 85       	ldd	r25, Y+12	; 0x0c
 642:	01 97       	sbiw	r24, 0x01	; 1
 644:	f1 f7       	brne	.-4      	; 0x642 <main+0xee>
 646:	9c 87       	std	Y+12, r25	; 0x0c
 648:	8b 87       	std	Y+11, r24	; 0x0b
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 64a:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 64c:	89 85       	ldd	r24, Y+9	; 0x09
 64e:	9a 85       	ldd	r25, Y+10	; 0x0a
 650:	01 97       	sbiw	r24, 0x01	; 1
 652:	9a 87       	std	Y+10, r25	; 0x0a
 654:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 656:	89 85       	ldd	r24, Y+9	; 0x09
 658:	9a 85       	ldd	r25, Y+10	; 0x0a
 65a:	89 2b       	or	r24, r25
 65c:	61 f7       	brne	.-40     	; 0x636 <main+0xe2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
 65e:	19 c0       	rjmp	.+50     	; 0x692 <main+0x13e>
	}
	else
		__ticks = (uint16_t)__tmp;
 660:	6d 81       	ldd	r22, Y+5	; 0x05
 662:	7e 81       	ldd	r23, Y+6	; 0x06
 664:	8f 81       	ldd	r24, Y+7	; 0x07
 666:	98 85       	ldd	r25, Y+8	; 0x08
 668:	0e 94 4f 03 	call	0x69e	; 0x69e <__fixunssfsi>
 66c:	6f 8f       	std	Y+31, r22	; 0x1f
 66e:	78 a3       	std	Y+32, r23	; 0x20
 670:	89 a3       	std	Y+33, r24	; 0x21
 672:	9a a3       	std	Y+34, r25	; 0x22
 674:	8f 8d       	ldd	r24, Y+31	; 0x1f
 676:	98 a1       	ldd	r25, Y+32	; 0x20
 678:	9a 87       	std	Y+10, r25	; 0x0a
 67a:	89 87       	std	Y+9, r24	; 0x09
 67c:	89 85       	ldd	r24, Y+9	; 0x09
 67e:	9a 85       	ldd	r25, Y+10	; 0x0a
 680:	9e 87       	std	Y+14, r25	; 0x0e
 682:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 684:	8d 85       	ldd	r24, Y+13	; 0x0d
 686:	9e 85       	ldd	r25, Y+14	; 0x0e
 688:	01 97       	sbiw	r24, 0x01	; 1
 68a:	f1 f7       	brne	.-4      	; 0x688 <main+0x134>
 68c:	9e 87       	std	Y+14, r25	; 0x0e
 68e:	8d 87       	std	Y+13, r24	; 0x0d
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 690:	00 00       	nop
 692:	6e cf       	rjmp	.-292    	; 0x570 <main+0x1c>

00000694 <__cmpsf2>:
 694:	0e 94 7e 03 	call	0x6fc	; 0x6fc <__fp_cmp>
 698:	08 f4       	brcc	.+2      	; 0x69c <__cmpsf2+0x8>
 69a:	81 e0       	ldi	r24, 0x01	; 1
 69c:	08 95       	ret

0000069e <__fixunssfsi>:
 69e:	0e 94 aa 03 	call	0x754	; 0x754 <__fp_splitA>
 6a2:	88 f0       	brcs	.+34     	; 0x6c6 <__fixunssfsi+0x28>
 6a4:	9f 57       	subi	r25, 0x7F	; 127
 6a6:	98 f0       	brcs	.+38     	; 0x6ce <__fixunssfsi+0x30>
 6a8:	b9 2f       	mov	r27, r25
 6aa:	99 27       	eor	r25, r25
 6ac:	b7 51       	subi	r27, 0x17	; 23
 6ae:	b0 f0       	brcs	.+44     	; 0x6dc <__fixunssfsi+0x3e>
 6b0:	e1 f0       	breq	.+56     	; 0x6ea <__fixunssfsi+0x4c>
 6b2:	66 0f       	add	r22, r22
 6b4:	77 1f       	adc	r23, r23
 6b6:	88 1f       	adc	r24, r24
 6b8:	99 1f       	adc	r25, r25
 6ba:	1a f0       	brmi	.+6      	; 0x6c2 <__fixunssfsi+0x24>
 6bc:	ba 95       	dec	r27
 6be:	c9 f7       	brne	.-14     	; 0x6b2 <__fixunssfsi+0x14>
 6c0:	14 c0       	rjmp	.+40     	; 0x6ea <__fixunssfsi+0x4c>
 6c2:	b1 30       	cpi	r27, 0x01	; 1
 6c4:	91 f0       	breq	.+36     	; 0x6ea <__fixunssfsi+0x4c>
 6c6:	0e 94 c4 03 	call	0x788	; 0x788 <__fp_zero>
 6ca:	b1 e0       	ldi	r27, 0x01	; 1
 6cc:	08 95       	ret
 6ce:	0c 94 c4 03 	jmp	0x788	; 0x788 <__fp_zero>
 6d2:	67 2f       	mov	r22, r23
 6d4:	78 2f       	mov	r23, r24
 6d6:	88 27       	eor	r24, r24
 6d8:	b8 5f       	subi	r27, 0xF8	; 248
 6da:	39 f0       	breq	.+14     	; 0x6ea <__fixunssfsi+0x4c>
 6dc:	b9 3f       	cpi	r27, 0xF9	; 249
 6de:	cc f3       	brlt	.-14     	; 0x6d2 <__fixunssfsi+0x34>
 6e0:	86 95       	lsr	r24
 6e2:	77 95       	ror	r23
 6e4:	67 95       	ror	r22
 6e6:	b3 95       	inc	r27
 6e8:	d9 f7       	brne	.-10     	; 0x6e0 <__fixunssfsi+0x42>
 6ea:	3e f4       	brtc	.+14     	; 0x6fa <__fixunssfsi+0x5c>
 6ec:	90 95       	com	r25
 6ee:	80 95       	com	r24
 6f0:	70 95       	com	r23
 6f2:	61 95       	neg	r22
 6f4:	7f 4f       	sbci	r23, 0xFF	; 255
 6f6:	8f 4f       	sbci	r24, 0xFF	; 255
 6f8:	9f 4f       	sbci	r25, 0xFF	; 255
 6fa:	08 95       	ret

000006fc <__fp_cmp>:
 6fc:	99 0f       	add	r25, r25
 6fe:	00 08       	sbc	r0, r0
 700:	55 0f       	add	r21, r21
 702:	aa 0b       	sbc	r26, r26
 704:	e0 e8       	ldi	r30, 0x80	; 128
 706:	fe ef       	ldi	r31, 0xFE	; 254
 708:	16 16       	cp	r1, r22
 70a:	17 06       	cpc	r1, r23
 70c:	e8 07       	cpc	r30, r24
 70e:	f9 07       	cpc	r31, r25
 710:	c0 f0       	brcs	.+48     	; 0x742 <__fp_cmp+0x46>
 712:	12 16       	cp	r1, r18
 714:	13 06       	cpc	r1, r19
 716:	e4 07       	cpc	r30, r20
 718:	f5 07       	cpc	r31, r21
 71a:	98 f0       	brcs	.+38     	; 0x742 <__fp_cmp+0x46>
 71c:	62 1b       	sub	r22, r18
 71e:	73 0b       	sbc	r23, r19
 720:	84 0b       	sbc	r24, r20
 722:	95 0b       	sbc	r25, r21
 724:	39 f4       	brne	.+14     	; 0x734 <__fp_cmp+0x38>
 726:	0a 26       	eor	r0, r26
 728:	61 f0       	breq	.+24     	; 0x742 <__fp_cmp+0x46>
 72a:	23 2b       	or	r18, r19
 72c:	24 2b       	or	r18, r20
 72e:	25 2b       	or	r18, r21
 730:	21 f4       	brne	.+8      	; 0x73a <__fp_cmp+0x3e>
 732:	08 95       	ret
 734:	0a 26       	eor	r0, r26
 736:	09 f4       	brne	.+2      	; 0x73a <__fp_cmp+0x3e>
 738:	a1 40       	sbci	r26, 0x01	; 1
 73a:	a6 95       	lsr	r26
 73c:	8f ef       	ldi	r24, 0xFF	; 255
 73e:	81 1d       	adc	r24, r1
 740:	81 1d       	adc	r24, r1
 742:	08 95       	ret

00000744 <__fp_split3>:
 744:	57 fd       	sbrc	r21, 7
 746:	90 58       	subi	r25, 0x80	; 128
 748:	44 0f       	add	r20, r20
 74a:	55 1f       	adc	r21, r21
 74c:	59 f0       	breq	.+22     	; 0x764 <__fp_splitA+0x10>
 74e:	5f 3f       	cpi	r21, 0xFF	; 255
 750:	71 f0       	breq	.+28     	; 0x76e <__fp_splitA+0x1a>
 752:	47 95       	ror	r20

00000754 <__fp_splitA>:
 754:	88 0f       	add	r24, r24
 756:	97 fb       	bst	r25, 7
 758:	99 1f       	adc	r25, r25
 75a:	61 f0       	breq	.+24     	; 0x774 <__fp_splitA+0x20>
 75c:	9f 3f       	cpi	r25, 0xFF	; 255
 75e:	79 f0       	breq	.+30     	; 0x77e <__fp_splitA+0x2a>
 760:	87 95       	ror	r24
 762:	08 95       	ret
 764:	12 16       	cp	r1, r18
 766:	13 06       	cpc	r1, r19
 768:	14 06       	cpc	r1, r20
 76a:	55 1f       	adc	r21, r21
 76c:	f2 cf       	rjmp	.-28     	; 0x752 <__fp_split3+0xe>
 76e:	46 95       	lsr	r20
 770:	f1 df       	rcall	.-30     	; 0x754 <__fp_splitA>
 772:	08 c0       	rjmp	.+16     	; 0x784 <__fp_splitA+0x30>
 774:	16 16       	cp	r1, r22
 776:	17 06       	cpc	r1, r23
 778:	18 06       	cpc	r1, r24
 77a:	99 1f       	adc	r25, r25
 77c:	f1 cf       	rjmp	.-30     	; 0x760 <__fp_splitA+0xc>
 77e:	86 95       	lsr	r24
 780:	71 05       	cpc	r23, r1
 782:	61 05       	cpc	r22, r1
 784:	08 94       	sec
 786:	08 95       	ret

00000788 <__fp_zero>:
 788:	e8 94       	clt

0000078a <__fp_szero>:
 78a:	bb 27       	eor	r27, r27
 78c:	66 27       	eor	r22, r22
 78e:	77 27       	eor	r23, r23
 790:	cb 01       	movw	r24, r22
 792:	97 f9       	bld	r25, 7
 794:	08 95       	ret

00000796 <__gesf2>:
 796:	0e 94 7e 03 	call	0x6fc	; 0x6fc <__fp_cmp>
 79a:	08 f4       	brcc	.+2      	; 0x79e <__gesf2+0x8>
 79c:	8f ef       	ldi	r24, 0xFF	; 255
 79e:	08 95       	ret

000007a0 <__mulsf3>:
 7a0:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__mulsf3x>
 7a4:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <__fp_round>
 7a8:	0e 94 46 04 	call	0x88c	; 0x88c <__fp_pscA>
 7ac:	38 f0       	brcs	.+14     	; 0x7bc <__mulsf3+0x1c>
 7ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fp_pscB>
 7b2:	20 f0       	brcs	.+8      	; 0x7bc <__mulsf3+0x1c>
 7b4:	95 23       	and	r25, r21
 7b6:	11 f0       	breq	.+4      	; 0x7bc <__mulsf3+0x1c>
 7b8:	0c 94 3d 04 	jmp	0x87a	; 0x87a <__fp_inf>
 7bc:	0c 94 43 04 	jmp	0x886	; 0x886 <__fp_nan>
 7c0:	11 24       	eor	r1, r1
 7c2:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__fp_szero>

000007c6 <__mulsf3x>:
 7c6:	0e 94 a2 03 	call	0x744	; 0x744 <__fp_split3>
 7ca:	70 f3       	brcs	.-36     	; 0x7a8 <__mulsf3+0x8>

000007cc <__mulsf3_pse>:
 7cc:	95 9f       	mul	r25, r21
 7ce:	c1 f3       	breq	.-16     	; 0x7c0 <__mulsf3+0x20>
 7d0:	95 0f       	add	r25, r21
 7d2:	50 e0       	ldi	r21, 0x00	; 0
 7d4:	55 1f       	adc	r21, r21
 7d6:	62 9f       	mul	r22, r18
 7d8:	f0 01       	movw	r30, r0
 7da:	72 9f       	mul	r23, r18
 7dc:	bb 27       	eor	r27, r27
 7de:	f0 0d       	add	r31, r0
 7e0:	b1 1d       	adc	r27, r1
 7e2:	63 9f       	mul	r22, r19
 7e4:	aa 27       	eor	r26, r26
 7e6:	f0 0d       	add	r31, r0
 7e8:	b1 1d       	adc	r27, r1
 7ea:	aa 1f       	adc	r26, r26
 7ec:	64 9f       	mul	r22, r20
 7ee:	66 27       	eor	r22, r22
 7f0:	b0 0d       	add	r27, r0
 7f2:	a1 1d       	adc	r26, r1
 7f4:	66 1f       	adc	r22, r22
 7f6:	82 9f       	mul	r24, r18
 7f8:	22 27       	eor	r18, r18
 7fa:	b0 0d       	add	r27, r0
 7fc:	a1 1d       	adc	r26, r1
 7fe:	62 1f       	adc	r22, r18
 800:	73 9f       	mul	r23, r19
 802:	b0 0d       	add	r27, r0
 804:	a1 1d       	adc	r26, r1
 806:	62 1f       	adc	r22, r18
 808:	83 9f       	mul	r24, r19
 80a:	a0 0d       	add	r26, r0
 80c:	61 1d       	adc	r22, r1
 80e:	22 1f       	adc	r18, r18
 810:	74 9f       	mul	r23, r20
 812:	33 27       	eor	r19, r19
 814:	a0 0d       	add	r26, r0
 816:	61 1d       	adc	r22, r1
 818:	23 1f       	adc	r18, r19
 81a:	84 9f       	mul	r24, r20
 81c:	60 0d       	add	r22, r0
 81e:	21 1d       	adc	r18, r1
 820:	82 2f       	mov	r24, r18
 822:	76 2f       	mov	r23, r22
 824:	6a 2f       	mov	r22, r26
 826:	11 24       	eor	r1, r1
 828:	9f 57       	subi	r25, 0x7F	; 127
 82a:	50 40       	sbci	r21, 0x00	; 0
 82c:	9a f0       	brmi	.+38     	; 0x854 <__mulsf3_pse+0x88>
 82e:	f1 f0       	breq	.+60     	; 0x86c <__stack+0xd>
 830:	88 23       	and	r24, r24
 832:	4a f0       	brmi	.+18     	; 0x846 <__mulsf3_pse+0x7a>
 834:	ee 0f       	add	r30, r30
 836:	ff 1f       	adc	r31, r31
 838:	bb 1f       	adc	r27, r27
 83a:	66 1f       	adc	r22, r22
 83c:	77 1f       	adc	r23, r23
 83e:	88 1f       	adc	r24, r24
 840:	91 50       	subi	r25, 0x01	; 1
 842:	50 40       	sbci	r21, 0x00	; 0
 844:	a9 f7       	brne	.-22     	; 0x830 <__mulsf3_pse+0x64>
 846:	9e 3f       	cpi	r25, 0xFE	; 254
 848:	51 05       	cpc	r21, r1
 84a:	80 f0       	brcs	.+32     	; 0x86c <__stack+0xd>
 84c:	0c 94 3d 04 	jmp	0x87a	; 0x87a <__fp_inf>
 850:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__fp_szero>
 854:	5f 3f       	cpi	r21, 0xFF	; 255
 856:	e4 f3       	brlt	.-8      	; 0x850 <__mulsf3_pse+0x84>
 858:	98 3e       	cpi	r25, 0xE8	; 232
 85a:	d4 f3       	brlt	.-12     	; 0x850 <__mulsf3_pse+0x84>
 85c:	86 95       	lsr	r24
 85e:	77 95       	ror	r23
 860:	67 95       	ror	r22
 862:	b7 95       	ror	r27
 864:	f7 95       	ror	r31
 866:	e7 95       	ror	r30
 868:	9f 5f       	subi	r25, 0xFF	; 255
 86a:	c1 f7       	brne	.-16     	; 0x85c <__mulsf3_pse+0x90>
 86c:	fe 2b       	or	r31, r30
 86e:	88 0f       	add	r24, r24
 870:	91 1d       	adc	r25, r1
 872:	96 95       	lsr	r25
 874:	87 95       	ror	r24
 876:	97 f9       	bld	r25, 7
 878:	08 95       	ret

0000087a <__fp_inf>:
 87a:	97 f9       	bld	r25, 7
 87c:	9f 67       	ori	r25, 0x7F	; 127
 87e:	80 e8       	ldi	r24, 0x80	; 128
 880:	70 e0       	ldi	r23, 0x00	; 0
 882:	60 e0       	ldi	r22, 0x00	; 0
 884:	08 95       	ret

00000886 <__fp_nan>:
 886:	9f ef       	ldi	r25, 0xFF	; 255
 888:	80 ec       	ldi	r24, 0xC0	; 192
 88a:	08 95       	ret

0000088c <__fp_pscA>:
 88c:	00 24       	eor	r0, r0
 88e:	0a 94       	dec	r0
 890:	16 16       	cp	r1, r22
 892:	17 06       	cpc	r1, r23
 894:	18 06       	cpc	r1, r24
 896:	09 06       	cpc	r0, r25
 898:	08 95       	ret

0000089a <__fp_pscB>:
 89a:	00 24       	eor	r0, r0
 89c:	0a 94       	dec	r0
 89e:	12 16       	cp	r1, r18
 8a0:	13 06       	cpc	r1, r19
 8a2:	14 06       	cpc	r1, r20
 8a4:	05 06       	cpc	r0, r21
 8a6:	08 95       	ret

000008a8 <__fp_round>:
 8a8:	09 2e       	mov	r0, r25
 8aa:	03 94       	inc	r0
 8ac:	00 0c       	add	r0, r0
 8ae:	11 f4       	brne	.+4      	; 0x8b4 <__fp_round+0xc>
 8b0:	88 23       	and	r24, r24
 8b2:	52 f0       	brmi	.+20     	; 0x8c8 <__fp_round+0x20>
 8b4:	bb 0f       	add	r27, r27
 8b6:	40 f4       	brcc	.+16     	; 0x8c8 <__fp_round+0x20>
 8b8:	bf 2b       	or	r27, r31
 8ba:	11 f4       	brne	.+4      	; 0x8c0 <__fp_round+0x18>
 8bc:	60 ff       	sbrs	r22, 0
 8be:	04 c0       	rjmp	.+8      	; 0x8c8 <__fp_round+0x20>
 8c0:	6f 5f       	subi	r22, 0xFF	; 255
 8c2:	7f 4f       	sbci	r23, 0xFF	; 255
 8c4:	8f 4f       	sbci	r24, 0xFF	; 255
 8c6:	9f 4f       	sbci	r25, 0xFF	; 255
 8c8:	08 95       	ret

000008ca <_exit>:
 8ca:	f8 94       	cli

000008cc <__stop_program>:
 8cc:	ff cf       	rjmp	.-2      	; 0x8cc <__stop_program>
