/***************************************************************/
/***************************************************************/
/*************   Author: Ahmed Kamal   *************************/
/*************   Layer: RTOS Stack     *************************/
/*************   SWC: RTOS             *************************/
/*************   Version: 1.00         *************************/
/***************************************************************/
/***************************************************************/

#include"STD_TYPES.h"

#include"TIMER_interface.h"
#include"GIE_interface.h"

#include"RTOS_private.h"
#include"RTOS_interface.h"
#include"RTOS_config.h"


Task_t SystemTasks[TASK_NUM] = {{NULL}};

void RTOS_voidStart(void)
{
	/**/
	TIMER0_u8SetCallBack(&voidScheduler);
	GIE_voidEnable();
	TIMER0_voidInit();
}

u8 RTOS_voidCreateTask(u8 Copy_u8Priority, u16 Copy_u16Periodicity, void(*Copy_pvTaskFunc)(void),,u16 Copy_u16FirstDelay)
{
	u8 Local_u8ErrorState = OK;

	/*check if the required priority is empty or used before for another task*/
	if(SystemTasks[Copy_u8Priority].TaskFunc == NULL)
	{
		SystemTasks[Copy_u8Priority].Periodicity = Copy_u16Periodicity;
		SystemTasks[Copy_u8Priority].TaskFunc = Copy_pvTaskFunc;
		SystemTasks[Copy_u8Priority].State = TASK_RESUMED;  // Initialize task state
		SystemTasks[Copy_u8Priority].FirstDelay = Copy_u16FirstDelay;
	}
	else
	{
		/*priority is reserved before, don't create the task*/
		Local_u8ErrorState = NOK;
	}
	return Local_u8ErrorState;
}

void RTOS_voidSuspendTask(u8 Copy_u8Priority)
{
	SystemTasks[Copy_u8Priority].State = TASK_SUSPENDED;
}

void RTOS_voidResumeTask(u8 Copy_u8Priority)
{
	SystemTasks[Copy_u8Priority].State = TASK_RESUMED;
}

void RTOS_voidDeleteTask(u8 Copy_u8Priority)
{
	SystemTasks[Copy_u8Priority].TaskFunc = NULL;
}

static void voidScheduler(void)
{
	static u16 Local_u16TickCounter=0;
	u8 Local_u8TaskCounter;

	Local_u16TickCounter++;

	/*Loop on all tasks to check their periodicity*/
	for(Local_u8TaskCounter=0; Local_u8TaskCounter < TASK_NUM; Local_u8TaskCounter++)
	{
		/*check if the task is suspended or not*/
		if(SystemTasks[Local_u8TaskCounter].State == TASK_RESUMED)
		{
			if((Local_u16TickCounter % SystemTasks[Local_u8TaskCounter].Periodicity) == 0)
			{
				/*Invoke the task function*/
				if( SystemTasks[Local_u8TaskCounter].TaskFunc != NULL )
				{
					SystemTasks[Local_u8TaskCounter].TaskFunc();
				}
				else
				{
					/*Do nothing*/
				}
			}
		}
		else
		{
			/*Task is suspended, do nothing*/
		}
	}
}

