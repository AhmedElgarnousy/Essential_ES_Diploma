
SPI_MASTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000564  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000564  000005d8  2**0
                  ALLOC, LOAD, DATA
  2 .stab         000012e4  00000000  00000000  000005d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e0f  00000000  00000000  000018bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  000026cb  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000026dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000020  00000000  00000000  00002718  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000050c  00000000  00000000  00002738  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004b7  00000000  00000000  00002c44  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000007e  00000000  00000000  000030fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001f4  00000000  00000000  00003179  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 a9 02 	call	0x552	; 0x552 <main>
  64:	0c 94 b0 02 	jmp	0x560	; 0x560 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_u8SetPinValue>:
#include"DIO_private.h"



u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	00 d0       	rcall	.+0      	; 0x72 <DIO_u8SetPinValue+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <DIO_u8SetPinValue+0x8>
  74:	cd b7       	in	r28, 0x3d	; 61
  76:	de b7       	in	r29, 0x3e	; 62
  78:	8a 83       	std	Y+2, r24	; 0x02
  7a:	6b 83       	std	Y+3, r22	; 0x03
  7c:	4c 83       	std	Y+4, r20	; 0x04

u8 Local_u8ErrorState=0;
  7e:	19 82       	std	Y+1, r1	; 0x01

if(Copy_u8Pin<=DIO_u8PIN7)
  80:	8b 81       	ldd	r24, Y+3	; 0x03
  82:	88 30       	cpi	r24, 0x08	; 8
  84:	08 f0       	brcs	.+2      	; 0x88 <DIO_u8SetPinValue+0x1c>
  86:	f3 c0       	rjmp	.+486    	; 0x26e <DIO_u8SetPinValue+0x202>
{
	if(Copy_u8Value==DIO_u8PIN_HIGH)
  88:	8c 81       	ldd	r24, Y+4	; 0x04
  8a:	81 30       	cpi	r24, 0x01	; 1
  8c:	09 f0       	breq	.+2      	; 0x90 <DIO_u8SetPinValue+0x24>
  8e:	72 c0       	rjmp	.+228    	; 0x174 <DIO_u8SetPinValue+0x108>
		{
		switch(Copy_u8Port)
  90:	8a 81       	ldd	r24, Y+2	; 0x02
  92:	88 2f       	mov	r24, r24
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	84 30       	cpi	r24, 0x04	; 4
  98:	91 05       	cpc	r25, r1
  9a:	09 f4       	brne	.+2      	; 0x9e <DIO_u8SetPinValue+0x32>
  9c:	52 c0       	rjmp	.+164    	; 0x142 <DIO_u8SetPinValue+0xd6>
  9e:	85 30       	cpi	r24, 0x05	; 5
  a0:	91 05       	cpc	r25, r1
  a2:	0c f0       	brlt	.+2      	; 0xa6 <DIO_u8SetPinValue+0x3a>
  a4:	64 c0       	rjmp	.+200    	; 0x16e <DIO_u8SetPinValue+0x102>
  a6:	83 30       	cpi	r24, 0x03	; 3
  a8:	91 05       	cpc	r25, r1
  aa:	a9 f1       	breq	.+106    	; 0x116 <DIO_u8SetPinValue+0xaa>
  ac:	84 30       	cpi	r24, 0x04	; 4
  ae:	91 05       	cpc	r25, r1
  b0:	0c f0       	brlt	.+2      	; 0xb4 <DIO_u8SetPinValue+0x48>
  b2:	5d c0       	rjmp	.+186    	; 0x16e <DIO_u8SetPinValue+0x102>
  b4:	00 97       	sbiw	r24, 0x00	; 0
  b6:	19 f0       	breq	.+6      	; 0xbe <DIO_u8SetPinValue+0x52>
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	b9 f0       	breq	.+46     	; 0xea <DIO_u8SetPinValue+0x7e>
  bc:	58 c0       	rjmp	.+176    	; 0x16e <DIO_u8SetPinValue+0x102>
		{
			case DIO_u8PORTA:SET_BIT(PORTA,Copy_u8Pin);break;
  be:	8b e3       	ldi	r24, 0x3B	; 59
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	fc 01       	movw	r30, r24
  c4:	80 81       	ld	r24, Z
  c6:	48 2f       	mov	r20, r24
  c8:	8b 81       	ldd	r24, Y+3	; 0x03
  ca:	28 2f       	mov	r18, r24
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <DIO_u8SetPinValue+0x6c>
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	2a 95       	dec	r18
  da:	e2 f7       	brpl	.-8      	; 0xd4 <DIO_u8SetPinValue+0x68>
  dc:	24 2f       	mov	r18, r20
  de:	28 2b       	or	r18, r24
  e0:	8b e3       	ldi	r24, 0x3B	; 59
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	fc 01       	movw	r30, r24
  e6:	20 83       	st	Z, r18
  e8:	c4 c0       	rjmp	.+392    	; 0x272 <DIO_u8SetPinValue+0x206>
			case DIO_u8PORTB:SET_BIT(PORTB,Copy_u8Pin);break;
  ea:	88 e3       	ldi	r24, 0x38	; 56
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	fc 01       	movw	r30, r24
  f0:	80 81       	ld	r24, Z
  f2:	48 2f       	mov	r20, r24
  f4:	8b 81       	ldd	r24, Y+3	; 0x03
  f6:	28 2f       	mov	r18, r24
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_u8SetPinValue+0x98>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	2a 95       	dec	r18
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_u8SetPinValue+0x94>
 108:	24 2f       	mov	r18, r20
 10a:	28 2b       	or	r18, r24
 10c:	88 e3       	ldi	r24, 0x38	; 56
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	fc 01       	movw	r30, r24
 112:	20 83       	st	Z, r18
 114:	ae c0       	rjmp	.+348    	; 0x272 <DIO_u8SetPinValue+0x206>
			case DIO_u8PORTC:SET_BIT(PORTC,Copy_u8Pin);break;
 116:	85 e3       	ldi	r24, 0x35	; 53
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	fc 01       	movw	r30, r24
 11c:	80 81       	ld	r24, Z
 11e:	48 2f       	mov	r20, r24
 120:	8b 81       	ldd	r24, Y+3	; 0x03
 122:	28 2f       	mov	r18, r24
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_u8SetPinValue+0xc4>
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	2a 95       	dec	r18
 132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_u8SetPinValue+0xc0>
 134:	24 2f       	mov	r18, r20
 136:	28 2b       	or	r18, r24
 138:	85 e3       	ldi	r24, 0x35	; 53
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	fc 01       	movw	r30, r24
 13e:	20 83       	st	Z, r18
 140:	98 c0       	rjmp	.+304    	; 0x272 <DIO_u8SetPinValue+0x206>
			case DIO_u8PORTD:SET_BIT(PORTD,Copy_u8Pin);break;
 142:	82 e3       	ldi	r24, 0x32	; 50
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	fc 01       	movw	r30, r24
 148:	80 81       	ld	r24, Z
 14a:	48 2f       	mov	r20, r24
 14c:	8b 81       	ldd	r24, Y+3	; 0x03
 14e:	28 2f       	mov	r18, r24
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_u8SetPinValue+0xf0>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	2a 95       	dec	r18
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_u8SetPinValue+0xec>
 160:	24 2f       	mov	r18, r20
 162:	28 2b       	or	r18, r24
 164:	82 e3       	ldi	r24, 0x32	; 50
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	fc 01       	movw	r30, r24
 16a:	20 83       	st	Z, r18
 16c:	82 c0       	rjmp	.+260    	; 0x272 <DIO_u8SetPinValue+0x206>
			default :Local_u8ErrorState=1;break;
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	89 83       	std	Y+1, r24	; 0x01
 172:	7f c0       	rjmp	.+254    	; 0x272 <DIO_u8SetPinValue+0x206>
		}



		}
		else if(Copy_u8Value==DIO_u8PIN_LOW)
 174:	8c 81       	ldd	r24, Y+4	; 0x04
 176:	88 23       	and	r24, r24
 178:	09 f0       	breq	.+2      	; 0x17c <DIO_u8SetPinValue+0x110>
 17a:	76 c0       	rjmp	.+236    	; 0x268 <DIO_u8SetPinValue+0x1fc>
		{
			switch(Copy_u8Port)
 17c:	8a 81       	ldd	r24, Y+2	; 0x02
 17e:	88 2f       	mov	r24, r24
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	84 30       	cpi	r24, 0x04	; 4
 184:	91 05       	cpc	r25, r1
 186:	09 f4       	brne	.+2      	; 0x18a <DIO_u8SetPinValue+0x11e>
 188:	55 c0       	rjmp	.+170    	; 0x234 <DIO_u8SetPinValue+0x1c8>
 18a:	85 30       	cpi	r24, 0x05	; 5
 18c:	91 05       	cpc	r25, r1
 18e:	0c f0       	brlt	.+2      	; 0x192 <DIO_u8SetPinValue+0x126>
 190:	68 c0       	rjmp	.+208    	; 0x262 <DIO_u8SetPinValue+0x1f6>
 192:	83 30       	cpi	r24, 0x03	; 3
 194:	91 05       	cpc	r25, r1
 196:	b9 f1       	breq	.+110    	; 0x206 <DIO_u8SetPinValue+0x19a>
 198:	84 30       	cpi	r24, 0x04	; 4
 19a:	91 05       	cpc	r25, r1
 19c:	0c f0       	brlt	.+2      	; 0x1a0 <DIO_u8SetPinValue+0x134>
 19e:	61 c0       	rjmp	.+194    	; 0x262 <DIO_u8SetPinValue+0x1f6>
 1a0:	00 97       	sbiw	r24, 0x00	; 0
 1a2:	19 f0       	breq	.+6      	; 0x1aa <DIO_u8SetPinValue+0x13e>
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	c1 f0       	breq	.+48     	; 0x1d8 <DIO_u8SetPinValue+0x16c>
 1a8:	5c c0       	rjmp	.+184    	; 0x262 <DIO_u8SetPinValue+0x1f6>
		{
			case DIO_u8PORTA:CLR_BIT(PORTA,Copy_u8Pin);break;
 1aa:	8b e3       	ldi	r24, 0x3B	; 59
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	fc 01       	movw	r30, r24
 1b0:	80 81       	ld	r24, Z
 1b2:	48 2f       	mov	r20, r24
 1b4:	8b 81       	ldd	r24, Y+3	; 0x03
 1b6:	28 2f       	mov	r18, r24
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <DIO_u8SetPinValue+0x158>
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	2a 95       	dec	r18
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <DIO_u8SetPinValue+0x154>
 1c8:	80 95       	com	r24
 1ca:	24 2f       	mov	r18, r20
 1cc:	28 23       	and	r18, r24
 1ce:	8b e3       	ldi	r24, 0x3B	; 59
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	fc 01       	movw	r30, r24
 1d4:	20 83       	st	Z, r18
 1d6:	4d c0       	rjmp	.+154    	; 0x272 <DIO_u8SetPinValue+0x206>
			case DIO_u8PORTB:CLR_BIT(PORTB,Copy_u8Pin);break;
 1d8:	88 e3       	ldi	r24, 0x38	; 56
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	fc 01       	movw	r30, r24
 1de:	80 81       	ld	r24, Z
 1e0:	48 2f       	mov	r20, r24
 1e2:	8b 81       	ldd	r24, Y+3	; 0x03
 1e4:	28 2f       	mov	r18, r24
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_u8SetPinValue+0x186>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	2a 95       	dec	r18
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_u8SetPinValue+0x182>
 1f6:	80 95       	com	r24
 1f8:	24 2f       	mov	r18, r20
 1fa:	28 23       	and	r18, r24
 1fc:	88 e3       	ldi	r24, 0x38	; 56
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	fc 01       	movw	r30, r24
 202:	20 83       	st	Z, r18
 204:	36 c0       	rjmp	.+108    	; 0x272 <DIO_u8SetPinValue+0x206>
			case DIO_u8PORTC:CLR_BIT(PORTC,Copy_u8Pin);break;
 206:	85 e3       	ldi	r24, 0x35	; 53
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	fc 01       	movw	r30, r24
 20c:	80 81       	ld	r24, Z
 20e:	48 2f       	mov	r20, r24
 210:	8b 81       	ldd	r24, Y+3	; 0x03
 212:	28 2f       	mov	r18, r24
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_u8SetPinValue+0x1b4>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	2a 95       	dec	r18
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_u8SetPinValue+0x1b0>
 224:	80 95       	com	r24
 226:	24 2f       	mov	r18, r20
 228:	28 23       	and	r18, r24
 22a:	85 e3       	ldi	r24, 0x35	; 53
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	fc 01       	movw	r30, r24
 230:	20 83       	st	Z, r18
 232:	1f c0       	rjmp	.+62     	; 0x272 <DIO_u8SetPinValue+0x206>
			case DIO_u8PORTD:CLR_BIT(PORTD,Copy_u8Pin);break;
 234:	82 e3       	ldi	r24, 0x32	; 50
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	fc 01       	movw	r30, r24
 23a:	80 81       	ld	r24, Z
 23c:	48 2f       	mov	r20, r24
 23e:	8b 81       	ldd	r24, Y+3	; 0x03
 240:	28 2f       	mov	r18, r24
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	02 c0       	rjmp	.+4      	; 0x24e <DIO_u8SetPinValue+0x1e2>
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	2a 95       	dec	r18
 250:	e2 f7       	brpl	.-8      	; 0x24a <DIO_u8SetPinValue+0x1de>
 252:	80 95       	com	r24
 254:	24 2f       	mov	r18, r20
 256:	28 23       	and	r18, r24
 258:	82 e3       	ldi	r24, 0x32	; 50
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	fc 01       	movw	r30, r24
 25e:	20 83       	st	Z, r18
 260:	08 c0       	rjmp	.+16     	; 0x272 <DIO_u8SetPinValue+0x206>
			default :Local_u8ErrorState=1;break;
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	89 83       	std	Y+1, r24	; 0x01
 266:	05 c0       	rjmp	.+10     	; 0x272 <DIO_u8SetPinValue+0x206>


		}
		else
		{
		Local_u8ErrorState=1;
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	89 83       	std	Y+1, r24	; 0x01
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_u8SetPinValue+0x206>
		}
		
}
else
{
	 Local_u8ErrorState=1;
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	89 83       	std	Y+1, r24	; 0x01
}

return Local_u8ErrorState;
 272:	89 81       	ldd	r24, Y+1	; 0x01
}
 274:	0f 90       	pop	r0
 276:	0f 90       	pop	r0
 278:	0f 90       	pop	r0
 27a:	0f 90       	pop	r0
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	08 95       	ret

00000282 <DIO_u8SetPortValue>:


u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
 286:	00 d0       	rcall	.+0      	; 0x288 <DIO_u8SetPortValue+0x6>
 288:	0f 92       	push	r0
 28a:	cd b7       	in	r28, 0x3d	; 61
 28c:	de b7       	in	r29, 0x3e	; 62
 28e:	8a 83       	std	Y+2, r24	; 0x02
 290:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
 292:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
 294:	8a 81       	ldd	r24, Y+2	; 0x02
 296:	88 2f       	mov	r24, r24
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	84 30       	cpi	r24, 0x04	; 4
 29c:	91 05       	cpc	r25, r1
 29e:	01 f1       	breq	.+64     	; 0x2e0 <DIO_u8SetPortValue+0x5e>
 2a0:	85 30       	cpi	r24, 0x05	; 5
 2a2:	91 05       	cpc	r25, r1
 2a4:	1c f5       	brge	.+70     	; 0x2ec <DIO_u8SetPortValue+0x6a>
 2a6:	83 30       	cpi	r24, 0x03	; 3
 2a8:	91 05       	cpc	r25, r1
 2aa:	a1 f0       	breq	.+40     	; 0x2d4 <DIO_u8SetPortValue+0x52>
 2ac:	84 30       	cpi	r24, 0x04	; 4
 2ae:	91 05       	cpc	r25, r1
 2b0:	ec f4       	brge	.+58     	; 0x2ec <DIO_u8SetPortValue+0x6a>
 2b2:	00 97       	sbiw	r24, 0x00	; 0
 2b4:	19 f0       	breq	.+6      	; 0x2bc <DIO_u8SetPortValue+0x3a>
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	39 f0       	breq	.+14     	; 0x2c8 <DIO_u8SetPortValue+0x46>
 2ba:	18 c0       	rjmp	.+48     	; 0x2ec <DIO_u8SetPortValue+0x6a>
				{
					case DIO_u8PORTA: PORTA=Copy_u8Value; break;
 2bc:	8b e3       	ldi	r24, 0x3B	; 59
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	2b 81       	ldd	r18, Y+3	; 0x03
 2c2:	fc 01       	movw	r30, r24
 2c4:	20 83       	st	Z, r18
 2c6:	15 c0       	rjmp	.+42     	; 0x2f2 <DIO_u8SetPortValue+0x70>
				    case DIO_u8PORTB: PORTB=Copy_u8Value; break;
 2c8:	88 e3       	ldi	r24, 0x38	; 56
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	2b 81       	ldd	r18, Y+3	; 0x03
 2ce:	fc 01       	movw	r30, r24
 2d0:	20 83       	st	Z, r18
 2d2:	0f c0       	rjmp	.+30     	; 0x2f2 <DIO_u8SetPortValue+0x70>
				    case DIO_u8PORTC: PORTC=Copy_u8Value; break;
 2d4:	85 e3       	ldi	r24, 0x35	; 53
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	2b 81       	ldd	r18, Y+3	; 0x03
 2da:	fc 01       	movw	r30, r24
 2dc:	20 83       	st	Z, r18
 2de:	09 c0       	rjmp	.+18     	; 0x2f2 <DIO_u8SetPortValue+0x70>
				    case DIO_u8PORTD: PORTD=Copy_u8Value; break;
 2e0:	82 e3       	ldi	r24, 0x32	; 50
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	2b 81       	ldd	r18, Y+3	; 0x03
 2e6:	fc 01       	movw	r30, r24
 2e8:	20 83       	st	Z, r18
 2ea:	03 c0       	rjmp	.+6      	; 0x2f2 <DIO_u8SetPortValue+0x70>
				    default :Local_u8ErrorState=1; break;
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	89 83       	std	Y+1, r24	; 0x01
 2f0:	00 00       	nop
				}


	return Local_u8ErrorState;
 2f2:	89 81       	ldd	r24, Y+1	; 0x01

}
 2f4:	0f 90       	pop	r0
 2f6:	0f 90       	pop	r0
 2f8:	0f 90       	pop	r0
 2fa:	df 91       	pop	r29
 2fc:	cf 91       	pop	r28
 2fe:	08 95       	ret

00000300 <DIO_u8GetPinValue>:



u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8* Copy_pu8Value)
{
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	00 d0       	rcall	.+0      	; 0x306 <DIO_u8GetPinValue+0x6>
 306:	00 d0       	rcall	.+0      	; 0x308 <DIO_u8GetPinValue+0x8>
 308:	0f 92       	push	r0
 30a:	cd b7       	in	r28, 0x3d	; 61
 30c:	de b7       	in	r29, 0x3e	; 62
 30e:	8a 83       	std	Y+2, r24	; 0x02
 310:	6b 83       	std	Y+3, r22	; 0x03
 312:	5d 83       	std	Y+5, r21	; 0x05
 314:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState=0;
 316:	19 82       	std	Y+1, r1	; 0x01
	if( (Copy_pu8Value!=NULL) && (Copy_u8Pin<=DIO_u8PIN7) )
 318:	8c 81       	ldd	r24, Y+4	; 0x04
 31a:	9d 81       	ldd	r25, Y+5	; 0x05
 31c:	89 2b       	or	r24, r25
 31e:	09 f4       	brne	.+2      	; 0x322 <DIO_u8GetPinValue+0x22>
 320:	73 c0       	rjmp	.+230    	; 0x408 <__FUSE_REGION_LENGTH__+0x8>
 322:	8b 81       	ldd	r24, Y+3	; 0x03
 324:	88 30       	cpi	r24, 0x08	; 8
 326:	08 f0       	brcs	.+2      	; 0x32a <DIO_u8GetPinValue+0x2a>
 328:	6f c0       	rjmp	.+222    	; 0x408 <__FUSE_REGION_LENGTH__+0x8>
		{
			switch(Copy_u8Port)
 32a:	8a 81       	ldd	r24, Y+2	; 0x02
 32c:	88 2f       	mov	r24, r24
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	84 30       	cpi	r24, 0x04	; 4
 332:	91 05       	cpc	r25, r1
 334:	09 f4       	brne	.+2      	; 0x338 <DIO_u8GetPinValue+0x38>
 336:	4f c0       	rjmp	.+158    	; 0x3d6 <DIO_u8GetPinValue+0xd6>
 338:	85 30       	cpi	r24, 0x05	; 5
 33a:	91 05       	cpc	r25, r1
 33c:	0c f0       	brlt	.+2      	; 0x340 <DIO_u8GetPinValue+0x40>
 33e:	60 c0       	rjmp	.+192    	; 0x400 <__FUSE_REGION_LENGTH__>
 340:	83 30       	cpi	r24, 0x03	; 3
 342:	91 05       	cpc	r25, r1
 344:	99 f1       	breq	.+102    	; 0x3ac <DIO_u8GetPinValue+0xac>
 346:	84 30       	cpi	r24, 0x04	; 4
 348:	91 05       	cpc	r25, r1
 34a:	0c f0       	brlt	.+2      	; 0x34e <DIO_u8GetPinValue+0x4e>
 34c:	59 c0       	rjmp	.+178    	; 0x400 <__FUSE_REGION_LENGTH__>
 34e:	00 97       	sbiw	r24, 0x00	; 0
 350:	19 f0       	breq	.+6      	; 0x358 <DIO_u8GetPinValue+0x58>
 352:	01 97       	sbiw	r24, 0x01	; 1
 354:	b1 f0       	breq	.+44     	; 0x382 <DIO_u8GetPinValue+0x82>
 356:	54 c0       	rjmp	.+168    	; 0x400 <__FUSE_REGION_LENGTH__>
			{
				case DIO_u8PORTA: *Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin); break;
 358:	89 e3       	ldi	r24, 0x39	; 57
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	fc 01       	movw	r30, r24
 35e:	80 81       	ld	r24, Z
 360:	88 2f       	mov	r24, r24
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	2b 81       	ldd	r18, Y+3	; 0x03
 366:	22 2f       	mov	r18, r18
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	02 c0       	rjmp	.+4      	; 0x370 <DIO_u8GetPinValue+0x70>
 36c:	95 95       	asr	r25
 36e:	87 95       	ror	r24
 370:	2a 95       	dec	r18
 372:	e2 f7       	brpl	.-8      	; 0x36c <DIO_u8GetPinValue+0x6c>
 374:	28 2f       	mov	r18, r24
 376:	21 70       	andi	r18, 0x01	; 1
 378:	8c 81       	ldd	r24, Y+4	; 0x04
 37a:	9d 81       	ldd	r25, Y+5	; 0x05
 37c:	fc 01       	movw	r30, r24
 37e:	20 83       	st	Z, r18
 380:	42 c0       	rjmp	.+132    	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
			    case DIO_u8PORTB: *Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin); break;
 382:	86 e3       	ldi	r24, 0x36	; 54
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	fc 01       	movw	r30, r24
 388:	80 81       	ld	r24, Z
 38a:	88 2f       	mov	r24, r24
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	2b 81       	ldd	r18, Y+3	; 0x03
 390:	22 2f       	mov	r18, r18
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	02 c0       	rjmp	.+4      	; 0x39a <DIO_u8GetPinValue+0x9a>
 396:	95 95       	asr	r25
 398:	87 95       	ror	r24
 39a:	2a 95       	dec	r18
 39c:	e2 f7       	brpl	.-8      	; 0x396 <DIO_u8GetPinValue+0x96>
 39e:	28 2f       	mov	r18, r24
 3a0:	21 70       	andi	r18, 0x01	; 1
 3a2:	8c 81       	ldd	r24, Y+4	; 0x04
 3a4:	9d 81       	ldd	r25, Y+5	; 0x05
 3a6:	fc 01       	movw	r30, r24
 3a8:	20 83       	st	Z, r18
 3aa:	2d c0       	rjmp	.+90     	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
			    case DIO_u8PORTC: *Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin); break;
 3ac:	83 e3       	ldi	r24, 0x33	; 51
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	fc 01       	movw	r30, r24
 3b2:	80 81       	ld	r24, Z
 3b4:	88 2f       	mov	r24, r24
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	2b 81       	ldd	r18, Y+3	; 0x03
 3ba:	22 2f       	mov	r18, r18
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <DIO_u8GetPinValue+0xc4>
 3c0:	95 95       	asr	r25
 3c2:	87 95       	ror	r24
 3c4:	2a 95       	dec	r18
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <DIO_u8GetPinValue+0xc0>
 3c8:	28 2f       	mov	r18, r24
 3ca:	21 70       	andi	r18, 0x01	; 1
 3cc:	8c 81       	ldd	r24, Y+4	; 0x04
 3ce:	9d 81       	ldd	r25, Y+5	; 0x05
 3d0:	fc 01       	movw	r30, r24
 3d2:	20 83       	st	Z, r18
 3d4:	18 c0       	rjmp	.+48     	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
			    case DIO_u8PORTD: *Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin); break;
 3d6:	80 e3       	ldi	r24, 0x30	; 48
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	fc 01       	movw	r30, r24
 3dc:	80 81       	ld	r24, Z
 3de:	88 2f       	mov	r24, r24
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	2b 81       	ldd	r18, Y+3	; 0x03
 3e4:	22 2f       	mov	r18, r18
 3e6:	30 e0       	ldi	r19, 0x00	; 0
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <DIO_u8GetPinValue+0xee>
 3ea:	95 95       	asr	r25
 3ec:	87 95       	ror	r24
 3ee:	2a 95       	dec	r18
 3f0:	e2 f7       	brpl	.-8      	; 0x3ea <DIO_u8GetPinValue+0xea>
 3f2:	28 2f       	mov	r18, r24
 3f4:	21 70       	andi	r18, 0x01	; 1
 3f6:	8c 81       	ldd	r24, Y+4	; 0x04
 3f8:	9d 81       	ldd	r25, Y+5	; 0x05
 3fa:	fc 01       	movw	r30, r24
 3fc:	20 83       	st	Z, r18
 3fe:	03 c0       	rjmp	.+6      	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
			    default : Local_u8ErrorState=1; break;
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	89 83       	std	Y+1, r24	; 0x01
 404:	00 00       	nop
{

	u8 Local_u8ErrorState=0;
	if( (Copy_pu8Value!=NULL) && (Copy_u8Pin<=DIO_u8PIN7) )
		{
			switch(Copy_u8Port)
 406:	02 c0       	rjmp	.+4      	; 0x40c <__FUSE_REGION_LENGTH__+0xc>
			}

		}
		else
		{
		Local_u8ErrorState=1;
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	89 83       	std	Y+1, r24	; 0x01

		}

	return Local_u8ErrorState;
 40c:	89 81       	ldd	r24, Y+1	; 0x01
}
 40e:	0f 90       	pop	r0
 410:	0f 90       	pop	r0
 412:	0f 90       	pop	r0
 414:	0f 90       	pop	r0
 416:	0f 90       	pop	r0
 418:	df 91       	pop	r29
 41a:	cf 91       	pop	r28
 41c:	08 95       	ret

0000041e <PORT_voidInit>:
#include"PORT_interface.h"
#include"PORT_register.h"


void PORT_voidInit()
{
 41e:	cf 93       	push	r28
 420:	df 93       	push	r29
 422:	cd b7       	in	r28, 0x3d	; 61
 424:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
 426:	8a e3       	ldi	r24, 0x3A	; 58
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	fc 01       	movw	r30, r24
 42c:	10 82       	st	Z, r1
	DDRB=PORTB_DIR;
 42e:	87 e3       	ldi	r24, 0x37	; 55
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	20 e5       	ldi	r18, 0x50	; 80
 434:	fc 01       	movw	r30, r24
 436:	20 83       	st	Z, r18
	DDRC=PORTC_DIR;
 438:	84 e3       	ldi	r24, 0x34	; 52
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	27 e0       	ldi	r18, 0x07	; 7
 43e:	fc 01       	movw	r30, r24
 440:	20 83       	st	Z, r18
	DDRD=PORTD_DIR;
 442:	81 e3       	ldi	r24, 0x31	; 49
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	fc 01       	movw	r30, r24
 448:	10 82       	st	Z, r1

	PORTA=PORTA_InitVal;
 44a:	8b e3       	ldi	r24, 0x3B	; 59
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	fc 01       	movw	r30, r24
 450:	10 82       	st	Z, r1
	PORTB=PORTB_InitVal;
 452:	88 e3       	ldi	r24, 0x38	; 56
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	fc 01       	movw	r30, r24
 458:	10 82       	st	Z, r1
	PORTC=PORTC_InitVal;
 45a:	85 e3       	ldi	r24, 0x35	; 53
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	fc 01       	movw	r30, r24
 460:	10 82       	st	Z, r1
	PORTD=PORTD_InitVal;
 462:	82 e3       	ldi	r24, 0x32	; 50
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	fc 01       	movw	r30, r24
 468:	10 82       	st	Z, r1
}
 46a:	00 00       	nop
 46c:	df 91       	pop	r29
 46e:	cf 91       	pop	r28
 470:	08 95       	ret

00000472 <SPI_voidInitMaster>:
#include "SPI_config.h"
#include "SPI_private.h"


void SPI_voidInitMaster(void)
{
 472:	cf 93       	push	r28
 474:	df 93       	push	r29
 476:	cd b7       	in	r28, 0x3d	; 61
 478:	de b7       	in	r29, 0x3e	; 62
	/* master initialization*/
	SET_BIT(SPCR,SPCR_MSTR);
 47a:	8d e2       	ldi	r24, 0x2D	; 45
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	fc 01       	movw	r30, r24
 480:	20 81       	ld	r18, Z
 482:	8d e2       	ldi	r24, 0x2D	; 45
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	20 61       	ori	r18, 0x10	; 16
 488:	fc 01       	movw	r30, r24
 48a:	20 83       	st	Z, r18

	/*SPI Enable*/
	SET_BIT(SPCR,SPCR_SPE);
 48c:	8d e2       	ldi	r24, 0x2D	; 45
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	fc 01       	movw	r30, r24
 492:	20 81       	ld	r18, Z
 494:	8d e2       	ldi	r24, 0x2D	; 45
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	20 64       	ori	r18, 0x40	; 64
 49a:	fc 01       	movw	r30, r24
 49c:	20 83       	st	Z, r18

	/*Clock prescaler: divide by 16*/
	SET_BIT(SPCR,SPCR_SPR0);
 49e:	8d e2       	ldi	r24, 0x2D	; 45
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	fc 01       	movw	r30, r24
 4a4:	20 81       	ld	r18, Z
 4a6:	8d e2       	ldi	r24, 0x2D	; 45
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	21 60       	ori	r18, 0x01	; 1
 4ac:	fc 01       	movw	r30, r24
 4ae:	20 83       	st	Z, r18
	CLR_BIT(SPCR,SPCR_SPR1);
 4b0:	8d e2       	ldi	r24, 0x2D	; 45
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	fc 01       	movw	r30, r24
 4b6:	20 81       	ld	r18, Z
 4b8:	8d e2       	ldi	r24, 0x2D	; 45
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	2d 7f       	andi	r18, 0xFD	; 253
 4be:	fc 01       	movw	r30, r24
 4c0:	20 83       	st	Z, r18
	SET_BIT(SPSR,SPSR_SPI2X);
 4c2:	8e e2       	ldi	r24, 0x2E	; 46
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	fc 01       	movw	r30, r24
 4c8:	20 81       	ld	r18, Z
 4ca:	8e e2       	ldi	r24, 0x2E	; 46
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	21 60       	ori	r18, 0x01	; 1
 4d0:	fc 01       	movw	r30, r24
 4d2:	20 83       	st	Z, r18

}
 4d4:	00 00       	nop
 4d6:	df 91       	pop	r29
 4d8:	cf 91       	pop	r28
 4da:	08 95       	ret

000004dc <SPI_voidInitSlave>:

void SPI_voidInitSlave(void)
{
 4dc:	cf 93       	push	r28
 4de:	df 93       	push	r29
 4e0:	cd b7       	in	r28, 0x3d	; 61
 4e2:	de b7       	in	r29, 0x3e	; 62
	/*master initialization*/
	CLR_BIT(SPCR,SPCR_MSTR);
 4e4:	8d e2       	ldi	r24, 0x2D	; 45
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	fc 01       	movw	r30, r24
 4ea:	20 81       	ld	r18, Z
 4ec:	8d e2       	ldi	r24, 0x2D	; 45
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	2f 7e       	andi	r18, 0xEF	; 239
 4f2:	fc 01       	movw	r30, r24
 4f4:	20 83       	st	Z, r18

	/*SPI Enable*/
	SET_BIT(SPCR,SPCR_SPE);
 4f6:	8d e2       	ldi	r24, 0x2D	; 45
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	fc 01       	movw	r30, r24
 4fc:	20 81       	ld	r18, Z
 4fe:	8d e2       	ldi	r24, 0x2D	; 45
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	20 64       	ori	r18, 0x40	; 64
 504:	fc 01       	movw	r30, r24
 506:	20 83       	st	Z, r18

}
 508:	00 00       	nop
 50a:	df 91       	pop	r29
 50c:	cf 91       	pop	r28
 50e:	08 95       	ret

00000510 <SPI_u8TranSceive>:

u8 SPI_u8TranSceive(u8 Copy_u8Data)
{
 510:	cf 93       	push	r28
 512:	df 93       	push	r29
 514:	0f 92       	push	r0
 516:	cd b7       	in	r28, 0x3d	; 61
 518:	de b7       	in	r29, 0x3e	; 62
 51a:	89 83       	std	Y+1, r24	; 0x01
	/*Send the data*/
	SPDR = Copy_u8Data;
 51c:	8f e2       	ldi	r24, 0x2F	; 47
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	29 81       	ldd	r18, Y+1	; 0x01
 522:	fc 01       	movw	r30, r24
 524:	20 83       	st	Z, r18

	/*Wait (Busy Waiting ) until transfer is complete*/
	while(GET_BIT(SPSR,SPSR_SPIF) == 0);
 526:	00 00       	nop
 528:	8e e2       	ldi	r24, 0x2E	; 46
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	fc 01       	movw	r30, r24
 52e:	80 81       	ld	r24, Z
 530:	88 1f       	adc	r24, r24
 532:	88 27       	eor	r24, r24
 534:	88 1f       	adc	r24, r24
 536:	88 2f       	mov	r24, r24
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	81 70       	andi	r24, 0x01	; 1
 53c:	99 27       	eor	r25, r25
 53e:	89 2b       	or	r24, r25
 540:	99 f3       	breq	.-26     	; 0x528 <SPI_u8TranSceive+0x18>

	/*Get the exchanged data*/
	return SPDR;
 542:	8f e2       	ldi	r24, 0x2F	; 47
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	fc 01       	movw	r30, r24
 548:	80 81       	ld	r24, Z
}
 54a:	0f 90       	pop	r0
 54c:	df 91       	pop	r29
 54e:	cf 91       	pop	r28
 550:	08 95       	ret

00000552 <main>:
#include "SPI_interface.h"

#include "util/delay.h"

void main()
{
 552:	cf 93       	push	r28
 554:	df 93       	push	r29
 556:	cd b7       	in	r28, 0x3d	; 61
 558:	de b7       	in	r29, 0x3e	; 62
	PORT_voidInit();
 55a:	0e 94 0f 02 	call	0x41e	; 0x41e <PORT_voidInit>

	while(1)
 55e:	ff cf       	rjmp	.-2      	; 0x55e <main+0xc>

00000560 <_exit>:
 560:	f8 94       	cli

00000562 <__stop_program>:
 562:	ff cf       	rjmp	.-2      	; 0x562 <__stop_program>
