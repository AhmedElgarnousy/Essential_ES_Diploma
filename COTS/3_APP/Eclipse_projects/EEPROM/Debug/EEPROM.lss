
EEPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cb2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000cb2  00000d26  2**0
                  ALLOC, LOAD, DATA
  2 .stab         00001dc4  00000000  00000000  00000d28  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000010ef  00000000  00000000  00002aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00003bdb  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003bec  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000020  00000000  00000000  00003c28  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000050c  00000000  00000000  00003c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004b7  00000000  00000000  00004154  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000007e  00000000  00000000  0000460b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001f4  00000000  00000000  00004689  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 8d 04 	call	0x91a	; 0x91a <main>
  64:	0c 94 57 06 	jmp	0xcae	; 0xcae <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_u8SetPinValue>:
#include"DIO_private.h"



u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	00 d0       	rcall	.+0      	; 0x72 <DIO_u8SetPinValue+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <DIO_u8SetPinValue+0x8>
  74:	cd b7       	in	r28, 0x3d	; 61
  76:	de b7       	in	r29, 0x3e	; 62
  78:	8a 83       	std	Y+2, r24	; 0x02
  7a:	6b 83       	std	Y+3, r22	; 0x03
  7c:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState=0;
  7e:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin<=DIO_u8PIN7)
  80:	8b 81       	ldd	r24, Y+3	; 0x03
  82:	88 30       	cpi	r24, 0x08	; 8
  84:	08 f0       	brcs	.+2      	; 0x88 <DIO_u8SetPinValue+0x1c>
  86:	f3 c0       	rjmp	.+486    	; 0x26e <DIO_u8SetPinValue+0x202>
	{
		if(Copy_u8Value==DIO_u8PIN_HIGH)
  88:	8c 81       	ldd	r24, Y+4	; 0x04
  8a:	81 30       	cpi	r24, 0x01	; 1
  8c:	09 f0       	breq	.+2      	; 0x90 <DIO_u8SetPinValue+0x24>
  8e:	72 c0       	rjmp	.+228    	; 0x174 <DIO_u8SetPinValue+0x108>
		{
			switch(Copy_u8Port)
  90:	8a 81       	ldd	r24, Y+2	; 0x02
  92:	88 2f       	mov	r24, r24
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	84 30       	cpi	r24, 0x04	; 4
  98:	91 05       	cpc	r25, r1
  9a:	09 f4       	brne	.+2      	; 0x9e <DIO_u8SetPinValue+0x32>
  9c:	52 c0       	rjmp	.+164    	; 0x142 <DIO_u8SetPinValue+0xd6>
  9e:	85 30       	cpi	r24, 0x05	; 5
  a0:	91 05       	cpc	r25, r1
  a2:	0c f0       	brlt	.+2      	; 0xa6 <DIO_u8SetPinValue+0x3a>
  a4:	64 c0       	rjmp	.+200    	; 0x16e <DIO_u8SetPinValue+0x102>
  a6:	83 30       	cpi	r24, 0x03	; 3
  a8:	91 05       	cpc	r25, r1
  aa:	a9 f1       	breq	.+106    	; 0x116 <DIO_u8SetPinValue+0xaa>
  ac:	84 30       	cpi	r24, 0x04	; 4
  ae:	91 05       	cpc	r25, r1
  b0:	0c f0       	brlt	.+2      	; 0xb4 <DIO_u8SetPinValue+0x48>
  b2:	5d c0       	rjmp	.+186    	; 0x16e <DIO_u8SetPinValue+0x102>
  b4:	00 97       	sbiw	r24, 0x00	; 0
  b6:	19 f0       	breq	.+6      	; 0xbe <DIO_u8SetPinValue+0x52>
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	b9 f0       	breq	.+46     	; 0xea <DIO_u8SetPinValue+0x7e>
  bc:	58 c0       	rjmp	.+176    	; 0x16e <DIO_u8SetPinValue+0x102>
			{
			case DIO_u8PORTA:SET_BIT(PORTA,Copy_u8Pin);break;
  be:	8b e3       	ldi	r24, 0x3B	; 59
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	fc 01       	movw	r30, r24
  c4:	80 81       	ld	r24, Z
  c6:	48 2f       	mov	r20, r24
  c8:	8b 81       	ldd	r24, Y+3	; 0x03
  ca:	28 2f       	mov	r18, r24
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <DIO_u8SetPinValue+0x6c>
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	2a 95       	dec	r18
  da:	e2 f7       	brpl	.-8      	; 0xd4 <DIO_u8SetPinValue+0x68>
  dc:	24 2f       	mov	r18, r20
  de:	28 2b       	or	r18, r24
  e0:	8b e3       	ldi	r24, 0x3B	; 59
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	fc 01       	movw	r30, r24
  e6:	20 83       	st	Z, r18
  e8:	c4 c0       	rjmp	.+392    	; 0x272 <DIO_u8SetPinValue+0x206>
			case DIO_u8PORTB:SET_BIT(PORTB,Copy_u8Pin);break;
  ea:	88 e3       	ldi	r24, 0x38	; 56
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	fc 01       	movw	r30, r24
  f0:	80 81       	ld	r24, Z
  f2:	48 2f       	mov	r20, r24
  f4:	8b 81       	ldd	r24, Y+3	; 0x03
  f6:	28 2f       	mov	r18, r24
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_u8SetPinValue+0x98>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	2a 95       	dec	r18
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_u8SetPinValue+0x94>
 108:	24 2f       	mov	r18, r20
 10a:	28 2b       	or	r18, r24
 10c:	88 e3       	ldi	r24, 0x38	; 56
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	fc 01       	movw	r30, r24
 112:	20 83       	st	Z, r18
 114:	ae c0       	rjmp	.+348    	; 0x272 <DIO_u8SetPinValue+0x206>
			case DIO_u8PORTC:SET_BIT(PORTC,Copy_u8Pin);break;
 116:	85 e3       	ldi	r24, 0x35	; 53
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	fc 01       	movw	r30, r24
 11c:	80 81       	ld	r24, Z
 11e:	48 2f       	mov	r20, r24
 120:	8b 81       	ldd	r24, Y+3	; 0x03
 122:	28 2f       	mov	r18, r24
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_u8SetPinValue+0xc4>
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	2a 95       	dec	r18
 132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_u8SetPinValue+0xc0>
 134:	24 2f       	mov	r18, r20
 136:	28 2b       	or	r18, r24
 138:	85 e3       	ldi	r24, 0x35	; 53
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	fc 01       	movw	r30, r24
 13e:	20 83       	st	Z, r18
 140:	98 c0       	rjmp	.+304    	; 0x272 <DIO_u8SetPinValue+0x206>
			case DIO_u8PORTD:SET_BIT(PORTD,Copy_u8Pin);break;
 142:	82 e3       	ldi	r24, 0x32	; 50
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	fc 01       	movw	r30, r24
 148:	80 81       	ld	r24, Z
 14a:	48 2f       	mov	r20, r24
 14c:	8b 81       	ldd	r24, Y+3	; 0x03
 14e:	28 2f       	mov	r18, r24
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_u8SetPinValue+0xf0>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	2a 95       	dec	r18
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_u8SetPinValue+0xec>
 160:	24 2f       	mov	r18, r20
 162:	28 2b       	or	r18, r24
 164:	82 e3       	ldi	r24, 0x32	; 50
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	fc 01       	movw	r30, r24
 16a:	20 83       	st	Z, r18
 16c:	82 c0       	rjmp	.+260    	; 0x272 <DIO_u8SetPinValue+0x206>
			default :Local_u8ErrorState=1;break;
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	89 83       	std	Y+1, r24	; 0x01
 172:	7f c0       	rjmp	.+254    	; 0x272 <DIO_u8SetPinValue+0x206>
			}



		}
		else if(Copy_u8Value==DIO_u8PIN_LOW)
 174:	8c 81       	ldd	r24, Y+4	; 0x04
 176:	88 23       	and	r24, r24
 178:	09 f0       	breq	.+2      	; 0x17c <DIO_u8SetPinValue+0x110>
 17a:	76 c0       	rjmp	.+236    	; 0x268 <DIO_u8SetPinValue+0x1fc>
		{
			switch(Copy_u8Port)
 17c:	8a 81       	ldd	r24, Y+2	; 0x02
 17e:	88 2f       	mov	r24, r24
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	84 30       	cpi	r24, 0x04	; 4
 184:	91 05       	cpc	r25, r1
 186:	09 f4       	brne	.+2      	; 0x18a <DIO_u8SetPinValue+0x11e>
 188:	55 c0       	rjmp	.+170    	; 0x234 <DIO_u8SetPinValue+0x1c8>
 18a:	85 30       	cpi	r24, 0x05	; 5
 18c:	91 05       	cpc	r25, r1
 18e:	0c f0       	brlt	.+2      	; 0x192 <DIO_u8SetPinValue+0x126>
 190:	68 c0       	rjmp	.+208    	; 0x262 <DIO_u8SetPinValue+0x1f6>
 192:	83 30       	cpi	r24, 0x03	; 3
 194:	91 05       	cpc	r25, r1
 196:	b9 f1       	breq	.+110    	; 0x206 <DIO_u8SetPinValue+0x19a>
 198:	84 30       	cpi	r24, 0x04	; 4
 19a:	91 05       	cpc	r25, r1
 19c:	0c f0       	brlt	.+2      	; 0x1a0 <DIO_u8SetPinValue+0x134>
 19e:	61 c0       	rjmp	.+194    	; 0x262 <DIO_u8SetPinValue+0x1f6>
 1a0:	00 97       	sbiw	r24, 0x00	; 0
 1a2:	19 f0       	breq	.+6      	; 0x1aa <DIO_u8SetPinValue+0x13e>
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	c1 f0       	breq	.+48     	; 0x1d8 <DIO_u8SetPinValue+0x16c>
 1a8:	5c c0       	rjmp	.+184    	; 0x262 <DIO_u8SetPinValue+0x1f6>
			{
			case DIO_u8PORTA:CLR_BIT(PORTA,Copy_u8Pin);break;
 1aa:	8b e3       	ldi	r24, 0x3B	; 59
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	fc 01       	movw	r30, r24
 1b0:	80 81       	ld	r24, Z
 1b2:	48 2f       	mov	r20, r24
 1b4:	8b 81       	ldd	r24, Y+3	; 0x03
 1b6:	28 2f       	mov	r18, r24
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <DIO_u8SetPinValue+0x158>
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	2a 95       	dec	r18
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <DIO_u8SetPinValue+0x154>
 1c8:	80 95       	com	r24
 1ca:	24 2f       	mov	r18, r20
 1cc:	28 23       	and	r18, r24
 1ce:	8b e3       	ldi	r24, 0x3B	; 59
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	fc 01       	movw	r30, r24
 1d4:	20 83       	st	Z, r18
 1d6:	4d c0       	rjmp	.+154    	; 0x272 <DIO_u8SetPinValue+0x206>
			case DIO_u8PORTB:CLR_BIT(PORTB,Copy_u8Pin);break;
 1d8:	88 e3       	ldi	r24, 0x38	; 56
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	fc 01       	movw	r30, r24
 1de:	80 81       	ld	r24, Z
 1e0:	48 2f       	mov	r20, r24
 1e2:	8b 81       	ldd	r24, Y+3	; 0x03
 1e4:	28 2f       	mov	r18, r24
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_u8SetPinValue+0x186>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	2a 95       	dec	r18
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_u8SetPinValue+0x182>
 1f6:	80 95       	com	r24
 1f8:	24 2f       	mov	r18, r20
 1fa:	28 23       	and	r18, r24
 1fc:	88 e3       	ldi	r24, 0x38	; 56
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	fc 01       	movw	r30, r24
 202:	20 83       	st	Z, r18
 204:	36 c0       	rjmp	.+108    	; 0x272 <DIO_u8SetPinValue+0x206>
			case DIO_u8PORTC:CLR_BIT(PORTC,Copy_u8Pin);break;
 206:	85 e3       	ldi	r24, 0x35	; 53
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	fc 01       	movw	r30, r24
 20c:	80 81       	ld	r24, Z
 20e:	48 2f       	mov	r20, r24
 210:	8b 81       	ldd	r24, Y+3	; 0x03
 212:	28 2f       	mov	r18, r24
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_u8SetPinValue+0x1b4>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	2a 95       	dec	r18
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_u8SetPinValue+0x1b0>
 224:	80 95       	com	r24
 226:	24 2f       	mov	r18, r20
 228:	28 23       	and	r18, r24
 22a:	85 e3       	ldi	r24, 0x35	; 53
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	fc 01       	movw	r30, r24
 230:	20 83       	st	Z, r18
 232:	1f c0       	rjmp	.+62     	; 0x272 <DIO_u8SetPinValue+0x206>
			case DIO_u8PORTD:CLR_BIT(PORTD,Copy_u8Pin);break;
 234:	82 e3       	ldi	r24, 0x32	; 50
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	fc 01       	movw	r30, r24
 23a:	80 81       	ld	r24, Z
 23c:	48 2f       	mov	r20, r24
 23e:	8b 81       	ldd	r24, Y+3	; 0x03
 240:	28 2f       	mov	r18, r24
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	02 c0       	rjmp	.+4      	; 0x24e <DIO_u8SetPinValue+0x1e2>
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	2a 95       	dec	r18
 250:	e2 f7       	brpl	.-8      	; 0x24a <DIO_u8SetPinValue+0x1de>
 252:	80 95       	com	r24
 254:	24 2f       	mov	r18, r20
 256:	28 23       	and	r18, r24
 258:	82 e3       	ldi	r24, 0x32	; 50
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	fc 01       	movw	r30, r24
 25e:	20 83       	st	Z, r18
 260:	08 c0       	rjmp	.+16     	; 0x272 <DIO_u8SetPinValue+0x206>
			default :Local_u8ErrorState=1;break;
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	89 83       	std	Y+1, r24	; 0x01
 266:	05 c0       	rjmp	.+10     	; 0x272 <DIO_u8SetPinValue+0x206>


		}
		else
		{
			Local_u8ErrorState=1;
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	89 83       	std	Y+1, r24	; 0x01
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_u8SetPinValue+0x206>
		}

	}
	else
	{
		Local_u8ErrorState=1;
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
 272:	89 81       	ldd	r24, Y+1	; 0x01
}
 274:	0f 90       	pop	r0
 276:	0f 90       	pop	r0
 278:	0f 90       	pop	r0
 27a:	0f 90       	pop	r0
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	08 95       	ret

00000282 <DIO_u8SetPortValue>:


u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
 286:	00 d0       	rcall	.+0      	; 0x288 <DIO_u8SetPortValue+0x6>
 288:	0f 92       	push	r0
 28a:	cd b7       	in	r28, 0x3d	; 61
 28c:	de b7       	in	r29, 0x3e	; 62
 28e:	8a 83       	std	Y+2, r24	; 0x02
 290:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
 292:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
 294:	8a 81       	ldd	r24, Y+2	; 0x02
 296:	88 2f       	mov	r24, r24
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	84 30       	cpi	r24, 0x04	; 4
 29c:	91 05       	cpc	r25, r1
 29e:	01 f1       	breq	.+64     	; 0x2e0 <DIO_u8SetPortValue+0x5e>
 2a0:	85 30       	cpi	r24, 0x05	; 5
 2a2:	91 05       	cpc	r25, r1
 2a4:	1c f5       	brge	.+70     	; 0x2ec <DIO_u8SetPortValue+0x6a>
 2a6:	83 30       	cpi	r24, 0x03	; 3
 2a8:	91 05       	cpc	r25, r1
 2aa:	a1 f0       	breq	.+40     	; 0x2d4 <DIO_u8SetPortValue+0x52>
 2ac:	84 30       	cpi	r24, 0x04	; 4
 2ae:	91 05       	cpc	r25, r1
 2b0:	ec f4       	brge	.+58     	; 0x2ec <DIO_u8SetPortValue+0x6a>
 2b2:	00 97       	sbiw	r24, 0x00	; 0
 2b4:	19 f0       	breq	.+6      	; 0x2bc <DIO_u8SetPortValue+0x3a>
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	39 f0       	breq	.+14     	; 0x2c8 <DIO_u8SetPortValue+0x46>
 2ba:	18 c0       	rjmp	.+48     	; 0x2ec <DIO_u8SetPortValue+0x6a>
	{
	case DIO_u8PORTA: PORTA=Copy_u8Value; break;
 2bc:	8b e3       	ldi	r24, 0x3B	; 59
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	2b 81       	ldd	r18, Y+3	; 0x03
 2c2:	fc 01       	movw	r30, r24
 2c4:	20 83       	st	Z, r18
 2c6:	15 c0       	rjmp	.+42     	; 0x2f2 <DIO_u8SetPortValue+0x70>
	case DIO_u8PORTB: PORTB=Copy_u8Value; break;
 2c8:	88 e3       	ldi	r24, 0x38	; 56
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	2b 81       	ldd	r18, Y+3	; 0x03
 2ce:	fc 01       	movw	r30, r24
 2d0:	20 83       	st	Z, r18
 2d2:	0f c0       	rjmp	.+30     	; 0x2f2 <DIO_u8SetPortValue+0x70>
	case DIO_u8PORTC: PORTC=Copy_u8Value; break;
 2d4:	85 e3       	ldi	r24, 0x35	; 53
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	2b 81       	ldd	r18, Y+3	; 0x03
 2da:	fc 01       	movw	r30, r24
 2dc:	20 83       	st	Z, r18
 2de:	09 c0       	rjmp	.+18     	; 0x2f2 <DIO_u8SetPortValue+0x70>
	case DIO_u8PORTD: PORTD=Copy_u8Value; break;
 2e0:	82 e3       	ldi	r24, 0x32	; 50
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	2b 81       	ldd	r18, Y+3	; 0x03
 2e6:	fc 01       	movw	r30, r24
 2e8:	20 83       	st	Z, r18
 2ea:	03 c0       	rjmp	.+6      	; 0x2f2 <DIO_u8SetPortValue+0x70>
	default :Local_u8ErrorState=1; break;
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	89 83       	std	Y+1, r24	; 0x01
 2f0:	00 00       	nop
	}

	return Local_u8ErrorState;
 2f2:	89 81       	ldd	r24, Y+1	; 0x01
}
 2f4:	0f 90       	pop	r0
 2f6:	0f 90       	pop	r0
 2f8:	0f 90       	pop	r0
 2fa:	df 91       	pop	r29
 2fc:	cf 91       	pop	r28
 2fe:	08 95       	ret

00000300 <DIO_u8GetPinValue>:



u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8* Copy_pu8Value)
{
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	00 d0       	rcall	.+0      	; 0x306 <DIO_u8GetPinValue+0x6>
 306:	00 d0       	rcall	.+0      	; 0x308 <DIO_u8GetPinValue+0x8>
 308:	0f 92       	push	r0
 30a:	cd b7       	in	r28, 0x3d	; 61
 30c:	de b7       	in	r29, 0x3e	; 62
 30e:	8a 83       	std	Y+2, r24	; 0x02
 310:	6b 83       	std	Y+3, r22	; 0x03
 312:	5d 83       	std	Y+5, r21	; 0x05
 314:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState=0;
 316:	19 82       	std	Y+1, r1	; 0x01
	if( (Copy_pu8Value!=NULL) && (Copy_u8Pin<=DIO_u8PIN7) )
 318:	8c 81       	ldd	r24, Y+4	; 0x04
 31a:	9d 81       	ldd	r25, Y+5	; 0x05
 31c:	89 2b       	or	r24, r25
 31e:	09 f4       	brne	.+2      	; 0x322 <DIO_u8GetPinValue+0x22>
 320:	73 c0       	rjmp	.+230    	; 0x408 <__FUSE_REGION_LENGTH__+0x8>
 322:	8b 81       	ldd	r24, Y+3	; 0x03
 324:	88 30       	cpi	r24, 0x08	; 8
 326:	08 f0       	brcs	.+2      	; 0x32a <DIO_u8GetPinValue+0x2a>
 328:	6f c0       	rjmp	.+222    	; 0x408 <__FUSE_REGION_LENGTH__+0x8>
	{
		switch(Copy_u8Port)
 32a:	8a 81       	ldd	r24, Y+2	; 0x02
 32c:	88 2f       	mov	r24, r24
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	84 30       	cpi	r24, 0x04	; 4
 332:	91 05       	cpc	r25, r1
 334:	09 f4       	brne	.+2      	; 0x338 <DIO_u8GetPinValue+0x38>
 336:	4f c0       	rjmp	.+158    	; 0x3d6 <DIO_u8GetPinValue+0xd6>
 338:	85 30       	cpi	r24, 0x05	; 5
 33a:	91 05       	cpc	r25, r1
 33c:	0c f0       	brlt	.+2      	; 0x340 <DIO_u8GetPinValue+0x40>
 33e:	60 c0       	rjmp	.+192    	; 0x400 <__FUSE_REGION_LENGTH__>
 340:	83 30       	cpi	r24, 0x03	; 3
 342:	91 05       	cpc	r25, r1
 344:	99 f1       	breq	.+102    	; 0x3ac <DIO_u8GetPinValue+0xac>
 346:	84 30       	cpi	r24, 0x04	; 4
 348:	91 05       	cpc	r25, r1
 34a:	0c f0       	brlt	.+2      	; 0x34e <DIO_u8GetPinValue+0x4e>
 34c:	59 c0       	rjmp	.+178    	; 0x400 <__FUSE_REGION_LENGTH__>
 34e:	00 97       	sbiw	r24, 0x00	; 0
 350:	19 f0       	breq	.+6      	; 0x358 <DIO_u8GetPinValue+0x58>
 352:	01 97       	sbiw	r24, 0x01	; 1
 354:	b1 f0       	breq	.+44     	; 0x382 <DIO_u8GetPinValue+0x82>
 356:	54 c0       	rjmp	.+168    	; 0x400 <__FUSE_REGION_LENGTH__>
		{
		case DIO_u8PORTA: *Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin); break;
 358:	89 e3       	ldi	r24, 0x39	; 57
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	fc 01       	movw	r30, r24
 35e:	80 81       	ld	r24, Z
 360:	88 2f       	mov	r24, r24
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	2b 81       	ldd	r18, Y+3	; 0x03
 366:	22 2f       	mov	r18, r18
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	02 c0       	rjmp	.+4      	; 0x370 <DIO_u8GetPinValue+0x70>
 36c:	95 95       	asr	r25
 36e:	87 95       	ror	r24
 370:	2a 95       	dec	r18
 372:	e2 f7       	brpl	.-8      	; 0x36c <DIO_u8GetPinValue+0x6c>
 374:	28 2f       	mov	r18, r24
 376:	21 70       	andi	r18, 0x01	; 1
 378:	8c 81       	ldd	r24, Y+4	; 0x04
 37a:	9d 81       	ldd	r25, Y+5	; 0x05
 37c:	fc 01       	movw	r30, r24
 37e:	20 83       	st	Z, r18
 380:	42 c0       	rjmp	.+132    	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
		case DIO_u8PORTB: *Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin); break;
 382:	86 e3       	ldi	r24, 0x36	; 54
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	fc 01       	movw	r30, r24
 388:	80 81       	ld	r24, Z
 38a:	88 2f       	mov	r24, r24
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	2b 81       	ldd	r18, Y+3	; 0x03
 390:	22 2f       	mov	r18, r18
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	02 c0       	rjmp	.+4      	; 0x39a <DIO_u8GetPinValue+0x9a>
 396:	95 95       	asr	r25
 398:	87 95       	ror	r24
 39a:	2a 95       	dec	r18
 39c:	e2 f7       	brpl	.-8      	; 0x396 <DIO_u8GetPinValue+0x96>
 39e:	28 2f       	mov	r18, r24
 3a0:	21 70       	andi	r18, 0x01	; 1
 3a2:	8c 81       	ldd	r24, Y+4	; 0x04
 3a4:	9d 81       	ldd	r25, Y+5	; 0x05
 3a6:	fc 01       	movw	r30, r24
 3a8:	20 83       	st	Z, r18
 3aa:	2d c0       	rjmp	.+90     	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
		case DIO_u8PORTC: *Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin); break;
 3ac:	83 e3       	ldi	r24, 0x33	; 51
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	fc 01       	movw	r30, r24
 3b2:	80 81       	ld	r24, Z
 3b4:	88 2f       	mov	r24, r24
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	2b 81       	ldd	r18, Y+3	; 0x03
 3ba:	22 2f       	mov	r18, r18
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <DIO_u8GetPinValue+0xc4>
 3c0:	95 95       	asr	r25
 3c2:	87 95       	ror	r24
 3c4:	2a 95       	dec	r18
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <DIO_u8GetPinValue+0xc0>
 3c8:	28 2f       	mov	r18, r24
 3ca:	21 70       	andi	r18, 0x01	; 1
 3cc:	8c 81       	ldd	r24, Y+4	; 0x04
 3ce:	9d 81       	ldd	r25, Y+5	; 0x05
 3d0:	fc 01       	movw	r30, r24
 3d2:	20 83       	st	Z, r18
 3d4:	18 c0       	rjmp	.+48     	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
		case DIO_u8PORTD: *Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin); break;
 3d6:	80 e3       	ldi	r24, 0x30	; 48
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	fc 01       	movw	r30, r24
 3dc:	80 81       	ld	r24, Z
 3de:	88 2f       	mov	r24, r24
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	2b 81       	ldd	r18, Y+3	; 0x03
 3e4:	22 2f       	mov	r18, r18
 3e6:	30 e0       	ldi	r19, 0x00	; 0
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <DIO_u8GetPinValue+0xee>
 3ea:	95 95       	asr	r25
 3ec:	87 95       	ror	r24
 3ee:	2a 95       	dec	r18
 3f0:	e2 f7       	brpl	.-8      	; 0x3ea <DIO_u8GetPinValue+0xea>
 3f2:	28 2f       	mov	r18, r24
 3f4:	21 70       	andi	r18, 0x01	; 1
 3f6:	8c 81       	ldd	r24, Y+4	; 0x04
 3f8:	9d 81       	ldd	r25, Y+5	; 0x05
 3fa:	fc 01       	movw	r30, r24
 3fc:	20 83       	st	Z, r18
 3fe:	03 c0       	rjmp	.+6      	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
		default : Local_u8ErrorState=1; break;
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	89 83       	std	Y+1, r24	; 0x01
 404:	00 00       	nop
{

	u8 Local_u8ErrorState=0;
	if( (Copy_pu8Value!=NULL) && (Copy_u8Pin<=DIO_u8PIN7) )
	{
		switch(Copy_u8Port)
 406:	02 c0       	rjmp	.+4      	; 0x40c <__FUSE_REGION_LENGTH__+0xc>
		}

	}
	else
	{
		Local_u8ErrorState=1;
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	89 83       	std	Y+1, r24	; 0x01

	}

	return Local_u8ErrorState;
 40c:	89 81       	ldd	r24, Y+1	; 0x01
}
 40e:	0f 90       	pop	r0
 410:	0f 90       	pop	r0
 412:	0f 90       	pop	r0
 414:	0f 90       	pop	r0
 416:	0f 90       	pop	r0
 418:	df 91       	pop	r29
 41a:	cf 91       	pop	r28
 41c:	08 95       	ret

0000041e <EEPROM_voidSendDataByte>:
#include "EEPROM_private.h"
#include "EEPROM_config.h"


void EEPROM_voidSendDataByte(u16 Copy_u16Address, u8 Copy_u8DataByte)
{
 41e:	cf 93       	push	r28
 420:	df 93       	push	r29
 422:	00 d0       	rcall	.+0      	; 0x424 <EEPROM_voidSendDataByte+0x6>
 424:	0f 92       	push	r0
 426:	cd b7       	in	r28, 0x3d	; 61
 428:	de b7       	in	r29, 0x3e	; 62
 42a:	9a 83       	std	Y+2, r25	; 0x02
 42c:	89 83       	std	Y+1, r24	; 0x01
 42e:	6b 83       	std	Y+3, r22	; 0x03
	/*Send Start Condition*/
	TWI_SendStartCondtionStart();
 430:	0e 94 d5 02 	call	0x5aa	; 0x5aa <TWI_SendStartCondtionStart>

	/*Send SLave Address with write*/
	TWI_SendSlaveAddressWithWrite(0b01010000 |1<<2 | Copy_u16Address>>8);
 434:	89 81       	ldd	r24, Y+1	; 0x01
 436:	9a 81       	ldd	r25, Y+2	; 0x02
 438:	89 2f       	mov	r24, r25
 43a:	99 27       	eor	r25, r25
 43c:	84 65       	ori	r24, 0x54	; 84
 43e:	0e 94 4f 03 	call	0x69e	; 0x69e <TWI_SendSlaveAddressWithWrite>

	/*Master write Data Byte*/
	TWI_MasterWriteDataByte((u8) Copy_u16Address);
 442:	89 81       	ldd	r24, Y+1	; 0x01
 444:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <TWI_MasterWriteDataByte>

	/*Master Write Data Byte*/
	TWI_MasterWriteDataByte(Copy_u8DataByte);
 448:	8b 81       	ldd	r24, Y+3	; 0x03
 44a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <TWI_MasterWriteDataByte>

	/*Send Stop Condition*/
	TWI_SendStopCondition();
 44e:	0e 94 73 04 	call	0x8e6	; 0x8e6 <TWI_SendStopCondition>

}
 452:	00 00       	nop
 454:	0f 90       	pop	r0
 456:	0f 90       	pop	r0
 458:	0f 90       	pop	r0
 45a:	df 91       	pop	r29
 45c:	cf 91       	pop	r28
 45e:	08 95       	ret

00000460 <EEPROM_voidReadDataByte>:

void EEPROM_voidReadDataByte(u16 Copy_u16Address, u8* Copy_pu8DataByte)
{
 460:	cf 93       	push	r28
 462:	df 93       	push	r29
 464:	00 d0       	rcall	.+0      	; 0x466 <EEPROM_voidReadDataByte+0x6>
 466:	00 d0       	rcall	.+0      	; 0x468 <EEPROM_voidReadDataByte+0x8>
 468:	cd b7       	in	r28, 0x3d	; 61
 46a:	de b7       	in	r29, 0x3e	; 62
 46c:	9a 83       	std	Y+2, r25	; 0x02
 46e:	89 83       	std	Y+1, r24	; 0x01
 470:	7c 83       	std	Y+4, r23	; 0x04
 472:	6b 83       	std	Y+3, r22	; 0x03
	/*Send Start Condition*/
	TWI_SendStartCondtionStart();
 474:	0e 94 d5 02 	call	0x5aa	; 0x5aa <TWI_SendStartCondtionStart>

	/*Send SLave Address with write*/
	TWI_SendSlaveAddressWithWrite(0b01010000 |1<<2 | Copy_u16Address>>8);
 478:	89 81       	ldd	r24, Y+1	; 0x01
 47a:	9a 81       	ldd	r25, Y+2	; 0x02
 47c:	89 2f       	mov	r24, r25
 47e:	99 27       	eor	r25, r25
 480:	84 65       	ori	r24, 0x54	; 84
 482:	0e 94 4f 03 	call	0x69e	; 0x69e <TWI_SendSlaveAddressWithWrite>

	/*Master write Data Byte*/
	TWI_MasterWriteDataByte((u8) Copy_u16Address);
 486:	89 81       	ldd	r24, Y+1	; 0x01
 488:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <TWI_MasterWriteDataByte>

	/*Send Repeated Start*/
	TWI_SendRepeatedStart();
 48c:	0e 94 12 03 	call	0x624	; 0x624 <TWI_SendRepeatedStart>

	/*Send SLave Address with Read*/
	TWI_SendSlaveAddressWithRead(0b01010000 | 1<<2 | Copy_u16Address>>8);
 490:	89 81       	ldd	r24, Y+1	; 0x01
 492:	9a 81       	ldd	r25, Y+2	; 0x02
 494:	89 2f       	mov	r24, r25
 496:	99 27       	eor	r25, r25
 498:	84 65       	ori	r24, 0x54	; 84
 49a:	0e 94 9d 03 	call	0x73a	; 0x73a <TWI_SendSlaveAddressWithRead>

	/*Master Read Data Byte*/
	TWI_MasterReadDataByte(Copy_pu8DataByte);
 49e:	8b 81       	ldd	r24, Y+3	; 0x03
 4a0:	9c 81       	ldd	r25, Y+4	; 0x04
 4a2:	0e 94 27 04 	call	0x84e	; 0x84e <TWI_MasterReadDataByte>

	/*Send Stop Condition*/
	TWI_SendStopCondition();
 4a6:	0e 94 73 04 	call	0x8e6	; 0x8e6 <TWI_SendStopCondition>
}
 4aa:	00 00       	nop
 4ac:	0f 90       	pop	r0
 4ae:	0f 90       	pop	r0
 4b0:	0f 90       	pop	r0
 4b2:	0f 90       	pop	r0
 4b4:	df 91       	pop	r29
 4b6:	cf 91       	pop	r28
 4b8:	08 95       	ret

000004ba <PORT_voidInit>:
#include"PORT_interface.h"
#include"PORT_register.h"


void PORT_voidInit()
{
 4ba:	cf 93       	push	r28
 4bc:	df 93       	push	r29
 4be:	cd b7       	in	r28, 0x3d	; 61
 4c0:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
 4c2:	8a e3       	ldi	r24, 0x3A	; 58
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	2f ef       	ldi	r18, 0xFF	; 255
 4c8:	fc 01       	movw	r30, r24
 4ca:	20 83       	st	Z, r18
	DDRB=PORTB_DIR;
 4cc:	87 e3       	ldi	r24, 0x37	; 55
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	fc 01       	movw	r30, r24
 4d2:	10 82       	st	Z, r1
	DDRC=PORTC_DIR;
 4d4:	84 e3       	ldi	r24, 0x34	; 52
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	27 e0       	ldi	r18, 0x07	; 7
 4da:	fc 01       	movw	r30, r24
 4dc:	20 83       	st	Z, r18
	DDRD=PORTD_DIR;
 4de:	81 e3       	ldi	r24, 0x31	; 49
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	fc 01       	movw	r30, r24
 4e4:	10 82       	st	Z, r1

	PORTA=PORTA_InitVal;
 4e6:	8b e3       	ldi	r24, 0x3B	; 59
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	fc 01       	movw	r30, r24
 4ec:	10 82       	st	Z, r1
	PORTB=PORTB_InitVal;
 4ee:	88 e3       	ldi	r24, 0x38	; 56
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	fc 01       	movw	r30, r24
 4f4:	10 82       	st	Z, r1
	PORTC=PORTC_InitVal;
 4f6:	85 e3       	ldi	r24, 0x35	; 53
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	fc 01       	movw	r30, r24
 4fc:	10 82       	st	Z, r1
	PORTD=PORTD_InitVal;
 4fe:	82 e3       	ldi	r24, 0x32	; 50
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	fc 01       	movw	r30, r24
 504:	10 82       	st	Z, r1
}
 506:	00 00       	nop
 508:	df 91       	pop	r29
 50a:	cf 91       	pop	r28
 50c:	08 95       	ret

0000050e <TWI_voidMasterInit>:
#include "TWI_private.h"


/*Pass 0 in the SlaveAddress argument if master will not be addressed*/
void TWI_voidMasterInit(u8 Copy_u8SlaveAddress)
{
 50e:	cf 93       	push	r28
 510:	df 93       	push	r29
 512:	0f 92       	push	r0
 514:	cd b7       	in	r28, 0x3d	; 61
 516:	de b7       	in	r29, 0x3e	; 62
 518:	89 83       	std	Y+1, r24	; 0x01
	/*Set Clock Frequency to 400bps*/
	/*Set TWDR to 2*/
	TWDR= 2;
 51a:	83 e2       	ldi	r24, 0x23	; 35
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	22 e0       	ldi	r18, 0x02	; 2
 520:	fc 01       	movw	r30, r24
 522:	20 83       	st	Z, r18

	/*Clear the 2 bits of TWPS*/
	CLR_BIT(TWSR,TWSR_TWPS1);
 524:	81 e2       	ldi	r24, 0x21	; 33
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	fc 01       	movw	r30, r24
 52a:	20 81       	ld	r18, Z
 52c:	81 e2       	ldi	r24, 0x21	; 33
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	2d 7f       	andi	r18, 0xFD	; 253
 532:	fc 01       	movw	r30, r24
 534:	20 83       	st	Z, r18
	CLR_BIT(TWSR,TWSR_TWPS0);
 536:	81 e2       	ldi	r24, 0x21	; 33
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	fc 01       	movw	r30, r24
 53c:	20 81       	ld	r18, Z
 53e:	81 e2       	ldi	r24, 0x21	; 33
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	2e 7f       	andi	r18, 0xFE	; 254
 544:	fc 01       	movw	r30, r24
 546:	20 83       	st	Z, r18

	/*Initialize the node address*/
	if(Copy_u8SlaveAddress != 0)
 548:	89 81       	ldd	r24, Y+1	; 0x01
 54a:	88 23       	and	r24, r24
 54c:	31 f0       	breq	.+12     	; 0x55a <TWI_voidMasterInit+0x4c>
	{
		/*6 bit MSBs For address*/
		TWAR = Copy_u8SlaveAddress << 1;
 54e:	82 e2       	ldi	r24, 0x22	; 34
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	29 81       	ldd	r18, Y+1	; 0x01
 554:	22 0f       	add	r18, r18
 556:	fc 01       	movw	r30, r24
 558:	20 83       	st	Z, r18
	}

	/*Enable TWI */
	SET_BIT(TWCR,TWCR_TWEN);
 55a:	86 e5       	ldi	r24, 0x56	; 86
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	fc 01       	movw	r30, r24
 560:	20 81       	ld	r18, Z
 562:	86 e5       	ldi	r24, 0x56	; 86
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	24 60       	ori	r18, 0x04	; 4
 568:	fc 01       	movw	r30, r24
 56a:	20 83       	st	Z, r18
}
 56c:	00 00       	nop
 56e:	0f 90       	pop	r0
 570:	df 91       	pop	r29
 572:	cf 91       	pop	r28
 574:	08 95       	ret

00000576 <TWI_voidSlaveInit>:

void TWI_voidSlaveInit(u8 Copy_u8SlaveAddress)
{
 576:	cf 93       	push	r28
 578:	df 93       	push	r29
 57a:	0f 92       	push	r0
 57c:	cd b7       	in	r28, 0x3d	; 61
 57e:	de b7       	in	r29, 0x3e	; 62
 580:	89 83       	std	Y+1, r24	; 0x01
	/*Initialize the node address*/
	TWAR = Copy_u8SlaveAddress << 1;
 582:	82 e2       	ldi	r24, 0x22	; 34
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	29 81       	ldd	r18, Y+1	; 0x01
 588:	22 0f       	add	r18, r18
 58a:	fc 01       	movw	r30, r24
 58c:	20 83       	st	Z, r18

	/*Enable TWI */
	SET_BIT(TWCR,TWCR_TWEN);
 58e:	86 e5       	ldi	r24, 0x56	; 86
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	fc 01       	movw	r30, r24
 594:	20 81       	ld	r18, Z
 596:	86 e5       	ldi	r24, 0x56	; 86
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	24 60       	ori	r18, 0x04	; 4
 59c:	fc 01       	movw	r30, r24
 59e:	20 83       	st	Z, r18

}
 5a0:	00 00       	nop
 5a2:	0f 90       	pop	r0
 5a4:	df 91       	pop	r29
 5a6:	cf 91       	pop	r28
 5a8:	08 95       	ret

000005aa <TWI_SendStartCondtionStart>:


TWI_ErrorStatus TWI_SendStartCondtionStart(void)
{
 5aa:	cf 93       	push	r28
 5ac:	df 93       	push	r29
 5ae:	0f 92       	push	r0
 5b0:	cd b7       	in	r28, 0x3d	; 61
 5b2:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorStatus Local_ErrorStatus = NoError;
 5b4:	19 82       	std	Y+1, r1	; 0x01

	/*Send start condition on the bus*/
	SET_BIT(TWCR,TWCR_TWSTA);
 5b6:	86 e5       	ldi	r24, 0x56	; 86
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	fc 01       	movw	r30, r24
 5bc:	20 81       	ld	r18, Z
 5be:	86 e5       	ldi	r24, 0x56	; 86
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	20 62       	ori	r18, 0x20	; 32
 5c4:	fc 01       	movw	r30, r24
 5c6:	20 83       	st	Z, r18

	/*CLear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
 5c8:	86 e5       	ldi	r24, 0x56	; 86
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	fc 01       	movw	r30, r24
 5ce:	20 81       	ld	r18, Z
 5d0:	86 e5       	ldi	r24, 0x56	; 86
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	20 68       	ori	r18, 0x80	; 128
 5d6:	fc 01       	movw	r30, r24
 5d8:	20 83       	st	Z, r18

	/*Wait until the interrupt flag is raised again and the previous operation is complete*/
	while(GET_BIT(TWCR,TWCR_TWINT) == 0);
 5da:	00 00       	nop
 5dc:	86 e5       	ldi	r24, 0x56	; 86
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	fc 01       	movw	r30, r24
 5e2:	80 81       	ld	r24, Z
 5e4:	88 1f       	adc	r24, r24
 5e6:	88 27       	eor	r24, r24
 5e8:	88 1f       	adc	r24, r24
 5ea:	88 2f       	mov	r24, r24
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	81 70       	andi	r24, 0x01	; 1
 5f0:	99 27       	eor	r25, r25
 5f2:	89 2b       	or	r24, r25
 5f4:	99 f3       	breq	.-26     	; 0x5dc <TWI_SendStartCondtionStart+0x32>

	if( (TWSR & 1111000) != START_ACK)
 5f6:	81 e2       	ldi	r24, 0x21	; 33
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	fc 01       	movw	r30, r24
 5fc:	80 81       	ld	r24, Z
 5fe:	88 2f       	mov	r24, r24
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	a0 e0       	ldi	r26, 0x00	; 0
 604:	b0 e0       	ldi	r27, 0x00	; 0
 606:	88 7d       	andi	r24, 0xD8	; 216
 608:	93 7f       	andi	r25, 0xF3	; 243
 60a:	a0 71       	andi	r26, 0x10	; 16
 60c:	bb 27       	eor	r27, r27
 60e:	08 97       	sbiw	r24, 0x08	; 8
 610:	a1 05       	cpc	r26, r1
 612:	b1 05       	cpc	r27, r1
 614:	11 f0       	breq	.+4      	; 0x61a <TWI_SendStartCondtionStart+0x70>
	{
		Local_ErrorStatus = StartCondtionError;
 616:	81 e0       	ldi	r24, 0x01	; 1
 618:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing*/
	}

	return Local_ErrorStatus;
 61a:	89 81       	ldd	r24, Y+1	; 0x01
}
 61c:	0f 90       	pop	r0
 61e:	df 91       	pop	r29
 620:	cf 91       	pop	r28
 622:	08 95       	ret

00000624 <TWI_SendRepeatedStart>:

TWI_ErrorStatus TWI_SendRepeatedStart(void)
{
 624:	cf 93       	push	r28
 626:	df 93       	push	r29
 628:	0f 92       	push	r0
 62a:	cd b7       	in	r28, 0x3d	; 61
 62c:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorStatus Local_ErrorStatus = NoError;
 62e:	19 82       	std	Y+1, r1	; 0x01

	/*Send start condition on the bus*/
	SET_BIT(TWCR,TWCR_TWSTA);
 630:	86 e5       	ldi	r24, 0x56	; 86
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	fc 01       	movw	r30, r24
 636:	20 81       	ld	r18, Z
 638:	86 e5       	ldi	r24, 0x56	; 86
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	20 62       	ori	r18, 0x20	; 32
 63e:	fc 01       	movw	r30, r24
 640:	20 83       	st	Z, r18

	/*CLear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
 642:	86 e5       	ldi	r24, 0x56	; 86
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	fc 01       	movw	r30, r24
 648:	20 81       	ld	r18, Z
 64a:	86 e5       	ldi	r24, 0x56	; 86
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	20 68       	ori	r18, 0x80	; 128
 650:	fc 01       	movw	r30, r24
 652:	20 83       	st	Z, r18

	/*Wait until the interrupt flag is raised again and the previous operation is complete*/
	while(GET_BIT(TWCR,TWCR_TWINT) == 0);
 654:	00 00       	nop
 656:	86 e5       	ldi	r24, 0x56	; 86
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	fc 01       	movw	r30, r24
 65c:	80 81       	ld	r24, Z
 65e:	88 1f       	adc	r24, r24
 660:	88 27       	eor	r24, r24
 662:	88 1f       	adc	r24, r24
 664:	88 2f       	mov	r24, r24
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	81 70       	andi	r24, 0x01	; 1
 66a:	99 27       	eor	r25, r25
 66c:	89 2b       	or	r24, r25
 66e:	99 f3       	breq	.-26     	; 0x656 <TWI_SendRepeatedStart+0x32>

	if( (TWSR & 1111000) != REP_START_ACK)
 670:	81 e2       	ldi	r24, 0x21	; 33
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	fc 01       	movw	r30, r24
 676:	80 81       	ld	r24, Z
 678:	88 2f       	mov	r24, r24
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	a0 e0       	ldi	r26, 0x00	; 0
 67e:	b0 e0       	ldi	r27, 0x00	; 0
 680:	88 7d       	andi	r24, 0xD8	; 216
 682:	93 7f       	andi	r25, 0xF3	; 243
 684:	a0 71       	andi	r26, 0x10	; 16
 686:	bb 27       	eor	r27, r27
 688:	40 97       	sbiw	r24, 0x10	; 16
 68a:	a1 05       	cpc	r26, r1
 68c:	b1 05       	cpc	r27, r1
 68e:	11 f0       	breq	.+4      	; 0x694 <TWI_SendRepeatedStart+0x70>
	{
		Local_ErrorStatus = RepeatedStartError;
 690:	82 e0       	ldi	r24, 0x02	; 2
 692:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing*/
	}

	return Local_ErrorStatus;
 694:	89 81       	ldd	r24, Y+1	; 0x01
}
 696:	0f 90       	pop	r0
 698:	df 91       	pop	r29
 69a:	cf 91       	pop	r28
 69c:	08 95       	ret

0000069e <TWI_SendSlaveAddressWithWrite>:

TWI_ErrorStatus TWI_SendSlaveAddressWithWrite(u8 Copy_u8SlaveAddress)
{
 69e:	cf 93       	push	r28
 6a0:	df 93       	push	r29
 6a2:	00 d0       	rcall	.+0      	; 0x6a4 <TWI_SendSlaveAddressWithWrite+0x6>
 6a4:	cd b7       	in	r28, 0x3d	; 61
 6a6:	de b7       	in	r29, 0x3e	; 62
 6a8:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorStatus Local_ErrorState = NoError;
 6aa:	19 82       	std	Y+1, r1	; 0x01

	/*Clear the start condition bit*/
	CLR_BIT(TWCR,TWCR_TWSTA);
 6ac:	86 e5       	ldi	r24, 0x56	; 86
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	fc 01       	movw	r30, r24
 6b2:	20 81       	ld	r18, Z
 6b4:	86 e5       	ldi	r24, 0x56	; 86
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	2f 7d       	andi	r18, 0xDF	; 223
 6ba:	fc 01       	movw	r30, r24
 6bc:	20 83       	st	Z, r18

	/*Set the slave address in the 7 MSB in the data register*/
	TWDR = Copy_u8SlaveAddress << 1;
 6be:	83 e2       	ldi	r24, 0x23	; 35
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	2a 81       	ldd	r18, Y+2	; 0x02
 6c4:	22 0f       	add	r18, r18
 6c6:	fc 01       	movw	r30, r24
 6c8:	20 83       	st	Z, r18
	CLR_BIT(TWDR,0); 		// for write request
 6ca:	83 e2       	ldi	r24, 0x23	; 35
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	fc 01       	movw	r30, r24
 6d0:	20 81       	ld	r18, Z
 6d2:	83 e2       	ldi	r24, 0x23	; 35
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	2e 7f       	andi	r18, 0xFE	; 254
 6d8:	fc 01       	movw	r30, r24
 6da:	20 83       	st	Z, r18

	/*CLear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
 6dc:	86 e5       	ldi	r24, 0x56	; 86
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	fc 01       	movw	r30, r24
 6e2:	20 81       	ld	r18, Z
 6e4:	86 e5       	ldi	r24, 0x56	; 86
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	20 68       	ori	r18, 0x80	; 128
 6ea:	fc 01       	movw	r30, r24
 6ec:	20 83       	st	Z, r18

	/*Wait until the interrupt flag is raised again and the previous operation is complete*/
	while(GET_BIT(TWCR,TWCR_TWINT) == 0);
 6ee:	00 00       	nop
 6f0:	86 e5       	ldi	r24, 0x56	; 86
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	fc 01       	movw	r30, r24
 6f6:	80 81       	ld	r24, Z
 6f8:	88 1f       	adc	r24, r24
 6fa:	88 27       	eor	r24, r24
 6fc:	88 1f       	adc	r24, r24
 6fe:	88 2f       	mov	r24, r24
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	81 70       	andi	r24, 0x01	; 1
 704:	99 27       	eor	r25, r25
 706:	89 2b       	or	r24, r25
 708:	99 f3       	breq	.-26     	; 0x6f0 <TWI_SendSlaveAddressWithWrite+0x52>

	if( (TWSR & 1111000) != SLAVE_ADD_AND_WR_ACK)
 70a:	81 e2       	ldi	r24, 0x21	; 33
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	fc 01       	movw	r30, r24
 710:	80 81       	ld	r24, Z
 712:	88 2f       	mov	r24, r24
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	a0 e0       	ldi	r26, 0x00	; 0
 718:	b0 e0       	ldi	r27, 0x00	; 0
 71a:	88 7d       	andi	r24, 0xD8	; 216
 71c:	93 7f       	andi	r25, 0xF3	; 243
 71e:	a0 71       	andi	r26, 0x10	; 16
 720:	bb 27       	eor	r27, r27
 722:	48 97       	sbiw	r24, 0x18	; 24
 724:	a1 05       	cpc	r26, r1
 726:	b1 05       	cpc	r27, r1
 728:	11 f0       	breq	.+4      	; 0x72e <TWI_SendSlaveAddressWithWrite+0x90>
	{
		Local_ErrorState = SlaveAddressWithWriteErr;
 72a:	83 e0       	ldi	r24, 0x03	; 3
 72c:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing*/
	}

	return Local_ErrorState;
 72e:	89 81       	ldd	r24, Y+1	; 0x01
}
 730:	0f 90       	pop	r0
 732:	0f 90       	pop	r0
 734:	df 91       	pop	r29
 736:	cf 91       	pop	r28
 738:	08 95       	ret

0000073a <TWI_SendSlaveAddressWithRead>:



TWI_ErrorStatus TWI_SendSlaveAddressWithRead(u8 Copy_u8SlaveAddress)
{
 73a:	cf 93       	push	r28
 73c:	df 93       	push	r29
 73e:	00 d0       	rcall	.+0      	; 0x740 <TWI_SendSlaveAddressWithRead+0x6>
 740:	cd b7       	in	r28, 0x3d	; 61
 742:	de b7       	in	r29, 0x3e	; 62
 744:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorStatus Local_ErrorState = NoError;
 746:	19 82       	std	Y+1, r1	; 0x01

	/*Clear the start condition bit*/
	CLR_BIT(TWCR,TWCR_TWSTA);
 748:	86 e5       	ldi	r24, 0x56	; 86
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	fc 01       	movw	r30, r24
 74e:	20 81       	ld	r18, Z
 750:	86 e5       	ldi	r24, 0x56	; 86
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	2f 7d       	andi	r18, 0xDF	; 223
 756:	fc 01       	movw	r30, r24
 758:	20 83       	st	Z, r18

	/*Set the slave address in the 7 MSB in the data register*/
	TWDR = Copy_u8SlaveAddress << 1;
 75a:	83 e2       	ldi	r24, 0x23	; 35
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	2a 81       	ldd	r18, Y+2	; 0x02
 760:	22 0f       	add	r18, r18
 762:	fc 01       	movw	r30, r24
 764:	20 83       	st	Z, r18
	CLR_BIT(TWDR,1); 		// for write request
 766:	83 e2       	ldi	r24, 0x23	; 35
 768:	90 e0       	ldi	r25, 0x00	; 0
 76a:	fc 01       	movw	r30, r24
 76c:	20 81       	ld	r18, Z
 76e:	83 e2       	ldi	r24, 0x23	; 35
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	2d 7f       	andi	r18, 0xFD	; 253
 774:	fc 01       	movw	r30, r24
 776:	20 83       	st	Z, r18


	/*CLear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
 778:	86 e5       	ldi	r24, 0x56	; 86
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	fc 01       	movw	r30, r24
 77e:	20 81       	ld	r18, Z
 780:	86 e5       	ldi	r24, 0x56	; 86
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	20 68       	ori	r18, 0x80	; 128
 786:	fc 01       	movw	r30, r24
 788:	20 83       	st	Z, r18

	/*Wait until the interrupt flag is raised again and the previous operation is complete*/
	while(GET_BIT(TWCR,TWCR_TWINT) == 0);
 78a:	00 00       	nop
 78c:	86 e5       	ldi	r24, 0x56	; 86
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	fc 01       	movw	r30, r24
 792:	80 81       	ld	r24, Z
 794:	88 1f       	adc	r24, r24
 796:	88 27       	eor	r24, r24
 798:	88 1f       	adc	r24, r24
 79a:	88 2f       	mov	r24, r24
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	81 70       	andi	r24, 0x01	; 1
 7a0:	99 27       	eor	r25, r25
 7a2:	89 2b       	or	r24, r25
 7a4:	99 f3       	breq	.-26     	; 0x78c <TWI_SendSlaveAddressWithRead+0x52>

	/*Check on the operation status in the status register*/
	if( (TWSR & 1111000) != SLAVE_ADD_AND_RD_ACK)
 7a6:	81 e2       	ldi	r24, 0x21	; 33
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	fc 01       	movw	r30, r24
 7ac:	80 81       	ld	r24, Z
 7ae:	88 2f       	mov	r24, r24
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	a0 e0       	ldi	r26, 0x00	; 0
 7b4:	b0 e0       	ldi	r27, 0x00	; 0
 7b6:	88 7d       	andi	r24, 0xD8	; 216
 7b8:	93 7f       	andi	r25, 0xF3	; 243
 7ba:	a0 71       	andi	r26, 0x10	; 16
 7bc:	bb 27       	eor	r27, r27
 7be:	80 34       	cpi	r24, 0x40	; 64
 7c0:	91 05       	cpc	r25, r1
 7c2:	a1 05       	cpc	r26, r1
 7c4:	b1 05       	cpc	r27, r1
 7c6:	11 f0       	breq	.+4      	; 0x7cc <TWI_SendSlaveAddressWithRead+0x92>
	{
		Local_ErrorState = SlaveAddressWithReadErr;
 7c8:	84 e0       	ldi	r24, 0x04	; 4
 7ca:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing*/
	}

	return Local_ErrorState;
 7cc:	89 81       	ldd	r24, Y+1	; 0x01
}
 7ce:	0f 90       	pop	r0
 7d0:	0f 90       	pop	r0
 7d2:	df 91       	pop	r29
 7d4:	cf 91       	pop	r28
 7d6:	08 95       	ret

000007d8 <TWI_MasterWriteDataByte>:


TWI_ErrorStatus TWI_MasterWriteDataByte(u8 Copy_u8DataByte)
{
 7d8:	cf 93       	push	r28
 7da:	df 93       	push	r29
 7dc:	00 d0       	rcall	.+0      	; 0x7de <TWI_MasterWriteDataByte+0x6>
 7de:	cd b7       	in	r28, 0x3d	; 61
 7e0:	de b7       	in	r29, 0x3e	; 62
 7e2:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorStatus Local_ErrorState = NoError;
 7e4:	19 82       	std	Y+1, r1	; 0x01

	/*write the data byte*/
	TWDR = Copy_u8DataByte;
 7e6:	83 e2       	ldi	r24, 0x23	; 35
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	2a 81       	ldd	r18, Y+2	; 0x02
 7ec:	fc 01       	movw	r30, r24
 7ee:	20 83       	st	Z, r18

	/*CLear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
 7f0:	86 e5       	ldi	r24, 0x56	; 86
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	fc 01       	movw	r30, r24
 7f6:	20 81       	ld	r18, Z
 7f8:	86 e5       	ldi	r24, 0x56	; 86
 7fa:	90 e0       	ldi	r25, 0x00	; 0
 7fc:	20 68       	ori	r18, 0x80	; 128
 7fe:	fc 01       	movw	r30, r24
 800:	20 83       	st	Z, r18

	/*Wait until the interrupt flag is raised again and the previous operation is complete*/
	while(GET_BIT(TWCR,TWCR_TWINT) == 0);
 802:	00 00       	nop
 804:	86 e5       	ldi	r24, 0x56	; 86
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	fc 01       	movw	r30, r24
 80a:	80 81       	ld	r24, Z
 80c:	88 1f       	adc	r24, r24
 80e:	88 27       	eor	r24, r24
 810:	88 1f       	adc	r24, r24
 812:	88 2f       	mov	r24, r24
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	81 70       	andi	r24, 0x01	; 1
 818:	99 27       	eor	r25, r25
 81a:	89 2b       	or	r24, r25
 81c:	99 f3       	breq	.-26     	; 0x804 <TWI_MasterWriteDataByte+0x2c>

	/*Check on the operation status in the status register*/
	if( (TWSR & 1111000) != MSTR_WR_BYTE_ACK)
 81e:	81 e2       	ldi	r24, 0x21	; 33
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	fc 01       	movw	r30, r24
 824:	80 81       	ld	r24, Z
 826:	88 2f       	mov	r24, r24
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	a0 e0       	ldi	r26, 0x00	; 0
 82c:	b0 e0       	ldi	r27, 0x00	; 0
 82e:	88 7d       	andi	r24, 0xD8	; 216
 830:	93 7f       	andi	r25, 0xF3	; 243
 832:	a0 71       	andi	r26, 0x10	; 16
 834:	bb 27       	eor	r27, r27
 836:	88 97       	sbiw	r24, 0x28	; 40
 838:	a1 05       	cpc	r26, r1
 83a:	b1 05       	cpc	r27, r1
 83c:	11 f0       	breq	.+4      	; 0x842 <TWI_MasterWriteDataByte+0x6a>
	{
		Local_ErrorState = MasterWriteByteErr;
 83e:	85 e0       	ldi	r24, 0x05	; 5
 840:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing*/
	}

	return Local_ErrorState;
 842:	89 81       	ldd	r24, Y+1	; 0x01
}
 844:	0f 90       	pop	r0
 846:	0f 90       	pop	r0
 848:	df 91       	pop	r29
 84a:	cf 91       	pop	r28
 84c:	08 95       	ret

0000084e <TWI_MasterReadDataByte>:

TWI_ErrorStatus TWI_MasterReadDataByte(u8 *Copy_pu8DataByte)
{
 84e:	cf 93       	push	r28
 850:	df 93       	push	r29
 852:	00 d0       	rcall	.+0      	; 0x854 <TWI_MasterReadDataByte+0x6>
 854:	0f 92       	push	r0
 856:	cd b7       	in	r28, 0x3d	; 61
 858:	de b7       	in	r29, 0x3e	; 62
 85a:	9b 83       	std	Y+3, r25	; 0x03
 85c:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorStatus Local_ErrorState = NoError;
 85e:	19 82       	std	Y+1, r1	; 0x01

	/*Enable master generating ack bit*/
	SET_BIT(TWCR,TWCR_TWEA);
 860:	86 e5       	ldi	r24, 0x56	; 86
 862:	90 e0       	ldi	r25, 0x00	; 0
 864:	fc 01       	movw	r30, r24
 866:	20 81       	ld	r18, Z
 868:	86 e5       	ldi	r24, 0x56	; 86
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	20 64       	ori	r18, 0x40	; 64
 86e:	fc 01       	movw	r30, r24
 870:	20 83       	st	Z, r18

	/*CLear the interrupt flag to start the slave sending data*/
	SET_BIT(TWCR,TWCR_TWINT);
 872:	86 e5       	ldi	r24, 0x56	; 86
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	fc 01       	movw	r30, r24
 878:	20 81       	ld	r18, Z
 87a:	86 e5       	ldi	r24, 0x56	; 86
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	20 68       	ori	r18, 0x80	; 128
 880:	fc 01       	movw	r30, r24
 882:	20 83       	st	Z, r18

	/*Wait until the interrupt flag is raised again and the previous operation is complete*/
	while(GET_BIT(TWCR,TWCR_TWINT) == 0);
 884:	00 00       	nop
 886:	86 e5       	ldi	r24, 0x56	; 86
 888:	90 e0       	ldi	r25, 0x00	; 0
 88a:	fc 01       	movw	r30, r24
 88c:	80 81       	ld	r24, Z
 88e:	88 1f       	adc	r24, r24
 890:	88 27       	eor	r24, r24
 892:	88 1f       	adc	r24, r24
 894:	88 2f       	mov	r24, r24
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	81 70       	andi	r24, 0x01	; 1
 89a:	99 27       	eor	r25, r25
 89c:	89 2b       	or	r24, r25
 89e:	99 f3       	breq	.-26     	; 0x886 <__stack+0x27>

	/*Check on the operation status in the status register*/
	if( (TWSR & 1111000) != MSTR_RD_BYTE_WITH_ACK)
 8a0:	81 e2       	ldi	r24, 0x21	; 33
 8a2:	90 e0       	ldi	r25, 0x00	; 0
 8a4:	fc 01       	movw	r30, r24
 8a6:	80 81       	ld	r24, Z
 8a8:	88 2f       	mov	r24, r24
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	a0 e0       	ldi	r26, 0x00	; 0
 8ae:	b0 e0       	ldi	r27, 0x00	; 0
 8b0:	88 7d       	andi	r24, 0xD8	; 216
 8b2:	93 7f       	andi	r25, 0xF3	; 243
 8b4:	a0 71       	andi	r26, 0x10	; 16
 8b6:	bb 27       	eor	r27, r27
 8b8:	80 35       	cpi	r24, 0x50	; 80
 8ba:	91 05       	cpc	r25, r1
 8bc:	a1 05       	cpc	r26, r1
 8be:	b1 05       	cpc	r27, r1
 8c0:	19 f0       	breq	.+6      	; 0x8c8 <__stack+0x69>
	{
		Local_ErrorState = MasterReadByteErr;
 8c2:	86 e0       	ldi	r24, 0x06	; 6
 8c4:	89 83       	std	Y+1, r24	; 0x01
 8c6:	08 c0       	rjmp	.+16     	; 0x8d8 <__stack+0x79>
	}
	else
	{
		/*Read the receiving data*/
		*Copy_pu8DataByte = TWDR;
 8c8:	83 e2       	ldi	r24, 0x23	; 35
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	fc 01       	movw	r30, r24
 8ce:	20 81       	ld	r18, Z
 8d0:	8a 81       	ldd	r24, Y+2	; 0x02
 8d2:	9b 81       	ldd	r25, Y+3	; 0x03
 8d4:	fc 01       	movw	r30, r24
 8d6:	20 83       	st	Z, r18
	}

	return Local_ErrorState;
 8d8:	89 81       	ldd	r24, Y+1	; 0x01
}
 8da:	0f 90       	pop	r0
 8dc:	0f 90       	pop	r0
 8de:	0f 90       	pop	r0
 8e0:	df 91       	pop	r29
 8e2:	cf 91       	pop	r28
 8e4:	08 95       	ret

000008e6 <TWI_SendStopCondition>:


void TWI_SendStopCondition(void)
{
 8e6:	cf 93       	push	r28
 8e8:	df 93       	push	r29
 8ea:	cd b7       	in	r28, 0x3d	; 61
 8ec:	de b7       	in	r29, 0x3e	; 62
	/*Generate stop condition on the bus*/
	SET_BIT(TWCR,TWCR_TWSTO);
 8ee:	86 e5       	ldi	r24, 0x56	; 86
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	fc 01       	movw	r30, r24
 8f4:	20 81       	ld	r18, Z
 8f6:	86 e5       	ldi	r24, 0x56	; 86
 8f8:	90 e0       	ldi	r25, 0x00	; 0
 8fa:	20 61       	ori	r18, 0x10	; 16
 8fc:	fc 01       	movw	r30, r24
 8fe:	20 83       	st	Z, r18

	/*CLear the interrupt flag to start the slave sending data*/
	CLR_BIT(TWCR,TWCR_TWINT);
 900:	86 e5       	ldi	r24, 0x56	; 86
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	fc 01       	movw	r30, r24
 906:	20 81       	ld	r18, Z
 908:	86 e5       	ldi	r24, 0x56	; 86
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	2f 77       	andi	r18, 0x7F	; 127
 90e:	fc 01       	movw	r30, r24
 910:	20 83       	st	Z, r18

}
 912:	00 00       	nop
 914:	df 91       	pop	r29
 916:	cf 91       	pop	r28
 918:	08 95       	ret

0000091a <main>:
#include "EEPROM_interface.h"

#include "util/delay.h"

void main(void)
{
 91a:	cf 93       	push	r28
 91c:	df 93       	push	r29
 91e:	cd b7       	in	r28, 0x3d	; 61
 920:	de b7       	in	r29, 0x3e	; 62
 922:	a3 97       	sbiw	r28, 0x23	; 35
 924:	0f b6       	in	r0, 0x3f	; 63
 926:	f8 94       	cli
 928:	de bf       	out	0x3e, r29	; 62
 92a:	0f be       	out	0x3f, r0	; 63
 92c:	cd bf       	out	0x3d, r28	; 61
	u8 App_u8Var;

	PORT_voidInit();
 92e:	0e 94 5d 02 	call	0x4ba	; 0x4ba <PORT_voidInit>
	TWI_voidMasterInit(0);
 932:	80 e0       	ldi	r24, 0x00	; 0
 934:	0e 94 87 02 	call	0x50e	; 0x50e <TWI_voidMasterInit>

	EEPROM_voidSendDataByte(0,0x44);
 938:	64 e4       	ldi	r22, 0x44	; 68
 93a:	80 e0       	ldi	r24, 0x00	; 0
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	0e 94 0f 02 	call	0x41e	; 0x41e <EEPROM_voidSendDataByte>
 942:	80 e0       	ldi	r24, 0x00	; 0
 944:	90 e0       	ldi	r25, 0x00	; 0
 946:	a0 e2       	ldi	r26, 0x20	; 32
 948:	b1 e4       	ldi	r27, 0x41	; 65
 94a:	89 83       	std	Y+1, r24	; 0x01
 94c:	9a 83       	std	Y+2, r25	; 0x02
 94e:	ab 83       	std	Y+3, r26	; 0x03
 950:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 952:	20 e0       	ldi	r18, 0x00	; 0
 954:	30 e0       	ldi	r19, 0x00	; 0
 956:	4a ef       	ldi	r20, 0xFA	; 250
 958:	54 e4       	ldi	r21, 0x44	; 68
 95a:	69 81       	ldd	r22, Y+1	; 0x01
 95c:	7a 81       	ldd	r23, Y+2	; 0x02
 95e:	8b 81       	ldd	r24, Y+3	; 0x03
 960:	9c 81       	ldd	r25, Y+4	; 0x04
 962:	0e 94 c2 05 	call	0xb84	; 0xb84 <__mulsf3>
 966:	6c 8b       	std	Y+20, r22	; 0x14
 968:	7d 8b       	std	Y+21, r23	; 0x15
 96a:	8e 8b       	std	Y+22, r24	; 0x16
 96c:	9f 8b       	std	Y+23, r25	; 0x17
 96e:	8c 89       	ldd	r24, Y+20	; 0x14
 970:	9d 89       	ldd	r25, Y+21	; 0x15
 972:	ae 89       	ldd	r26, Y+22	; 0x16
 974:	bf 89       	ldd	r27, Y+23	; 0x17
 976:	8d 83       	std	Y+5, r24	; 0x05
 978:	9e 83       	std	Y+6, r25	; 0x06
 97a:	af 83       	std	Y+7, r26	; 0x07
 97c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 97e:	20 e0       	ldi	r18, 0x00	; 0
 980:	30 e0       	ldi	r19, 0x00	; 0
 982:	40 e8       	ldi	r20, 0x80	; 128
 984:	5f e3       	ldi	r21, 0x3F	; 63
 986:	6d 81       	ldd	r22, Y+5	; 0x05
 988:	7e 81       	ldd	r23, Y+6	; 0x06
 98a:	8f 81       	ldd	r24, Y+7	; 0x07
 98c:	98 85       	ldd	r25, Y+8	; 0x08
 98e:	0e 94 3c 05 	call	0xa78	; 0xa78 <__cmpsf2>
 992:	88 23       	and	r24, r24
 994:	2c f4       	brge	.+10     	; 0x9a0 <main+0x86>
		__ticks = 1;
 996:	81 e0       	ldi	r24, 0x01	; 1
 998:	90 e0       	ldi	r25, 0x00	; 0
 99a:	9a 87       	std	Y+10, r25	; 0x0a
 99c:	89 87       	std	Y+9, r24	; 0x09
 99e:	54 c0       	rjmp	.+168    	; 0xa48 <main+0x12e>
	else if (__tmp > 65535)
 9a0:	20 e0       	ldi	r18, 0x00	; 0
 9a2:	3f ef       	ldi	r19, 0xFF	; 255
 9a4:	4f e7       	ldi	r20, 0x7F	; 127
 9a6:	57 e4       	ldi	r21, 0x47	; 71
 9a8:	6d 81       	ldd	r22, Y+5	; 0x05
 9aa:	7e 81       	ldd	r23, Y+6	; 0x06
 9ac:	8f 81       	ldd	r24, Y+7	; 0x07
 9ae:	98 85       	ldd	r25, Y+8	; 0x08
 9b0:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__gesf2>
 9b4:	18 16       	cp	r1, r24
 9b6:	d4 f5       	brge	.+116    	; 0xa2c <main+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 9b8:	20 e0       	ldi	r18, 0x00	; 0
 9ba:	30 e0       	ldi	r19, 0x00	; 0
 9bc:	40 e2       	ldi	r20, 0x20	; 32
 9be:	51 e4       	ldi	r21, 0x41	; 65
 9c0:	69 81       	ldd	r22, Y+1	; 0x01
 9c2:	7a 81       	ldd	r23, Y+2	; 0x02
 9c4:	8b 81       	ldd	r24, Y+3	; 0x03
 9c6:	9c 81       	ldd	r25, Y+4	; 0x04
 9c8:	0e 94 c2 05 	call	0xb84	; 0xb84 <__mulsf3>
 9cc:	68 8f       	std	Y+24, r22	; 0x18
 9ce:	79 8f       	std	Y+25, r23	; 0x19
 9d0:	8a 8f       	std	Y+26, r24	; 0x1a
 9d2:	9b 8f       	std	Y+27, r25	; 0x1b
 9d4:	88 8d       	ldd	r24, Y+24	; 0x18
 9d6:	99 8d       	ldd	r25, Y+25	; 0x19
 9d8:	aa 8d       	ldd	r26, Y+26	; 0x1a
 9da:	bb 8d       	ldd	r27, Y+27	; 0x1b
 9dc:	88 8b       	std	Y+16, r24	; 0x10
 9de:	99 8b       	std	Y+17, r25	; 0x11
 9e0:	aa 8b       	std	Y+18, r26	; 0x12
 9e2:	bb 8b       	std	Y+19, r27	; 0x13
 9e4:	68 89       	ldd	r22, Y+16	; 0x10
 9e6:	79 89       	ldd	r23, Y+17	; 0x11
 9e8:	8a 89       	ldd	r24, Y+18	; 0x12
 9ea:	9b 89       	ldd	r25, Y+19	; 0x13
 9ec:	0e 94 41 05 	call	0xa82	; 0xa82 <__fixunssfsi>
 9f0:	6c 8f       	std	Y+28, r22	; 0x1c
 9f2:	7d 8f       	std	Y+29, r23	; 0x1d
 9f4:	8e 8f       	std	Y+30, r24	; 0x1e
 9f6:	9f 8f       	std	Y+31, r25	; 0x1f
 9f8:	ac 8d       	ldd	r26, Y+28	; 0x1c
 9fa:	bd 8d       	ldd	r27, Y+29	; 0x1d
 9fc:	ba 87       	std	Y+10, r27	; 0x0a
 9fe:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
 a00:	10 c0       	rjmp	.+32     	; 0xa22 <main+0x108>
 a02:	88 ec       	ldi	r24, 0xC8	; 200
 a04:	90 e0       	ldi	r25, 0x00	; 0
 a06:	9c 87       	std	Y+12, r25	; 0x0c
 a08:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 a0a:	8b 85       	ldd	r24, Y+11	; 0x0b
 a0c:	9c 85       	ldd	r25, Y+12	; 0x0c
 a0e:	01 97       	sbiw	r24, 0x01	; 1
 a10:	f1 f7       	brne	.-4      	; 0xa0e <main+0xf4>
 a12:	9c 87       	std	Y+12, r25	; 0x0c
 a14:	8b 87       	std	Y+11, r24	; 0x0b
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 a16:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 a18:	89 85       	ldd	r24, Y+9	; 0x09
 a1a:	9a 85       	ldd	r25, Y+10	; 0x0a
 a1c:	01 97       	sbiw	r24, 0x01	; 1
 a1e:	9a 87       	std	Y+10, r25	; 0x0a
 a20:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 a22:	89 85       	ldd	r24, Y+9	; 0x09
 a24:	9a 85       	ldd	r25, Y+10	; 0x0a
 a26:	89 2b       	or	r24, r25
 a28:	61 f7       	brne	.-40     	; 0xa02 <main+0xe8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
 a2a:	19 c0       	rjmp	.+50     	; 0xa5e <main+0x144>
	}
	else
		__ticks = (uint16_t)__tmp;
 a2c:	6d 81       	ldd	r22, Y+5	; 0x05
 a2e:	7e 81       	ldd	r23, Y+6	; 0x06
 a30:	8f 81       	ldd	r24, Y+7	; 0x07
 a32:	98 85       	ldd	r25, Y+8	; 0x08
 a34:	0e 94 41 05 	call	0xa82	; 0xa82 <__fixunssfsi>
 a38:	68 a3       	std	Y+32, r22	; 0x20
 a3a:	79 a3       	std	Y+33, r23	; 0x21
 a3c:	8a a3       	std	Y+34, r24	; 0x22
 a3e:	9b a3       	std	Y+35, r25	; 0x23
 a40:	88 a1       	ldd	r24, Y+32	; 0x20
 a42:	99 a1       	ldd	r25, Y+33	; 0x21
 a44:	9a 87       	std	Y+10, r25	; 0x0a
 a46:	89 87       	std	Y+9, r24	; 0x09
 a48:	89 85       	ldd	r24, Y+9	; 0x09
 a4a:	9a 85       	ldd	r25, Y+10	; 0x0a
 a4c:	9e 87       	std	Y+14, r25	; 0x0e
 a4e:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 a50:	8d 85       	ldd	r24, Y+13	; 0x0d
 a52:	9e 85       	ldd	r25, Y+14	; 0x0e
 a54:	01 97       	sbiw	r24, 0x01	; 1
 a56:	f1 f7       	brne	.-4      	; 0xa54 <main+0x13a>
 a58:	9e 87       	std	Y+14, r25	; 0x0e
 a5a:	8d 87       	std	Y+13, r24	; 0x0d
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 a5c:	00 00       	nop
	_delay_ms(10);
	EEPROM_voidReadDataByte(0,&App_u8Var);
 a5e:	ce 01       	movw	r24, r28
 a60:	0f 96       	adiw	r24, 0x0f	; 15
 a62:	bc 01       	movw	r22, r24
 a64:	80 e0       	ldi	r24, 0x00	; 0
 a66:	90 e0       	ldi	r25, 0x00	; 0
 a68:	0e 94 30 02 	call	0x460	; 0x460 <EEPROM_voidReadDataByte>
	DIO_u8SetPortValue(DIO_u8PORTA,App_u8Var);
 a6c:	8f 85       	ldd	r24, Y+15	; 0x0f
 a6e:	68 2f       	mov	r22, r24
 a70:	80 e0       	ldi	r24, 0x00	; 0
 a72:	0e 94 41 01 	call	0x282	; 0x282 <DIO_u8SetPortValue>

	while(1)
 a76:	ff cf       	rjmp	.-2      	; 0xa76 <main+0x15c>

00000a78 <__cmpsf2>:
 a78:	0e 94 70 05 	call	0xae0	; 0xae0 <__fp_cmp>
 a7c:	08 f4       	brcc	.+2      	; 0xa80 <__cmpsf2+0x8>
 a7e:	81 e0       	ldi	r24, 0x01	; 1
 a80:	08 95       	ret

00000a82 <__fixunssfsi>:
 a82:	0e 94 9c 05 	call	0xb38	; 0xb38 <__fp_splitA>
 a86:	88 f0       	brcs	.+34     	; 0xaaa <__fixunssfsi+0x28>
 a88:	9f 57       	subi	r25, 0x7F	; 127
 a8a:	98 f0       	brcs	.+38     	; 0xab2 <__fixunssfsi+0x30>
 a8c:	b9 2f       	mov	r27, r25
 a8e:	99 27       	eor	r25, r25
 a90:	b7 51       	subi	r27, 0x17	; 23
 a92:	b0 f0       	brcs	.+44     	; 0xac0 <__fixunssfsi+0x3e>
 a94:	e1 f0       	breq	.+56     	; 0xace <__fixunssfsi+0x4c>
 a96:	66 0f       	add	r22, r22
 a98:	77 1f       	adc	r23, r23
 a9a:	88 1f       	adc	r24, r24
 a9c:	99 1f       	adc	r25, r25
 a9e:	1a f0       	brmi	.+6      	; 0xaa6 <__fixunssfsi+0x24>
 aa0:	ba 95       	dec	r27
 aa2:	c9 f7       	brne	.-14     	; 0xa96 <__fixunssfsi+0x14>
 aa4:	14 c0       	rjmp	.+40     	; 0xace <__fixunssfsi+0x4c>
 aa6:	b1 30       	cpi	r27, 0x01	; 1
 aa8:	91 f0       	breq	.+36     	; 0xace <__fixunssfsi+0x4c>
 aaa:	0e 94 b6 05 	call	0xb6c	; 0xb6c <__fp_zero>
 aae:	b1 e0       	ldi	r27, 0x01	; 1
 ab0:	08 95       	ret
 ab2:	0c 94 b6 05 	jmp	0xb6c	; 0xb6c <__fp_zero>
 ab6:	67 2f       	mov	r22, r23
 ab8:	78 2f       	mov	r23, r24
 aba:	88 27       	eor	r24, r24
 abc:	b8 5f       	subi	r27, 0xF8	; 248
 abe:	39 f0       	breq	.+14     	; 0xace <__fixunssfsi+0x4c>
 ac0:	b9 3f       	cpi	r27, 0xF9	; 249
 ac2:	cc f3       	brlt	.-14     	; 0xab6 <__fixunssfsi+0x34>
 ac4:	86 95       	lsr	r24
 ac6:	77 95       	ror	r23
 ac8:	67 95       	ror	r22
 aca:	b3 95       	inc	r27
 acc:	d9 f7       	brne	.-10     	; 0xac4 <__fixunssfsi+0x42>
 ace:	3e f4       	brtc	.+14     	; 0xade <__fixunssfsi+0x5c>
 ad0:	90 95       	com	r25
 ad2:	80 95       	com	r24
 ad4:	70 95       	com	r23
 ad6:	61 95       	neg	r22
 ad8:	7f 4f       	sbci	r23, 0xFF	; 255
 ada:	8f 4f       	sbci	r24, 0xFF	; 255
 adc:	9f 4f       	sbci	r25, 0xFF	; 255
 ade:	08 95       	ret

00000ae0 <__fp_cmp>:
 ae0:	99 0f       	add	r25, r25
 ae2:	00 08       	sbc	r0, r0
 ae4:	55 0f       	add	r21, r21
 ae6:	aa 0b       	sbc	r26, r26
 ae8:	e0 e8       	ldi	r30, 0x80	; 128
 aea:	fe ef       	ldi	r31, 0xFE	; 254
 aec:	16 16       	cp	r1, r22
 aee:	17 06       	cpc	r1, r23
 af0:	e8 07       	cpc	r30, r24
 af2:	f9 07       	cpc	r31, r25
 af4:	c0 f0       	brcs	.+48     	; 0xb26 <__fp_cmp+0x46>
 af6:	12 16       	cp	r1, r18
 af8:	13 06       	cpc	r1, r19
 afa:	e4 07       	cpc	r30, r20
 afc:	f5 07       	cpc	r31, r21
 afe:	98 f0       	brcs	.+38     	; 0xb26 <__fp_cmp+0x46>
 b00:	62 1b       	sub	r22, r18
 b02:	73 0b       	sbc	r23, r19
 b04:	84 0b       	sbc	r24, r20
 b06:	95 0b       	sbc	r25, r21
 b08:	39 f4       	brne	.+14     	; 0xb18 <__fp_cmp+0x38>
 b0a:	0a 26       	eor	r0, r26
 b0c:	61 f0       	breq	.+24     	; 0xb26 <__fp_cmp+0x46>
 b0e:	23 2b       	or	r18, r19
 b10:	24 2b       	or	r18, r20
 b12:	25 2b       	or	r18, r21
 b14:	21 f4       	brne	.+8      	; 0xb1e <__fp_cmp+0x3e>
 b16:	08 95       	ret
 b18:	0a 26       	eor	r0, r26
 b1a:	09 f4       	brne	.+2      	; 0xb1e <__fp_cmp+0x3e>
 b1c:	a1 40       	sbci	r26, 0x01	; 1
 b1e:	a6 95       	lsr	r26
 b20:	8f ef       	ldi	r24, 0xFF	; 255
 b22:	81 1d       	adc	r24, r1
 b24:	81 1d       	adc	r24, r1
 b26:	08 95       	ret

00000b28 <__fp_split3>:
 b28:	57 fd       	sbrc	r21, 7
 b2a:	90 58       	subi	r25, 0x80	; 128
 b2c:	44 0f       	add	r20, r20
 b2e:	55 1f       	adc	r21, r21
 b30:	59 f0       	breq	.+22     	; 0xb48 <__fp_splitA+0x10>
 b32:	5f 3f       	cpi	r21, 0xFF	; 255
 b34:	71 f0       	breq	.+28     	; 0xb52 <__fp_splitA+0x1a>
 b36:	47 95       	ror	r20

00000b38 <__fp_splitA>:
 b38:	88 0f       	add	r24, r24
 b3a:	97 fb       	bst	r25, 7
 b3c:	99 1f       	adc	r25, r25
 b3e:	61 f0       	breq	.+24     	; 0xb58 <__fp_splitA+0x20>
 b40:	9f 3f       	cpi	r25, 0xFF	; 255
 b42:	79 f0       	breq	.+30     	; 0xb62 <__fp_splitA+0x2a>
 b44:	87 95       	ror	r24
 b46:	08 95       	ret
 b48:	12 16       	cp	r1, r18
 b4a:	13 06       	cpc	r1, r19
 b4c:	14 06       	cpc	r1, r20
 b4e:	55 1f       	adc	r21, r21
 b50:	f2 cf       	rjmp	.-28     	; 0xb36 <__fp_split3+0xe>
 b52:	46 95       	lsr	r20
 b54:	f1 df       	rcall	.-30     	; 0xb38 <__fp_splitA>
 b56:	08 c0       	rjmp	.+16     	; 0xb68 <__fp_splitA+0x30>
 b58:	16 16       	cp	r1, r22
 b5a:	17 06       	cpc	r1, r23
 b5c:	18 06       	cpc	r1, r24
 b5e:	99 1f       	adc	r25, r25
 b60:	f1 cf       	rjmp	.-30     	; 0xb44 <__fp_splitA+0xc>
 b62:	86 95       	lsr	r24
 b64:	71 05       	cpc	r23, r1
 b66:	61 05       	cpc	r22, r1
 b68:	08 94       	sec
 b6a:	08 95       	ret

00000b6c <__fp_zero>:
 b6c:	e8 94       	clt

00000b6e <__fp_szero>:
 b6e:	bb 27       	eor	r27, r27
 b70:	66 27       	eor	r22, r22
 b72:	77 27       	eor	r23, r23
 b74:	cb 01       	movw	r24, r22
 b76:	97 f9       	bld	r25, 7
 b78:	08 95       	ret

00000b7a <__gesf2>:
 b7a:	0e 94 70 05 	call	0xae0	; 0xae0 <__fp_cmp>
 b7e:	08 f4       	brcc	.+2      	; 0xb82 <__gesf2+0x8>
 b80:	8f ef       	ldi	r24, 0xFF	; 255
 b82:	08 95       	ret

00000b84 <__mulsf3>:
 b84:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__mulsf3x>
 b88:	0c 94 46 06 	jmp	0xc8c	; 0xc8c <__fp_round>
 b8c:	0e 94 38 06 	call	0xc70	; 0xc70 <__fp_pscA>
 b90:	38 f0       	brcs	.+14     	; 0xba0 <__mulsf3+0x1c>
 b92:	0e 94 3f 06 	call	0xc7e	; 0xc7e <__fp_pscB>
 b96:	20 f0       	brcs	.+8      	; 0xba0 <__mulsf3+0x1c>
 b98:	95 23       	and	r25, r21
 b9a:	11 f0       	breq	.+4      	; 0xba0 <__mulsf3+0x1c>
 b9c:	0c 94 2f 06 	jmp	0xc5e	; 0xc5e <__fp_inf>
 ba0:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__fp_nan>
 ba4:	11 24       	eor	r1, r1
 ba6:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__fp_szero>

00000baa <__mulsf3x>:
 baa:	0e 94 94 05 	call	0xb28	; 0xb28 <__fp_split3>
 bae:	70 f3       	brcs	.-36     	; 0xb8c <__mulsf3+0x8>

00000bb0 <__mulsf3_pse>:
 bb0:	95 9f       	mul	r25, r21
 bb2:	c1 f3       	breq	.-16     	; 0xba4 <__mulsf3+0x20>
 bb4:	95 0f       	add	r25, r21
 bb6:	50 e0       	ldi	r21, 0x00	; 0
 bb8:	55 1f       	adc	r21, r21
 bba:	62 9f       	mul	r22, r18
 bbc:	f0 01       	movw	r30, r0
 bbe:	72 9f       	mul	r23, r18
 bc0:	bb 27       	eor	r27, r27
 bc2:	f0 0d       	add	r31, r0
 bc4:	b1 1d       	adc	r27, r1
 bc6:	63 9f       	mul	r22, r19
 bc8:	aa 27       	eor	r26, r26
 bca:	f0 0d       	add	r31, r0
 bcc:	b1 1d       	adc	r27, r1
 bce:	aa 1f       	adc	r26, r26
 bd0:	64 9f       	mul	r22, r20
 bd2:	66 27       	eor	r22, r22
 bd4:	b0 0d       	add	r27, r0
 bd6:	a1 1d       	adc	r26, r1
 bd8:	66 1f       	adc	r22, r22
 bda:	82 9f       	mul	r24, r18
 bdc:	22 27       	eor	r18, r18
 bde:	b0 0d       	add	r27, r0
 be0:	a1 1d       	adc	r26, r1
 be2:	62 1f       	adc	r22, r18
 be4:	73 9f       	mul	r23, r19
 be6:	b0 0d       	add	r27, r0
 be8:	a1 1d       	adc	r26, r1
 bea:	62 1f       	adc	r22, r18
 bec:	83 9f       	mul	r24, r19
 bee:	a0 0d       	add	r26, r0
 bf0:	61 1d       	adc	r22, r1
 bf2:	22 1f       	adc	r18, r18
 bf4:	74 9f       	mul	r23, r20
 bf6:	33 27       	eor	r19, r19
 bf8:	a0 0d       	add	r26, r0
 bfa:	61 1d       	adc	r22, r1
 bfc:	23 1f       	adc	r18, r19
 bfe:	84 9f       	mul	r24, r20
 c00:	60 0d       	add	r22, r0
 c02:	21 1d       	adc	r18, r1
 c04:	82 2f       	mov	r24, r18
 c06:	76 2f       	mov	r23, r22
 c08:	6a 2f       	mov	r22, r26
 c0a:	11 24       	eor	r1, r1
 c0c:	9f 57       	subi	r25, 0x7F	; 127
 c0e:	50 40       	sbci	r21, 0x00	; 0
 c10:	9a f0       	brmi	.+38     	; 0xc38 <__mulsf3_pse+0x88>
 c12:	f1 f0       	breq	.+60     	; 0xc50 <__mulsf3_pse+0xa0>
 c14:	88 23       	and	r24, r24
 c16:	4a f0       	brmi	.+18     	; 0xc2a <__mulsf3_pse+0x7a>
 c18:	ee 0f       	add	r30, r30
 c1a:	ff 1f       	adc	r31, r31
 c1c:	bb 1f       	adc	r27, r27
 c1e:	66 1f       	adc	r22, r22
 c20:	77 1f       	adc	r23, r23
 c22:	88 1f       	adc	r24, r24
 c24:	91 50       	subi	r25, 0x01	; 1
 c26:	50 40       	sbci	r21, 0x00	; 0
 c28:	a9 f7       	brne	.-22     	; 0xc14 <__mulsf3_pse+0x64>
 c2a:	9e 3f       	cpi	r25, 0xFE	; 254
 c2c:	51 05       	cpc	r21, r1
 c2e:	80 f0       	brcs	.+32     	; 0xc50 <__mulsf3_pse+0xa0>
 c30:	0c 94 2f 06 	jmp	0xc5e	; 0xc5e <__fp_inf>
 c34:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__fp_szero>
 c38:	5f 3f       	cpi	r21, 0xFF	; 255
 c3a:	e4 f3       	brlt	.-8      	; 0xc34 <__mulsf3_pse+0x84>
 c3c:	98 3e       	cpi	r25, 0xE8	; 232
 c3e:	d4 f3       	brlt	.-12     	; 0xc34 <__mulsf3_pse+0x84>
 c40:	86 95       	lsr	r24
 c42:	77 95       	ror	r23
 c44:	67 95       	ror	r22
 c46:	b7 95       	ror	r27
 c48:	f7 95       	ror	r31
 c4a:	e7 95       	ror	r30
 c4c:	9f 5f       	subi	r25, 0xFF	; 255
 c4e:	c1 f7       	brne	.-16     	; 0xc40 <__mulsf3_pse+0x90>
 c50:	fe 2b       	or	r31, r30
 c52:	88 0f       	add	r24, r24
 c54:	91 1d       	adc	r25, r1
 c56:	96 95       	lsr	r25
 c58:	87 95       	ror	r24
 c5a:	97 f9       	bld	r25, 7
 c5c:	08 95       	ret

00000c5e <__fp_inf>:
 c5e:	97 f9       	bld	r25, 7
 c60:	9f 67       	ori	r25, 0x7F	; 127
 c62:	80 e8       	ldi	r24, 0x80	; 128
 c64:	70 e0       	ldi	r23, 0x00	; 0
 c66:	60 e0       	ldi	r22, 0x00	; 0
 c68:	08 95       	ret

00000c6a <__fp_nan>:
 c6a:	9f ef       	ldi	r25, 0xFF	; 255
 c6c:	80 ec       	ldi	r24, 0xC0	; 192
 c6e:	08 95       	ret

00000c70 <__fp_pscA>:
 c70:	00 24       	eor	r0, r0
 c72:	0a 94       	dec	r0
 c74:	16 16       	cp	r1, r22
 c76:	17 06       	cpc	r1, r23
 c78:	18 06       	cpc	r1, r24
 c7a:	09 06       	cpc	r0, r25
 c7c:	08 95       	ret

00000c7e <__fp_pscB>:
 c7e:	00 24       	eor	r0, r0
 c80:	0a 94       	dec	r0
 c82:	12 16       	cp	r1, r18
 c84:	13 06       	cpc	r1, r19
 c86:	14 06       	cpc	r1, r20
 c88:	05 06       	cpc	r0, r21
 c8a:	08 95       	ret

00000c8c <__fp_round>:
 c8c:	09 2e       	mov	r0, r25
 c8e:	03 94       	inc	r0
 c90:	00 0c       	add	r0, r0
 c92:	11 f4       	brne	.+4      	; 0xc98 <__fp_round+0xc>
 c94:	88 23       	and	r24, r24
 c96:	52 f0       	brmi	.+20     	; 0xcac <__fp_round+0x20>
 c98:	bb 0f       	add	r27, r27
 c9a:	40 f4       	brcc	.+16     	; 0xcac <__fp_round+0x20>
 c9c:	bf 2b       	or	r27, r31
 c9e:	11 f4       	brne	.+4      	; 0xca4 <__fp_round+0x18>
 ca0:	60 ff       	sbrs	r22, 0
 ca2:	04 c0       	rjmp	.+8      	; 0xcac <__fp_round+0x20>
 ca4:	6f 5f       	subi	r22, 0xFF	; 255
 ca6:	7f 4f       	sbci	r23, 0xFF	; 255
 ca8:	8f 4f       	sbci	r24, 0xFF	; 255
 caa:	9f 4f       	sbci	r25, 0xFF	; 255
 cac:	08 95       	ret

00000cae <_exit>:
 cae:	f8 94       	cli

00000cb0 <__stop_program>:
 cb0:	ff cf       	rjmp	.-2      	; 0xcb0 <__stop_program>
