
SWC_SSD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ce0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000ce0  00000d54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000015a8  00000000  00000000  00000d64  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000fe3  00000000  00000000  0000230c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  000032ef  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003300  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000040  00000000  00000000  00003340  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000532  00000000  00000000  00003380  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004cb  00000000  00000000  000038b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000115  00000000  00000000  00003d7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001f4  00000000  00000000  00003e92  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ee       	ldi	r30, 0xE0	; 224
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 ed 03 	call	0x7da	; 0x7da <main>
  7a:	0c 94 6e 06 	jmp	0xcdc	; 0xcdc <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_u8SetPinDirection>:




u8 DIO_u8SetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Direction)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	00 d0       	rcall	.+0      	; 0x88 <DIO_u8SetPinDirection+0x6>
  88:	00 d0       	rcall	.+0      	; 0x8a <DIO_u8SetPinDirection+0x8>
  8a:	0f 92       	push	r0
  8c:	cd b7       	in	r28, 0x3d	; 61
  8e:	de b7       	in	r29, 0x3e	; 62
  90:	8b 83       	std	Y+3, r24	; 0x03
  92:	6c 83       	std	Y+4, r22	; 0x04
  94:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState=0;
  96:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7)
  98:	8c 81       	ldd	r24, Y+4	; 0x04
  9a:	88 30       	cpi	r24, 0x08	; 8
  9c:	08 f0       	brcs	.+2      	; 0xa0 <DIO_u8SetPinDirection+0x1e>
  9e:	f3 c0       	rjmp	.+486    	; 0x286 <DIO_u8SetPinDirection+0x204>
	{
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
  a0:	8d 81       	ldd	r24, Y+5	; 0x05
  a2:	88 23       	and	r24, r24
  a4:	09 f0       	breq	.+2      	; 0xa8 <DIO_u8SetPinDirection+0x26>
  a6:	76 c0       	rjmp	.+236    	; 0x194 <DIO_u8SetPinDirection+0x112>
		{
			switch(Copy_u8Port)
  a8:	8b 81       	ldd	r24, Y+3	; 0x03
  aa:	88 2f       	mov	r24, r24
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	84 30       	cpi	r24, 0x04	; 4
  b0:	91 05       	cpc	r25, r1
  b2:	09 f4       	brne	.+2      	; 0xb6 <DIO_u8SetPinDirection+0x34>
  b4:	55 c0       	rjmp	.+170    	; 0x160 <DIO_u8SetPinDirection+0xde>
  b6:	85 30       	cpi	r24, 0x05	; 5
  b8:	91 05       	cpc	r25, r1
  ba:	0c f0       	brlt	.+2      	; 0xbe <DIO_u8SetPinDirection+0x3c>
  bc:	68 c0       	rjmp	.+208    	; 0x18e <DIO_u8SetPinDirection+0x10c>
  be:	83 30       	cpi	r24, 0x03	; 3
  c0:	91 05       	cpc	r25, r1
  c2:	b9 f1       	breq	.+110    	; 0x132 <DIO_u8SetPinDirection+0xb0>
  c4:	84 30       	cpi	r24, 0x04	; 4
  c6:	91 05       	cpc	r25, r1
  c8:	0c f0       	brlt	.+2      	; 0xcc <DIO_u8SetPinDirection+0x4a>
  ca:	61 c0       	rjmp	.+194    	; 0x18e <DIO_u8SetPinDirection+0x10c>
  cc:	00 97       	sbiw	r24, 0x00	; 0
  ce:	19 f0       	breq	.+6      	; 0xd6 <DIO_u8SetPinDirection+0x54>
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	c1 f0       	breq	.+48     	; 0x104 <DIO_u8SetPinDirection+0x82>
  d4:	5c c0       	rjmp	.+184    	; 0x18e <DIO_u8SetPinDirection+0x10c>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
  d6:	8a e3       	ldi	r24, 0x3A	; 58
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	fc 01       	movw	r30, r24
  dc:	80 81       	ld	r24, Z
  de:	48 2f       	mov	r20, r24
  e0:	8c 81       	ldd	r24, Y+4	; 0x04
  e2:	28 2f       	mov	r18, r24
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <DIO_u8SetPinDirection+0x6e>
  ec:	88 0f       	add	r24, r24
  ee:	99 1f       	adc	r25, r25
  f0:	2a 95       	dec	r18
  f2:	e2 f7       	brpl	.-8      	; 0xec <DIO_u8SetPinDirection+0x6a>
  f4:	80 95       	com	r24
  f6:	24 2f       	mov	r18, r20
  f8:	28 23       	and	r18, r24
  fa:	8a e3       	ldi	r24, 0x3A	; 58
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	fc 01       	movw	r30, r24
 100:	20 83       	st	Z, r18
 102:	c3 c0       	rjmp	.+390    	; 0x28a <DIO_u8SetPinDirection+0x208>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
 104:	87 e3       	ldi	r24, 0x37	; 55
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	fc 01       	movw	r30, r24
 10a:	80 81       	ld	r24, Z
 10c:	48 2f       	mov	r20, r24
 10e:	8c 81       	ldd	r24, Y+4	; 0x04
 110:	28 2f       	mov	r18, r24
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_u8SetPinDirection+0x9c>
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	2a 95       	dec	r18
 120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_u8SetPinDirection+0x98>
 122:	80 95       	com	r24
 124:	24 2f       	mov	r18, r20
 126:	28 23       	and	r18, r24
 128:	87 e3       	ldi	r24, 0x37	; 55
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	fc 01       	movw	r30, r24
 12e:	20 83       	st	Z, r18
 130:	ac c0       	rjmp	.+344    	; 0x28a <DIO_u8SetPinDirection+0x208>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
 132:	84 e3       	ldi	r24, 0x34	; 52
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	fc 01       	movw	r30, r24
 138:	80 81       	ld	r24, Z
 13a:	48 2f       	mov	r20, r24
 13c:	8c 81       	ldd	r24, Y+4	; 0x04
 13e:	28 2f       	mov	r18, r24
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_u8SetPinDirection+0xca>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	2a 95       	dec	r18
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_u8SetPinDirection+0xc6>
 150:	80 95       	com	r24
 152:	24 2f       	mov	r18, r20
 154:	28 23       	and	r18, r24
 156:	84 e3       	ldi	r24, 0x34	; 52
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	fc 01       	movw	r30, r24
 15c:	20 83       	st	Z, r18
 15e:	95 c0       	rjmp	.+298    	; 0x28a <DIO_u8SetPinDirection+0x208>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
 160:	81 e3       	ldi	r24, 0x31	; 49
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	fc 01       	movw	r30, r24
 166:	80 81       	ld	r24, Z
 168:	48 2f       	mov	r20, r24
 16a:	8c 81       	ldd	r24, Y+4	; 0x04
 16c:	28 2f       	mov	r18, r24
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 c0       	rjmp	.+4      	; 0x17a <DIO_u8SetPinDirection+0xf8>
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	2a 95       	dec	r18
 17c:	e2 f7       	brpl	.-8      	; 0x176 <DIO_u8SetPinDirection+0xf4>
 17e:	80 95       	com	r24
 180:	24 2f       	mov	r18, r20
 182:	28 23       	and	r18, r24
 184:	81 e3       	ldi	r24, 0x31	; 49
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	fc 01       	movw	r30, r24
 18a:	20 83       	st	Z, r18
 18c:	7e c0       	rjmp	.+252    	; 0x28a <DIO_u8SetPinDirection+0x208>
			default:Local_u8ErrorState=1;  break;
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	89 83       	std	Y+1, r24	; 0x01
 192:	7b c0       	rjmp	.+246    	; 0x28a <DIO_u8SetPinDirection+0x208>
			}

		}
		else if(Copy_u8Direction==DIO_u8PIN_OUTPUT)
 194:	8d 81       	ldd	r24, Y+5	; 0x05
 196:	81 30       	cpi	r24, 0x01	; 1
 198:	09 f0       	breq	.+2      	; 0x19c <DIO_u8SetPinDirection+0x11a>
 19a:	72 c0       	rjmp	.+228    	; 0x280 <DIO_u8SetPinDirection+0x1fe>
		{
			switch(Copy_u8Port)
 19c:	8b 81       	ldd	r24, Y+3	; 0x03
 19e:	88 2f       	mov	r24, r24
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	84 30       	cpi	r24, 0x04	; 4
 1a4:	91 05       	cpc	r25, r1
 1a6:	09 f4       	brne	.+2      	; 0x1aa <DIO_u8SetPinDirection+0x128>
 1a8:	52 c0       	rjmp	.+164    	; 0x24e <DIO_u8SetPinDirection+0x1cc>
 1aa:	85 30       	cpi	r24, 0x05	; 5
 1ac:	91 05       	cpc	r25, r1
 1ae:	0c f0       	brlt	.+2      	; 0x1b2 <DIO_u8SetPinDirection+0x130>
 1b0:	64 c0       	rjmp	.+200    	; 0x27a <DIO_u8SetPinDirection+0x1f8>
 1b2:	83 30       	cpi	r24, 0x03	; 3
 1b4:	91 05       	cpc	r25, r1
 1b6:	a9 f1       	breq	.+106    	; 0x222 <DIO_u8SetPinDirection+0x1a0>
 1b8:	84 30       	cpi	r24, 0x04	; 4
 1ba:	91 05       	cpc	r25, r1
 1bc:	0c f0       	brlt	.+2      	; 0x1c0 <DIO_u8SetPinDirection+0x13e>
 1be:	5d c0       	rjmp	.+186    	; 0x27a <DIO_u8SetPinDirection+0x1f8>
 1c0:	00 97       	sbiw	r24, 0x00	; 0
 1c2:	19 f0       	breq	.+6      	; 0x1ca <DIO_u8SetPinDirection+0x148>
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	b9 f0       	breq	.+46     	; 0x1f6 <DIO_u8SetPinDirection+0x174>
 1c8:	58 c0       	rjmp	.+176    	; 0x27a <DIO_u8SetPinDirection+0x1f8>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
 1ca:	8a e3       	ldi	r24, 0x3A	; 58
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	fc 01       	movw	r30, r24
 1d0:	80 81       	ld	r24, Z
 1d2:	48 2f       	mov	r20, r24
 1d4:	8c 81       	ldd	r24, Y+4	; 0x04
 1d6:	28 2f       	mov	r18, r24
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_u8SetPinDirection+0x162>
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	2a 95       	dec	r18
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_u8SetPinDirection+0x15e>
 1e8:	24 2f       	mov	r18, r20
 1ea:	28 2b       	or	r18, r24
 1ec:	8a e3       	ldi	r24, 0x3A	; 58
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	fc 01       	movw	r30, r24
 1f2:	20 83       	st	Z, r18
 1f4:	4a c0       	rjmp	.+148    	; 0x28a <DIO_u8SetPinDirection+0x208>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
 1f6:	87 e3       	ldi	r24, 0x37	; 55
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	fc 01       	movw	r30, r24
 1fc:	80 81       	ld	r24, Z
 1fe:	48 2f       	mov	r20, r24
 200:	8c 81       	ldd	r24, Y+4	; 0x04
 202:	28 2f       	mov	r18, r24
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_u8SetPinDirection+0x18e>
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	2a 95       	dec	r18
 212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_u8SetPinDirection+0x18a>
 214:	24 2f       	mov	r18, r20
 216:	28 2b       	or	r18, r24
 218:	87 e3       	ldi	r24, 0x37	; 55
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	fc 01       	movw	r30, r24
 21e:	20 83       	st	Z, r18
 220:	34 c0       	rjmp	.+104    	; 0x28a <DIO_u8SetPinDirection+0x208>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
 222:	84 e3       	ldi	r24, 0x34	; 52
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	fc 01       	movw	r30, r24
 228:	80 81       	ld	r24, Z
 22a:	48 2f       	mov	r20, r24
 22c:	8c 81       	ldd	r24, Y+4	; 0x04
 22e:	28 2f       	mov	r18, r24
 230:	30 e0       	ldi	r19, 0x00	; 0
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	02 c0       	rjmp	.+4      	; 0x23c <DIO_u8SetPinDirection+0x1ba>
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	2a 95       	dec	r18
 23e:	e2 f7       	brpl	.-8      	; 0x238 <DIO_u8SetPinDirection+0x1b6>
 240:	24 2f       	mov	r18, r20
 242:	28 2b       	or	r18, r24
 244:	84 e3       	ldi	r24, 0x34	; 52
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	fc 01       	movw	r30, r24
 24a:	20 83       	st	Z, r18
 24c:	1e c0       	rjmp	.+60     	; 0x28a <DIO_u8SetPinDirection+0x208>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
 24e:	81 e3       	ldi	r24, 0x31	; 49
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	fc 01       	movw	r30, r24
 254:	80 81       	ld	r24, Z
 256:	48 2f       	mov	r20, r24
 258:	8c 81       	ldd	r24, Y+4	; 0x04
 25a:	28 2f       	mov	r18, r24
 25c:	30 e0       	ldi	r19, 0x00	; 0
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	02 c0       	rjmp	.+4      	; 0x268 <DIO_u8SetPinDirection+0x1e6>
 264:	88 0f       	add	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	2a 95       	dec	r18
 26a:	e2 f7       	brpl	.-8      	; 0x264 <DIO_u8SetPinDirection+0x1e2>
 26c:	24 2f       	mov	r18, r20
 26e:	28 2b       	or	r18, r24
 270:	81 e3       	ldi	r24, 0x31	; 49
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	fc 01       	movw	r30, r24
 276:	20 83       	st	Z, r18
 278:	08 c0       	rjmp	.+16     	; 0x28a <DIO_u8SetPinDirection+0x208>
			default: Local_u8ErrorState=1;  break;
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	89 83       	std	Y+1, r24	; 0x01
 27e:	05 c0       	rjmp	.+10     	; 0x28a <DIO_u8SetPinDirection+0x208>
			}

		}
		else
		{
			Local_u8ErrorState=1;
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	89 83       	std	Y+1, r24	; 0x01
 284:	02 c0       	rjmp	.+4      	; 0x28a <DIO_u8SetPinDirection+0x208>


	}
	else
	{
		u8 Local_u8ErrorState=1;
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	8a 83       	std	Y+2, r24	; 0x02

	}


	return Local_u8ErrorState;
 28a:	89 81       	ldd	r24, Y+1	; 0x01

}
 28c:	0f 90       	pop	r0
 28e:	0f 90       	pop	r0
 290:	0f 90       	pop	r0
 292:	0f 90       	pop	r0
 294:	0f 90       	pop	r0
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	08 95       	ret

0000029c <DIO_u8SetPortDirection>:
			/******************************************/
u8 DIO_u8SetPortDirection(u8 Copy_u8Port,u8 Copy_u8Direction)
{
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
 2a0:	00 d0       	rcall	.+0      	; 0x2a2 <DIO_u8SetPortDirection+0x6>
 2a2:	0f 92       	push	r0
 2a4:	cd b7       	in	r28, 0x3d	; 61
 2a6:	de b7       	in	r29, 0x3e	; 62
 2a8:	8a 83       	std	Y+2, r24	; 0x02
 2aa:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
 2ac:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
 2ae:	8a 81       	ldd	r24, Y+2	; 0x02
 2b0:	88 2f       	mov	r24, r24
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	84 30       	cpi	r24, 0x04	; 4
 2b6:	91 05       	cpc	r25, r1
 2b8:	01 f1       	breq	.+64     	; 0x2fa <DIO_u8SetPortDirection+0x5e>
 2ba:	85 30       	cpi	r24, 0x05	; 5
 2bc:	91 05       	cpc	r25, r1
 2be:	1c f5       	brge	.+70     	; 0x306 <DIO_u8SetPortDirection+0x6a>
 2c0:	83 30       	cpi	r24, 0x03	; 3
 2c2:	91 05       	cpc	r25, r1
 2c4:	a1 f0       	breq	.+40     	; 0x2ee <DIO_u8SetPortDirection+0x52>
 2c6:	84 30       	cpi	r24, 0x04	; 4
 2c8:	91 05       	cpc	r25, r1
 2ca:	ec f4       	brge	.+58     	; 0x306 <DIO_u8SetPortDirection+0x6a>
 2cc:	00 97       	sbiw	r24, 0x00	; 0
 2ce:	19 f0       	breq	.+6      	; 0x2d6 <DIO_u8SetPortDirection+0x3a>
 2d0:	01 97       	sbiw	r24, 0x01	; 1
 2d2:	39 f0       	breq	.+14     	; 0x2e2 <DIO_u8SetPortDirection+0x46>
 2d4:	18 c0       	rjmp	.+48     	; 0x306 <DIO_u8SetPortDirection+0x6a>
				{
				case DIO_u8PORTA: DDRA=Copy_u8Direction; break;
 2d6:	8a e3       	ldi	r24, 0x3A	; 58
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	2b 81       	ldd	r18, Y+3	; 0x03
 2dc:	fc 01       	movw	r30, r24
 2de:	20 83       	st	Z, r18
 2e0:	15 c0       	rjmp	.+42     	; 0x30c <DIO_u8SetPortDirection+0x70>
				case DIO_u8PORTB: DDRB=Copy_u8Direction; break;
 2e2:	87 e3       	ldi	r24, 0x37	; 55
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	2b 81       	ldd	r18, Y+3	; 0x03
 2e8:	fc 01       	movw	r30, r24
 2ea:	20 83       	st	Z, r18
 2ec:	0f c0       	rjmp	.+30     	; 0x30c <DIO_u8SetPortDirection+0x70>
				case DIO_u8PORTC: DDRC=Copy_u8Direction; break;
 2ee:	84 e3       	ldi	r24, 0x34	; 52
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	2b 81       	ldd	r18, Y+3	; 0x03
 2f4:	fc 01       	movw	r30, r24
 2f6:	20 83       	st	Z, r18
 2f8:	09 c0       	rjmp	.+18     	; 0x30c <DIO_u8SetPortDirection+0x70>
				case DIO_u8PORTD: DDRD=Copy_u8Direction; break;
 2fa:	81 e3       	ldi	r24, 0x31	; 49
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	2b 81       	ldd	r18, Y+3	; 0x03
 300:	fc 01       	movw	r30, r24
 302:	20 83       	st	Z, r18
 304:	03 c0       	rjmp	.+6      	; 0x30c <DIO_u8SetPortDirection+0x70>
				default: Local_u8ErrorState=1; break;
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	89 83       	std	Y+1, r24	; 0x01
 30a:	00 00       	nop

				}

	return Local_u8ErrorState;
 30c:	89 81       	ldd	r24, Y+1	; 0x01


}
 30e:	0f 90       	pop	r0
 310:	0f 90       	pop	r0
 312:	0f 90       	pop	r0
 314:	df 91       	pop	r29
 316:	cf 91       	pop	r28
 318:	08 95       	ret

0000031a <DIO_u8SetPinValue>:
			/**********************************************/
u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
 31a:	cf 93       	push	r28
 31c:	df 93       	push	r29
 31e:	00 d0       	rcall	.+0      	; 0x320 <DIO_u8SetPinValue+0x6>
 320:	00 d0       	rcall	.+0      	; 0x322 <DIO_u8SetPinValue+0x8>
 322:	cd b7       	in	r28, 0x3d	; 61
 324:	de b7       	in	r29, 0x3e	; 62
 326:	8a 83       	std	Y+2, r24	; 0x02
 328:	6b 83       	std	Y+3, r22	; 0x03
 32a:	4c 83       	std	Y+4, r20	; 0x04

u8 Local_u8ErrorState=0;
 32c:	19 82       	std	Y+1, r1	; 0x01

if(Copy_u8Pin<=DIO_u8PIN7)
 32e:	8b 81       	ldd	r24, Y+3	; 0x03
 330:	88 30       	cpi	r24, 0x08	; 8
 332:	08 f0       	brcs	.+2      	; 0x336 <DIO_u8SetPinValue+0x1c>
 334:	f1 c0       	rjmp	.+482    	; 0x518 <__FUSE_REGION_LENGTH__+0x118>
{
	if(Copy_u8Value==DIO_u8PIN_HIGH)
 336:	8c 81       	ldd	r24, Y+4	; 0x04
 338:	81 30       	cpi	r24, 0x01	; 1
 33a:	09 f0       	breq	.+2      	; 0x33e <DIO_u8SetPinValue+0x24>
 33c:	71 c0       	rjmp	.+226    	; 0x420 <__FUSE_REGION_LENGTH__+0x20>
		{
		switch(Copy_u8Port)
 33e:	8a 81       	ldd	r24, Y+2	; 0x02
 340:	88 2f       	mov	r24, r24
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	84 30       	cpi	r24, 0x04	; 4
 346:	91 05       	cpc	r25, r1
 348:	09 f4       	brne	.+2      	; 0x34c <DIO_u8SetPinValue+0x32>
 34a:	52 c0       	rjmp	.+164    	; 0x3f0 <DIO_u8SetPinValue+0xd6>
 34c:	85 30       	cpi	r24, 0x05	; 5
 34e:	91 05       	cpc	r25, r1
 350:	0c f0       	brlt	.+2      	; 0x354 <DIO_u8SetPinValue+0x3a>
 352:	64 c0       	rjmp	.+200    	; 0x41c <__FUSE_REGION_LENGTH__+0x1c>
 354:	83 30       	cpi	r24, 0x03	; 3
 356:	91 05       	cpc	r25, r1
 358:	a9 f1       	breq	.+106    	; 0x3c4 <DIO_u8SetPinValue+0xaa>
 35a:	84 30       	cpi	r24, 0x04	; 4
 35c:	91 05       	cpc	r25, r1
 35e:	0c f0       	brlt	.+2      	; 0x362 <DIO_u8SetPinValue+0x48>
 360:	5d c0       	rjmp	.+186    	; 0x41c <__FUSE_REGION_LENGTH__+0x1c>
 362:	00 97       	sbiw	r24, 0x00	; 0
 364:	19 f0       	breq	.+6      	; 0x36c <DIO_u8SetPinValue+0x52>
 366:	01 97       	sbiw	r24, 0x01	; 1
 368:	b9 f0       	breq	.+46     	; 0x398 <DIO_u8SetPinValue+0x7e>
 36a:	58 c0       	rjmp	.+176    	; 0x41c <__FUSE_REGION_LENGTH__+0x1c>
		{
			case DIO_u8PORTA:SET_BIT(PORTA,Copy_u8Pin);break;
 36c:	8b e3       	ldi	r24, 0x3B	; 59
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	fc 01       	movw	r30, r24
 372:	80 81       	ld	r24, Z
 374:	48 2f       	mov	r20, r24
 376:	8b 81       	ldd	r24, Y+3	; 0x03
 378:	28 2f       	mov	r18, r24
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	02 c0       	rjmp	.+4      	; 0x386 <DIO_u8SetPinValue+0x6c>
 382:	88 0f       	add	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	2a 95       	dec	r18
 388:	e2 f7       	brpl	.-8      	; 0x382 <DIO_u8SetPinValue+0x68>
 38a:	24 2f       	mov	r18, r20
 38c:	28 2b       	or	r18, r24
 38e:	8b e3       	ldi	r24, 0x3B	; 59
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	fc 01       	movw	r30, r24
 394:	20 83       	st	Z, r18
 396:	c2 c0       	rjmp	.+388    	; 0x51c <__FUSE_REGION_LENGTH__+0x11c>
			case DIO_u8PORTB:SET_BIT(PORTB,Copy_u8Pin);break;
 398:	88 e3       	ldi	r24, 0x38	; 56
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	fc 01       	movw	r30, r24
 39e:	80 81       	ld	r24, Z
 3a0:	48 2f       	mov	r20, r24
 3a2:	8b 81       	ldd	r24, Y+3	; 0x03
 3a4:	28 2f       	mov	r18, r24
 3a6:	30 e0       	ldi	r19, 0x00	; 0
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <DIO_u8SetPinValue+0x98>
 3ae:	88 0f       	add	r24, r24
 3b0:	99 1f       	adc	r25, r25
 3b2:	2a 95       	dec	r18
 3b4:	e2 f7       	brpl	.-8      	; 0x3ae <DIO_u8SetPinValue+0x94>
 3b6:	24 2f       	mov	r18, r20
 3b8:	28 2b       	or	r18, r24
 3ba:	88 e3       	ldi	r24, 0x38	; 56
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	fc 01       	movw	r30, r24
 3c0:	20 83       	st	Z, r18
 3c2:	ac c0       	rjmp	.+344    	; 0x51c <__FUSE_REGION_LENGTH__+0x11c>
			case DIO_u8PORTC:SET_BIT(PORTC,Copy_u8Pin);break;
 3c4:	85 e3       	ldi	r24, 0x35	; 53
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	fc 01       	movw	r30, r24
 3ca:	80 81       	ld	r24, Z
 3cc:	48 2f       	mov	r20, r24
 3ce:	8b 81       	ldd	r24, Y+3	; 0x03
 3d0:	28 2f       	mov	r18, r24
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	02 c0       	rjmp	.+4      	; 0x3de <DIO_u8SetPinValue+0xc4>
 3da:	88 0f       	add	r24, r24
 3dc:	99 1f       	adc	r25, r25
 3de:	2a 95       	dec	r18
 3e0:	e2 f7       	brpl	.-8      	; 0x3da <DIO_u8SetPinValue+0xc0>
 3e2:	24 2f       	mov	r18, r20
 3e4:	28 2b       	or	r18, r24
 3e6:	85 e3       	ldi	r24, 0x35	; 53
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	fc 01       	movw	r30, r24
 3ec:	20 83       	st	Z, r18
 3ee:	96 c0       	rjmp	.+300    	; 0x51c <__FUSE_REGION_LENGTH__+0x11c>
			case DIO_u8PORTD:SET_BIT(PORTD,Copy_u8Pin);break;
 3f0:	82 e3       	ldi	r24, 0x32	; 50
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	fc 01       	movw	r30, r24
 3f6:	80 81       	ld	r24, Z
 3f8:	48 2f       	mov	r20, r24
 3fa:	8b 81       	ldd	r24, Y+3	; 0x03
 3fc:	28 2f       	mov	r18, r24
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	02 c0       	rjmp	.+4      	; 0x40a <__FUSE_REGION_LENGTH__+0xa>
 406:	88 0f       	add	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	2a 95       	dec	r18
 40c:	e2 f7       	brpl	.-8      	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
 40e:	24 2f       	mov	r18, r20
 410:	28 2b       	or	r18, r24
 412:	82 e3       	ldi	r24, 0x32	; 50
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	fc 01       	movw	r30, r24
 418:	20 83       	st	Z, r18
 41a:	80 c0       	rjmp	.+256    	; 0x51c <__FUSE_REGION_LENGTH__+0x11c>
			default :Local_u8ErrorState=0;;break;
 41c:	19 82       	std	Y+1, r1	; 0x01
 41e:	7e c0       	rjmp	.+252    	; 0x51c <__FUSE_REGION_LENGTH__+0x11c>
		}



		}
		else if(Copy_u8Value==DIO_u8PIN_LOW)
 420:	8c 81       	ldd	r24, Y+4	; 0x04
 422:	88 23       	and	r24, r24
 424:	09 f0       	breq	.+2      	; 0x428 <__FUSE_REGION_LENGTH__+0x28>
 426:	75 c0       	rjmp	.+234    	; 0x512 <__FUSE_REGION_LENGTH__+0x112>
		{
			switch(Copy_u8Port)
 428:	8a 81       	ldd	r24, Y+2	; 0x02
 42a:	88 2f       	mov	r24, r24
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	84 30       	cpi	r24, 0x04	; 4
 430:	91 05       	cpc	r25, r1
 432:	09 f4       	brne	.+2      	; 0x436 <__FUSE_REGION_LENGTH__+0x36>
 434:	55 c0       	rjmp	.+170    	; 0x4e0 <__FUSE_REGION_LENGTH__+0xe0>
 436:	85 30       	cpi	r24, 0x05	; 5
 438:	91 05       	cpc	r25, r1
 43a:	0c f0       	brlt	.+2      	; 0x43e <__FUSE_REGION_LENGTH__+0x3e>
 43c:	68 c0       	rjmp	.+208    	; 0x50e <__FUSE_REGION_LENGTH__+0x10e>
 43e:	83 30       	cpi	r24, 0x03	; 3
 440:	91 05       	cpc	r25, r1
 442:	b9 f1       	breq	.+110    	; 0x4b2 <__FUSE_REGION_LENGTH__+0xb2>
 444:	84 30       	cpi	r24, 0x04	; 4
 446:	91 05       	cpc	r25, r1
 448:	0c f0       	brlt	.+2      	; 0x44c <__FUSE_REGION_LENGTH__+0x4c>
 44a:	61 c0       	rjmp	.+194    	; 0x50e <__FUSE_REGION_LENGTH__+0x10e>
 44c:	00 97       	sbiw	r24, 0x00	; 0
 44e:	19 f0       	breq	.+6      	; 0x456 <__FUSE_REGION_LENGTH__+0x56>
 450:	01 97       	sbiw	r24, 0x01	; 1
 452:	c1 f0       	breq	.+48     	; 0x484 <__FUSE_REGION_LENGTH__+0x84>
 454:	5c c0       	rjmp	.+184    	; 0x50e <__FUSE_REGION_LENGTH__+0x10e>
		{
			case DIO_u8PORTA:CLR_BIT(PORTA,Copy_u8Pin);break;
 456:	8b e3       	ldi	r24, 0x3B	; 59
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	fc 01       	movw	r30, r24
 45c:	80 81       	ld	r24, Z
 45e:	48 2f       	mov	r20, r24
 460:	8b 81       	ldd	r24, Y+3	; 0x03
 462:	28 2f       	mov	r18, r24
 464:	30 e0       	ldi	r19, 0x00	; 0
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	02 c0       	rjmp	.+4      	; 0x470 <__FUSE_REGION_LENGTH__+0x70>
 46c:	88 0f       	add	r24, r24
 46e:	99 1f       	adc	r25, r25
 470:	2a 95       	dec	r18
 472:	e2 f7       	brpl	.-8      	; 0x46c <__FUSE_REGION_LENGTH__+0x6c>
 474:	80 95       	com	r24
 476:	24 2f       	mov	r18, r20
 478:	28 23       	and	r18, r24
 47a:	8b e3       	ldi	r24, 0x3B	; 59
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	fc 01       	movw	r30, r24
 480:	20 83       	st	Z, r18
 482:	4c c0       	rjmp	.+152    	; 0x51c <__FUSE_REGION_LENGTH__+0x11c>
			case DIO_u8PORTB:CLR_BIT(PORTB,Copy_u8Pin);break;
 484:	88 e3       	ldi	r24, 0x38	; 56
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	fc 01       	movw	r30, r24
 48a:	80 81       	ld	r24, Z
 48c:	48 2f       	mov	r20, r24
 48e:	8b 81       	ldd	r24, Y+3	; 0x03
 490:	28 2f       	mov	r18, r24
 492:	30 e0       	ldi	r19, 0x00	; 0
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	02 c0       	rjmp	.+4      	; 0x49e <__FUSE_REGION_LENGTH__+0x9e>
 49a:	88 0f       	add	r24, r24
 49c:	99 1f       	adc	r25, r25
 49e:	2a 95       	dec	r18
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <__FUSE_REGION_LENGTH__+0x9a>
 4a2:	80 95       	com	r24
 4a4:	24 2f       	mov	r18, r20
 4a6:	28 23       	and	r18, r24
 4a8:	88 e3       	ldi	r24, 0x38	; 56
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	fc 01       	movw	r30, r24
 4ae:	20 83       	st	Z, r18
 4b0:	35 c0       	rjmp	.+106    	; 0x51c <__FUSE_REGION_LENGTH__+0x11c>
			case DIO_u8PORTC:CLR_BIT(PORTC,Copy_u8Pin);break;
 4b2:	85 e3       	ldi	r24, 0x35	; 53
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	fc 01       	movw	r30, r24
 4b8:	80 81       	ld	r24, Z
 4ba:	48 2f       	mov	r20, r24
 4bc:	8b 81       	ldd	r24, Y+3	; 0x03
 4be:	28 2f       	mov	r18, r24
 4c0:	30 e0       	ldi	r19, 0x00	; 0
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	02 c0       	rjmp	.+4      	; 0x4cc <__FUSE_REGION_LENGTH__+0xcc>
 4c8:	88 0f       	add	r24, r24
 4ca:	99 1f       	adc	r25, r25
 4cc:	2a 95       	dec	r18
 4ce:	e2 f7       	brpl	.-8      	; 0x4c8 <__FUSE_REGION_LENGTH__+0xc8>
 4d0:	80 95       	com	r24
 4d2:	24 2f       	mov	r18, r20
 4d4:	28 23       	and	r18, r24
 4d6:	85 e3       	ldi	r24, 0x35	; 53
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	fc 01       	movw	r30, r24
 4dc:	20 83       	st	Z, r18
 4de:	1e c0       	rjmp	.+60     	; 0x51c <__FUSE_REGION_LENGTH__+0x11c>
			case DIO_u8PORTD:CLR_BIT(PORTD,Copy_u8Pin);break;
 4e0:	82 e3       	ldi	r24, 0x32	; 50
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	fc 01       	movw	r30, r24
 4e6:	80 81       	ld	r24, Z
 4e8:	48 2f       	mov	r20, r24
 4ea:	8b 81       	ldd	r24, Y+3	; 0x03
 4ec:	28 2f       	mov	r18, r24
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	02 c0       	rjmp	.+4      	; 0x4fa <__FUSE_REGION_LENGTH__+0xfa>
 4f6:	88 0f       	add	r24, r24
 4f8:	99 1f       	adc	r25, r25
 4fa:	2a 95       	dec	r18
 4fc:	e2 f7       	brpl	.-8      	; 0x4f6 <__FUSE_REGION_LENGTH__+0xf6>
 4fe:	80 95       	com	r24
 500:	24 2f       	mov	r18, r20
 502:	28 23       	and	r18, r24
 504:	82 e3       	ldi	r24, 0x32	; 50
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	fc 01       	movw	r30, r24
 50a:	20 83       	st	Z, r18
 50c:	07 c0       	rjmp	.+14     	; 0x51c <__FUSE_REGION_LENGTH__+0x11c>
			default :Local_u8ErrorState=0;;break;
 50e:	19 82       	std	Y+1, r1	; 0x01
 510:	05 c0       	rjmp	.+10     	; 0x51c <__FUSE_REGION_LENGTH__+0x11c>


		}
		else
		{
		Local_u8ErrorState=1;
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	89 83       	std	Y+1, r24	; 0x01
 516:	02 c0       	rjmp	.+4      	; 0x51c <__FUSE_REGION_LENGTH__+0x11c>
		}


}
else{
	 Local_u8ErrorState=1;
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	89 83       	std	Y+1, r24	; 0x01

}
return Local_u8ErrorState;
 51c:	89 81       	ldd	r24, Y+1	; 0x01

}
 51e:	0f 90       	pop	r0
 520:	0f 90       	pop	r0
 522:	0f 90       	pop	r0
 524:	0f 90       	pop	r0
 526:	df 91       	pop	r29
 528:	cf 91       	pop	r28
 52a:	08 95       	ret

0000052c <DIO_u8SetPortValue>:
					/***************************************/
u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
 52c:	cf 93       	push	r28
 52e:	df 93       	push	r29
 530:	00 d0       	rcall	.+0      	; 0x532 <DIO_u8SetPortValue+0x6>
 532:	0f 92       	push	r0
 534:	cd b7       	in	r28, 0x3d	; 61
 536:	de b7       	in	r29, 0x3e	; 62
 538:	8a 83       	std	Y+2, r24	; 0x02
 53a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
 53c:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
 53e:	8a 81       	ldd	r24, Y+2	; 0x02
 540:	88 2f       	mov	r24, r24
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	84 30       	cpi	r24, 0x04	; 4
 546:	91 05       	cpc	r25, r1
 548:	01 f1       	breq	.+64     	; 0x58a <DIO_u8SetPortValue+0x5e>
 54a:	85 30       	cpi	r24, 0x05	; 5
 54c:	91 05       	cpc	r25, r1
 54e:	1c f5       	brge	.+70     	; 0x596 <DIO_u8SetPortValue+0x6a>
 550:	83 30       	cpi	r24, 0x03	; 3
 552:	91 05       	cpc	r25, r1
 554:	a1 f0       	breq	.+40     	; 0x57e <DIO_u8SetPortValue+0x52>
 556:	84 30       	cpi	r24, 0x04	; 4
 558:	91 05       	cpc	r25, r1
 55a:	ec f4       	brge	.+58     	; 0x596 <DIO_u8SetPortValue+0x6a>
 55c:	00 97       	sbiw	r24, 0x00	; 0
 55e:	19 f0       	breq	.+6      	; 0x566 <DIO_u8SetPortValue+0x3a>
 560:	01 97       	sbiw	r24, 0x01	; 1
 562:	39 f0       	breq	.+14     	; 0x572 <DIO_u8SetPortValue+0x46>
 564:	18 c0       	rjmp	.+48     	; 0x596 <DIO_u8SetPortValue+0x6a>
				{
					case DIO_u8PORTA: PORTA=Copy_u8Value; break;
 566:	8b e3       	ldi	r24, 0x3B	; 59
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	2b 81       	ldd	r18, Y+3	; 0x03
 56c:	fc 01       	movw	r30, r24
 56e:	20 83       	st	Z, r18
 570:	15 c0       	rjmp	.+42     	; 0x59c <DIO_u8SetPortValue+0x70>
				    case DIO_u8PORTB: PORTB=Copy_u8Value; break;
 572:	88 e3       	ldi	r24, 0x38	; 56
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	2b 81       	ldd	r18, Y+3	; 0x03
 578:	fc 01       	movw	r30, r24
 57a:	20 83       	st	Z, r18
 57c:	0f c0       	rjmp	.+30     	; 0x59c <DIO_u8SetPortValue+0x70>
				    case DIO_u8PORTC: PORTC=Copy_u8Value; break;
 57e:	85 e3       	ldi	r24, 0x35	; 53
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	2b 81       	ldd	r18, Y+3	; 0x03
 584:	fc 01       	movw	r30, r24
 586:	20 83       	st	Z, r18
 588:	09 c0       	rjmp	.+18     	; 0x59c <DIO_u8SetPortValue+0x70>
				    case DIO_u8PORTD: PORTD=Copy_u8Value; break;
 58a:	82 e3       	ldi	r24, 0x32	; 50
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	2b 81       	ldd	r18, Y+3	; 0x03
 590:	fc 01       	movw	r30, r24
 592:	20 83       	st	Z, r18
 594:	03 c0       	rjmp	.+6      	; 0x59c <DIO_u8SetPortValue+0x70>
				    default :Local_u8ErrorState=1; break;
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	89 83       	std	Y+1, r24	; 0x01
 59a:	00 00       	nop
				}


	return Local_u8ErrorState;
 59c:	89 81       	ldd	r24, Y+1	; 0x01

}
 59e:	0f 90       	pop	r0
 5a0:	0f 90       	pop	r0
 5a2:	0f 90       	pop	r0
 5a4:	df 91       	pop	r29
 5a6:	cf 91       	pop	r28
 5a8:	08 95       	ret

000005aa <DIO_u8GetPinValue>:

				/******************************************/
u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8* Copy_pu8Value)
{
 5aa:	cf 93       	push	r28
 5ac:	df 93       	push	r29
 5ae:	00 d0       	rcall	.+0      	; 0x5b0 <DIO_u8GetPinValue+0x6>
 5b0:	00 d0       	rcall	.+0      	; 0x5b2 <DIO_u8GetPinValue+0x8>
 5b2:	0f 92       	push	r0
 5b4:	cd b7       	in	r28, 0x3d	; 61
 5b6:	de b7       	in	r29, 0x3e	; 62
 5b8:	8a 83       	std	Y+2, r24	; 0x02
 5ba:	6b 83       	std	Y+3, r22	; 0x03
 5bc:	5d 83       	std	Y+5, r21	; 0x05
 5be:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState=0;
 5c0:	19 82       	std	Y+1, r1	; 0x01
	if( (Copy_pu8Value!=NULL) && (Copy_u8Pin<=DIO_u8PIN7) )
 5c2:	8c 81       	ldd	r24, Y+4	; 0x04
 5c4:	9d 81       	ldd	r25, Y+5	; 0x05
 5c6:	89 2b       	or	r24, r25
 5c8:	09 f4       	brne	.+2      	; 0x5cc <DIO_u8GetPinValue+0x22>
 5ca:	73 c0       	rjmp	.+230    	; 0x6b2 <DIO_u8GetPinValue+0x108>
 5cc:	8b 81       	ldd	r24, Y+3	; 0x03
 5ce:	88 30       	cpi	r24, 0x08	; 8
 5d0:	08 f0       	brcs	.+2      	; 0x5d4 <DIO_u8GetPinValue+0x2a>
 5d2:	6f c0       	rjmp	.+222    	; 0x6b2 <DIO_u8GetPinValue+0x108>
				{
					switch(Copy_u8Port)
 5d4:	8a 81       	ldd	r24, Y+2	; 0x02
 5d6:	88 2f       	mov	r24, r24
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	84 30       	cpi	r24, 0x04	; 4
 5dc:	91 05       	cpc	r25, r1
 5de:	09 f4       	brne	.+2      	; 0x5e2 <DIO_u8GetPinValue+0x38>
 5e0:	4f c0       	rjmp	.+158    	; 0x680 <DIO_u8GetPinValue+0xd6>
 5e2:	85 30       	cpi	r24, 0x05	; 5
 5e4:	91 05       	cpc	r25, r1
 5e6:	0c f0       	brlt	.+2      	; 0x5ea <DIO_u8GetPinValue+0x40>
 5e8:	60 c0       	rjmp	.+192    	; 0x6aa <DIO_u8GetPinValue+0x100>
 5ea:	83 30       	cpi	r24, 0x03	; 3
 5ec:	91 05       	cpc	r25, r1
 5ee:	99 f1       	breq	.+102    	; 0x656 <DIO_u8GetPinValue+0xac>
 5f0:	84 30       	cpi	r24, 0x04	; 4
 5f2:	91 05       	cpc	r25, r1
 5f4:	0c f0       	brlt	.+2      	; 0x5f8 <DIO_u8GetPinValue+0x4e>
 5f6:	59 c0       	rjmp	.+178    	; 0x6aa <DIO_u8GetPinValue+0x100>
 5f8:	00 97       	sbiw	r24, 0x00	; 0
 5fa:	19 f0       	breq	.+6      	; 0x602 <DIO_u8GetPinValue+0x58>
 5fc:	01 97       	sbiw	r24, 0x01	; 1
 5fe:	b1 f0       	breq	.+44     	; 0x62c <DIO_u8GetPinValue+0x82>
 600:	54 c0       	rjmp	.+168    	; 0x6aa <DIO_u8GetPinValue+0x100>
					{
						 case DIO_u8PORTA: *Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin); break;
 602:	89 e3       	ldi	r24, 0x39	; 57
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	fc 01       	movw	r30, r24
 608:	80 81       	ld	r24, Z
 60a:	88 2f       	mov	r24, r24
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	2b 81       	ldd	r18, Y+3	; 0x03
 610:	22 2f       	mov	r18, r18
 612:	30 e0       	ldi	r19, 0x00	; 0
 614:	02 c0       	rjmp	.+4      	; 0x61a <DIO_u8GetPinValue+0x70>
 616:	95 95       	asr	r25
 618:	87 95       	ror	r24
 61a:	2a 95       	dec	r18
 61c:	e2 f7       	brpl	.-8      	; 0x616 <DIO_u8GetPinValue+0x6c>
 61e:	28 2f       	mov	r18, r24
 620:	21 70       	andi	r18, 0x01	; 1
 622:	8c 81       	ldd	r24, Y+4	; 0x04
 624:	9d 81       	ldd	r25, Y+5	; 0x05
 626:	fc 01       	movw	r30, r24
 628:	20 83       	st	Z, r18
 62a:	42 c0       	rjmp	.+132    	; 0x6b0 <DIO_u8GetPinValue+0x106>
					     case DIO_u8PORTB: *Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin); break;
 62c:	86 e3       	ldi	r24, 0x36	; 54
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	fc 01       	movw	r30, r24
 632:	80 81       	ld	r24, Z
 634:	88 2f       	mov	r24, r24
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	2b 81       	ldd	r18, Y+3	; 0x03
 63a:	22 2f       	mov	r18, r18
 63c:	30 e0       	ldi	r19, 0x00	; 0
 63e:	02 c0       	rjmp	.+4      	; 0x644 <DIO_u8GetPinValue+0x9a>
 640:	95 95       	asr	r25
 642:	87 95       	ror	r24
 644:	2a 95       	dec	r18
 646:	e2 f7       	brpl	.-8      	; 0x640 <DIO_u8GetPinValue+0x96>
 648:	28 2f       	mov	r18, r24
 64a:	21 70       	andi	r18, 0x01	; 1
 64c:	8c 81       	ldd	r24, Y+4	; 0x04
 64e:	9d 81       	ldd	r25, Y+5	; 0x05
 650:	fc 01       	movw	r30, r24
 652:	20 83       	st	Z, r18
 654:	2d c0       	rjmp	.+90     	; 0x6b0 <DIO_u8GetPinValue+0x106>
					     case DIO_u8PORTC: *Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin); break;
 656:	83 e3       	ldi	r24, 0x33	; 51
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	fc 01       	movw	r30, r24
 65c:	80 81       	ld	r24, Z
 65e:	88 2f       	mov	r24, r24
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	2b 81       	ldd	r18, Y+3	; 0x03
 664:	22 2f       	mov	r18, r18
 666:	30 e0       	ldi	r19, 0x00	; 0
 668:	02 c0       	rjmp	.+4      	; 0x66e <DIO_u8GetPinValue+0xc4>
 66a:	95 95       	asr	r25
 66c:	87 95       	ror	r24
 66e:	2a 95       	dec	r18
 670:	e2 f7       	brpl	.-8      	; 0x66a <DIO_u8GetPinValue+0xc0>
 672:	28 2f       	mov	r18, r24
 674:	21 70       	andi	r18, 0x01	; 1
 676:	8c 81       	ldd	r24, Y+4	; 0x04
 678:	9d 81       	ldd	r25, Y+5	; 0x05
 67a:	fc 01       	movw	r30, r24
 67c:	20 83       	st	Z, r18
 67e:	18 c0       	rjmp	.+48     	; 0x6b0 <DIO_u8GetPinValue+0x106>
					     case DIO_u8PORTD: *Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin); break;
 680:	80 e3       	ldi	r24, 0x30	; 48
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	fc 01       	movw	r30, r24
 686:	80 81       	ld	r24, Z
 688:	88 2f       	mov	r24, r24
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	2b 81       	ldd	r18, Y+3	; 0x03
 68e:	22 2f       	mov	r18, r18
 690:	30 e0       	ldi	r19, 0x00	; 0
 692:	02 c0       	rjmp	.+4      	; 0x698 <DIO_u8GetPinValue+0xee>
 694:	95 95       	asr	r25
 696:	87 95       	ror	r24
 698:	2a 95       	dec	r18
 69a:	e2 f7       	brpl	.-8      	; 0x694 <DIO_u8GetPinValue+0xea>
 69c:	28 2f       	mov	r18, r24
 69e:	21 70       	andi	r18, 0x01	; 1
 6a0:	8c 81       	ldd	r24, Y+4	; 0x04
 6a2:	9d 81       	ldd	r25, Y+5	; 0x05
 6a4:	fc 01       	movw	r30, r24
 6a6:	20 83       	st	Z, r18
 6a8:	03 c0       	rjmp	.+6      	; 0x6b0 <DIO_u8GetPinValue+0x106>
					     default : Local_u8ErrorState=1; break;
 6aa:	81 e0       	ldi	r24, 0x01	; 1
 6ac:	89 83       	std	Y+1, r24	; 0x01
 6ae:	00 00       	nop
{

	u8 Local_u8ErrorState=0;
	if( (Copy_pu8Value!=NULL) && (Copy_u8Pin<=DIO_u8PIN7) )
				{
					switch(Copy_u8Port)
 6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <DIO_u8GetPinValue+0x10c>
					}

				}
				else
				{
				Local_u8ErrorState=1;
 6b2:	81 e0       	ldi	r24, 0x01	; 1
 6b4:	89 83       	std	Y+1, r24	; 0x01

				}


	return Local_u8ErrorState;
 6b6:	89 81       	ldd	r24, Y+1	; 0x01


}
 6b8:	0f 90       	pop	r0
 6ba:	0f 90       	pop	r0
 6bc:	0f 90       	pop	r0
 6be:	0f 90       	pop	r0
 6c0:	0f 90       	pop	r0
 6c2:	df 91       	pop	r29
 6c4:	cf 91       	pop	r28
 6c6:	08 95       	ret

000006c8 <SSD_u8Enable_SDD>:
#include"SSD_private.h"


/*make Function for enable and disable the 7_seg for multiplexing */
u8 SSD_u8Enable_SDD(SSD_t*Copy_u16Ptr)
{
 6c8:	cf 93       	push	r28
 6ca:	df 93       	push	r29
 6cc:	00 d0       	rcall	.+0      	; 0x6ce <SSD_u8Enable_SDD+0x6>
 6ce:	0f 92       	push	r0
 6d0:	cd b7       	in	r28, 0x3d	; 61
 6d2:	de b7       	in	r29, 0x3e	; 62
 6d4:	9b 83       	std	Y+3, r25	; 0x03
 6d6:	8a 83       	std	Y+2, r24	; 0x02
	u8 LocalErrorState=0;
 6d8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u16Ptr->COM_Type==COM_CATHODE)
 6da:	8a 81       	ldd	r24, Y+2	; 0x02
 6dc:	9b 81       	ldd	r25, Y+3	; 0x03
 6de:	fc 01       	movw	r30, r24
 6e0:	80 81       	ld	r24, Z
 6e2:	88 23       	and	r24, r24
 6e4:	11 f5       	brne	.+68     	; 0x72a <SSD_u8Enable_SDD+0x62>
	{
		DIO_u8SetPinDirection(Copy_u16Ptr->EnablePort,DIO_u8PIN0,DIO_u8PIN_OUTPUT);
 6e6:	8a 81       	ldd	r24, Y+2	; 0x02
 6e8:	9b 81       	ldd	r25, Y+3	; 0x03
 6ea:	fc 01       	movw	r30, r24
 6ec:	82 81       	ldd	r24, Z+2	; 0x02
 6ee:	41 e0       	ldi	r20, 0x01	; 1
 6f0:	60 e0       	ldi	r22, 0x00	; 0
 6f2:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
		CLR_BIT(Copy_u16Ptr->EnablePort,Copy_u16Ptr->EnablePin);
 6f6:	8a 81       	ldd	r24, Y+2	; 0x02
 6f8:	9b 81       	ldd	r25, Y+3	; 0x03
 6fa:	fc 01       	movw	r30, r24
 6fc:	82 81       	ldd	r24, Z+2	; 0x02
 6fe:	48 2f       	mov	r20, r24
 700:	8a 81       	ldd	r24, Y+2	; 0x02
 702:	9b 81       	ldd	r25, Y+3	; 0x03
 704:	fc 01       	movw	r30, r24
 706:	83 81       	ldd	r24, Z+3	; 0x03
 708:	28 2f       	mov	r18, r24
 70a:	30 e0       	ldi	r19, 0x00	; 0
 70c:	81 e0       	ldi	r24, 0x01	; 1
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	02 c0       	rjmp	.+4      	; 0x716 <SSD_u8Enable_SDD+0x4e>
 712:	88 0f       	add	r24, r24
 714:	99 1f       	adc	r25, r25
 716:	2a 95       	dec	r18
 718:	e2 f7       	brpl	.-8      	; 0x712 <SSD_u8Enable_SDD+0x4a>
 71a:	80 95       	com	r24
 71c:	84 23       	and	r24, r20
 71e:	28 2f       	mov	r18, r24
 720:	8a 81       	ldd	r24, Y+2	; 0x02
 722:	9b 81       	ldd	r25, Y+3	; 0x03
 724:	fc 01       	movw	r30, r24
 726:	22 83       	std	Z+2, r18	; 0x02
 728:	19 c0       	rjmp	.+50     	; 0x75c <SSD_u8Enable_SDD+0x94>
	}
	else
	{
		CLR_BIT(Copy_u16Ptr->EnablePort,Copy_u16Ptr->EnablePin);
 72a:	8a 81       	ldd	r24, Y+2	; 0x02
 72c:	9b 81       	ldd	r25, Y+3	; 0x03
 72e:	fc 01       	movw	r30, r24
 730:	82 81       	ldd	r24, Z+2	; 0x02
 732:	48 2f       	mov	r20, r24
 734:	8a 81       	ldd	r24, Y+2	; 0x02
 736:	9b 81       	ldd	r25, Y+3	; 0x03
 738:	fc 01       	movw	r30, r24
 73a:	83 81       	ldd	r24, Z+3	; 0x03
 73c:	28 2f       	mov	r18, r24
 73e:	30 e0       	ldi	r19, 0x00	; 0
 740:	81 e0       	ldi	r24, 0x01	; 1
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	02 c0       	rjmp	.+4      	; 0x74a <SSD_u8Enable_SDD+0x82>
 746:	88 0f       	add	r24, r24
 748:	99 1f       	adc	r25, r25
 74a:	2a 95       	dec	r18
 74c:	e2 f7       	brpl	.-8      	; 0x746 <SSD_u8Enable_SDD+0x7e>
 74e:	80 95       	com	r24
 750:	84 23       	and	r24, r20
 752:	28 2f       	mov	r18, r24
 754:	8a 81       	ldd	r24, Y+2	; 0x02
 756:	9b 81       	ldd	r25, Y+3	; 0x03
 758:	fc 01       	movw	r30, r24
 75a:	22 83       	std	Z+2, r18	; 0x02

	}

	return LocalErrorState;
 75c:	89 81       	ldd	r24, Y+1	; 0x01
}
 75e:	0f 90       	pop	r0
 760:	0f 90       	pop	r0
 762:	0f 90       	pop	r0
 764:	df 91       	pop	r29
 766:	cf 91       	pop	r28
 768:	08 95       	ret

0000076a <SSD_u8SetNumber>:
				/*****************************************************************/
u8 SSD_u8SetNumber(u8 Copy_u8Number,SSD_t*Copy_u16Ptr)
{
 76a:	cf 93       	push	r28
 76c:	df 93       	push	r29
 76e:	00 d0       	rcall	.+0      	; 0x770 <SSD_u8SetNumber+0x6>
 770:	00 d0       	rcall	.+0      	; 0x772 <SSD_u8SetNumber+0x8>
 772:	cd b7       	in	r28, 0x3d	; 61
 774:	de b7       	in	r29, 0x3e	; 62
 776:	8a 83       	std	Y+2, r24	; 0x02
 778:	7c 83       	std	Y+4, r23	; 0x04
 77a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
 77c:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u16Ptr->COM_Type==COM_CATHODE)
 77e:	8b 81       	ldd	r24, Y+3	; 0x03
 780:	9c 81       	ldd	r25, Y+4	; 0x04
 782:	fc 01       	movw	r30, r24
 784:	80 81       	ld	r24, Z
 786:	88 23       	and	r24, r24
 788:	79 f4       	brne	.+30     	; 0x7a8 <SSD_u8SetNumber+0x3e>
	{
		//CLR_BIT(Copy_u16Ptr->Port,DIO_u8PIN7);
		DIO_u8SetPortDirection(Copy_u16Ptr->Port,DIO_u8PORT_OUTPUT);
 78a:	8b 81       	ldd	r24, Y+3	; 0x03
 78c:	9c 81       	ldd	r25, Y+4	; 0x04
 78e:	fc 01       	movw	r30, r24
 790:	81 81       	ldd	r24, Z+1	; 0x01
 792:	6f ef       	ldi	r22, 0xFF	; 255
 794:	0e 94 4e 01 	call	0x29c	; 0x29c <DIO_u8SetPortDirection>
		DIO_u8SetPortValue(Copy_u16Ptr->Port,Copy_u8Number);
 798:	8b 81       	ldd	r24, Y+3	; 0x03
 79a:	9c 81       	ldd	r25, Y+4	; 0x04
 79c:	fc 01       	movw	r30, r24
 79e:	81 81       	ldd	r24, Z+1	; 0x01
 7a0:	6a 81       	ldd	r22, Y+2	; 0x02
 7a2:	0e 94 96 02 	call	0x52c	; 0x52c <DIO_u8SetPortValue>
 7a6:	11 c0       	rjmp	.+34     	; 0x7ca <SSD_u8SetNumber+0x60>

	}
	else
	{
		//SET_BIT(Copy_u16Ptr->Port,DIO_u8PIN7);
		DIO_u8SetPortDirection(Copy_u16Ptr->Port,DIO_u8PORT_OUTPUT);
 7a8:	8b 81       	ldd	r24, Y+3	; 0x03
 7aa:	9c 81       	ldd	r25, Y+4	; 0x04
 7ac:	fc 01       	movw	r30, r24
 7ae:	81 81       	ldd	r24, Z+1	; 0x01
 7b0:	6f ef       	ldi	r22, 0xFF	; 255
 7b2:	0e 94 4e 01 	call	0x29c	; 0x29c <DIO_u8SetPortDirection>
		DIO_u8SetPortValue(Copy_u16Ptr->Port,~(Copy_u8Number));
 7b6:	8a 81       	ldd	r24, Y+2	; 0x02
 7b8:	28 2f       	mov	r18, r24
 7ba:	20 95       	com	r18
 7bc:	8b 81       	ldd	r24, Y+3	; 0x03
 7be:	9c 81       	ldd	r25, Y+4	; 0x04
 7c0:	fc 01       	movw	r30, r24
 7c2:	81 81       	ldd	r24, Z+1	; 0x01
 7c4:	62 2f       	mov	r22, r18
 7c6:	0e 94 96 02 	call	0x52c	; 0x52c <DIO_u8SetPortValue>
	}
	return Local_u8ErrorState;
 7ca:	89 81       	ldd	r24, Y+1	; 0x01
}
 7cc:	0f 90       	pop	r0
 7ce:	0f 90       	pop	r0
 7d0:	0f 90       	pop	r0
 7d2:	0f 90       	pop	r0
 7d4:	df 91       	pop	r29
 7d6:	cf 91       	pop	r28
 7d8:	08 95       	ret

000007da <main>:

SSD_t SSD1={COM_CATHODE,DIO_u8PORTA,DIO_u8PORTB,DIO_u8PIN0};


void main(void)
{
 7da:	cf 93       	push	r28
 7dc:	df 93       	push	r29
 7de:	cd b7       	in	r28, 0x3d	; 61
 7e0:	de b7       	in	r29, 0x3e	; 62
 7e2:	c2 55       	subi	r28, 0x52	; 82
 7e4:	d1 09       	sbc	r29, r1
 7e6:	0f b6       	in	r0, 0x3f	; 63
 7e8:	f8 94       	cli
 7ea:	de bf       	out	0x3e, r29	; 62
 7ec:	0f be       	out	0x3f, r0	; 63
 7ee:	cd bf       	out	0x3d, r28	; 61


	while(1)
	{
u8 arr[]={SSD_u8_EIGHT,SSD_u8_SEVEN,SSD_u8_SIX,SSD_u8_FIVE,SSD_u8_FOUR,SSD_u8_THREE,SSD_u8_TWO,SSD_u8_ONE,SSD_u8_ZERO};
 7f0:	89 e0       	ldi	r24, 0x09	; 9
 7f2:	e4 e6       	ldi	r30, 0x64	; 100
 7f4:	f0 e0       	ldi	r31, 0x00	; 0
 7f6:	de 01       	movw	r26, r28
 7f8:	5e 96       	adiw	r26, 0x1e	; 30
 7fa:	01 90       	ld	r0, Z+
 7fc:	0d 92       	st	X+, r0
 7fe:	8a 95       	dec	r24
 800:	e1 f7       	brne	.-8      	; 0x7fa <main+0x20>

u8 counter;
for(counter=0;counter<9;counter++){
 802:	19 82       	std	Y+1, r1	; 0x01
 804:	a3 c0       	rjmp	.+326    	; 0x94c <__stack+0xed>
	SSD_u8SetNumber(arr[counter],&SSD1);
 806:	89 81       	ldd	r24, Y+1	; 0x01
 808:	88 2f       	mov	r24, r24
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	9e 01       	movw	r18, r28
 80e:	22 5e       	subi	r18, 0xE2	; 226
 810:	3f 4f       	sbci	r19, 0xFF	; 255
 812:	82 0f       	add	r24, r18
 814:	93 1f       	adc	r25, r19
 816:	dc 01       	movw	r26, r24
 818:	8c 91       	ld	r24, X
 81a:	60 e6       	ldi	r22, 0x60	; 96
 81c:	70 e0       	ldi	r23, 0x00	; 0
 81e:	0e 94 b5 03 	call	0x76a	; 0x76a <SSD_u8SetNumber>
 822:	80 e0       	ldi	r24, 0x00	; 0
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	a8 e4       	ldi	r26, 0x48	; 72
 828:	b2 e4       	ldi	r27, 0x42	; 66
 82a:	8a 83       	std	Y+2, r24	; 0x02
 82c:	9b 83       	std	Y+3, r25	; 0x03
 82e:	ac 83       	std	Y+4, r26	; 0x04
 830:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 832:	20 e0       	ldi	r18, 0x00	; 0
 834:	30 e0       	ldi	r19, 0x00	; 0
 836:	4a e7       	ldi	r20, 0x7A	; 122
 838:	55 e4       	ldi	r21, 0x45	; 69
 83a:	6a 81       	ldd	r22, Y+2	; 0x02
 83c:	7b 81       	ldd	r23, Y+3	; 0x03
 83e:	8c 81       	ldd	r24, Y+4	; 0x04
 840:	9d 81       	ldd	r25, Y+5	; 0x05
 842:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <__mulsf3>
 846:	6b ab       	std	Y+51, r22	; 0x33
 848:	7c ab       	std	Y+52, r23	; 0x34
 84a:	8d ab       	std	Y+53, r24	; 0x35
 84c:	9e ab       	std	Y+54, r25	; 0x36
 84e:	8b a9       	ldd	r24, Y+51	; 0x33
 850:	9c a9       	ldd	r25, Y+52	; 0x34
 852:	ad a9       	ldd	r26, Y+53	; 0x35
 854:	be a9       	ldd	r27, Y+54	; 0x36
 856:	8e 83       	std	Y+6, r24	; 0x06
 858:	9f 83       	std	Y+7, r25	; 0x07
 85a:	a8 87       	std	Y+8, r26	; 0x08
 85c:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
 85e:	20 e0       	ldi	r18, 0x00	; 0
 860:	30 e0       	ldi	r19, 0x00	; 0
 862:	40 e8       	ldi	r20, 0x80	; 128
 864:	5f e3       	ldi	r21, 0x3F	; 63
 866:	6e 81       	ldd	r22, Y+6	; 0x06
 868:	7f 81       	ldd	r23, Y+7	; 0x07
 86a:	88 85       	ldd	r24, Y+8	; 0x08
 86c:	99 85       	ldd	r25, Y+9	; 0x09
 86e:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__cmpsf2>
 872:	88 23       	and	r24, r24
 874:	2c f4       	brge	.+10     	; 0x880 <__stack+0x21>
		__ticks = 1;
 876:	81 e0       	ldi	r24, 0x01	; 1
 878:	90 e0       	ldi	r25, 0x00	; 0
 87a:	9b 87       	std	Y+11, r25	; 0x0b
 87c:	8a 87       	std	Y+10, r24	; 0x0a
 87e:	58 c0       	rjmp	.+176    	; 0x930 <__stack+0xd1>
	else if (__tmp > 65535)
 880:	20 e0       	ldi	r18, 0x00	; 0
 882:	3f ef       	ldi	r19, 0xFF	; 255
 884:	4f e7       	ldi	r20, 0x7F	; 127
 886:	57 e4       	ldi	r21, 0x47	; 71
 888:	6e 81       	ldd	r22, Y+6	; 0x06
 88a:	7f 81       	ldd	r23, Y+7	; 0x07
 88c:	88 85       	ldd	r24, Y+8	; 0x08
 88e:	99 85       	ldd	r25, Y+9	; 0x09
 890:	0e 94 d4 05 	call	0xba8	; 0xba8 <__gesf2>
 894:	18 16       	cp	r1, r24
 896:	d4 f5       	brge	.+116    	; 0x90c <__stack+0xad>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 898:	20 e0       	ldi	r18, 0x00	; 0
 89a:	30 e0       	ldi	r19, 0x00	; 0
 89c:	40 e2       	ldi	r20, 0x20	; 32
 89e:	51 e4       	ldi	r21, 0x41	; 65
 8a0:	6a 81       	ldd	r22, Y+2	; 0x02
 8a2:	7b 81       	ldd	r23, Y+3	; 0x03
 8a4:	8c 81       	ldd	r24, Y+4	; 0x04
 8a6:	9d 81       	ldd	r25, Y+5	; 0x05
 8a8:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <__mulsf3>
 8ac:	6f ab       	std	Y+55, r22	; 0x37
 8ae:	78 af       	std	Y+56, r23	; 0x38
 8b0:	89 af       	std	Y+57, r24	; 0x39
 8b2:	9a af       	std	Y+58, r25	; 0x3a
 8b4:	8f a9       	ldd	r24, Y+55	; 0x37
 8b6:	98 ad       	ldd	r25, Y+56	; 0x38
 8b8:	a9 ad       	ldd	r26, Y+57	; 0x39
 8ba:	ba ad       	ldd	r27, Y+58	; 0x3a
 8bc:	8b a7       	std	Y+43, r24	; 0x2b
 8be:	9c a7       	std	Y+44, r25	; 0x2c
 8c0:	ad a7       	std	Y+45, r26	; 0x2d
 8c2:	be a7       	std	Y+46, r27	; 0x2e
 8c4:	6b a5       	ldd	r22, Y+43	; 0x2b
 8c6:	7c a5       	ldd	r23, Y+44	; 0x2c
 8c8:	8d a5       	ldd	r24, Y+45	; 0x2d
 8ca:	9e a5       	ldd	r25, Y+46	; 0x2e
 8cc:	0e 94 58 05 	call	0xab0	; 0xab0 <__fixunssfsi>
 8d0:	6b af       	std	Y+59, r22	; 0x3b
 8d2:	7c af       	std	Y+60, r23	; 0x3c
 8d4:	8d af       	std	Y+61, r24	; 0x3d
 8d6:	9e af       	std	Y+62, r25	; 0x3e
 8d8:	ab ad       	ldd	r26, Y+59	; 0x3b
 8da:	bc ad       	ldd	r27, Y+60	; 0x3c
 8dc:	bb 87       	std	Y+11, r27	; 0x0b
 8de:	aa 87       	std	Y+10, r26	; 0x0a
		while(__ticks)
 8e0:	10 c0       	rjmp	.+32     	; 0x902 <__stack+0xa3>
 8e2:	80 e9       	ldi	r24, 0x90	; 144
 8e4:	91 e0       	ldi	r25, 0x01	; 1
 8e6:	9d 87       	std	Y+13, r25	; 0x0d
 8e8:	8c 87       	std	Y+12, r24	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 8ea:	8c 85       	ldd	r24, Y+12	; 0x0c
 8ec:	9d 85       	ldd	r25, Y+13	; 0x0d
 8ee:	01 97       	sbiw	r24, 0x01	; 1
 8f0:	f1 f7       	brne	.-4      	; 0x8ee <__stack+0x8f>
 8f2:	9d 87       	std	Y+13, r25	; 0x0d
 8f4:	8c 87       	std	Y+12, r24	; 0x0c
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 8f6:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 8f8:	8a 85       	ldd	r24, Y+10	; 0x0a
 8fa:	9b 85       	ldd	r25, Y+11	; 0x0b
 8fc:	01 97       	sbiw	r24, 0x01	; 1
 8fe:	9b 87       	std	Y+11, r25	; 0x0b
 900:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 902:	8a 85       	ldd	r24, Y+10	; 0x0a
 904:	9b 85       	ldd	r25, Y+11	; 0x0b
 906:	89 2b       	or	r24, r25
 908:	61 f7       	brne	.-40     	; 0x8e2 <__stack+0x83>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
 90a:	1d c0       	rjmp	.+58     	; 0x946 <__stack+0xe7>
	}
	else
		__ticks = (uint16_t)__tmp;
 90c:	6e 81       	ldd	r22, Y+6	; 0x06
 90e:	7f 81       	ldd	r23, Y+7	; 0x07
 910:	88 85       	ldd	r24, Y+8	; 0x08
 912:	99 85       	ldd	r25, Y+9	; 0x09
 914:	0e 94 58 05 	call	0xab0	; 0xab0 <__fixunssfsi>
 918:	23 96       	adiw	r28, 0x03	; 3
 91a:	6c af       	std	Y+60, r22	; 0x3c
 91c:	7d af       	std	Y+61, r23	; 0x3d
 91e:	8e af       	std	Y+62, r24	; 0x3e
 920:	9f af       	std	Y+63, r25	; 0x3f
 922:	23 97       	sbiw	r28, 0x03	; 3
 924:	21 96       	adiw	r28, 0x01	; 1
 926:	ee ad       	ldd	r30, Y+62	; 0x3e
 928:	ff ad       	ldd	r31, Y+63	; 0x3f
 92a:	21 97       	sbiw	r28, 0x01	; 1
 92c:	fb 87       	std	Y+11, r31	; 0x0b
 92e:	ea 87       	std	Y+10, r30	; 0x0a
 930:	8a 85       	ldd	r24, Y+10	; 0x0a
 932:	9b 85       	ldd	r25, Y+11	; 0x0b
 934:	9f 87       	std	Y+15, r25	; 0x0f
 936:	8e 87       	std	Y+14, r24	; 0x0e
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 938:	8e 85       	ldd	r24, Y+14	; 0x0e
 93a:	9f 85       	ldd	r25, Y+15	; 0x0f
 93c:	01 97       	sbiw	r24, 0x01	; 1
 93e:	f1 f7       	brne	.-4      	; 0x93c <__stack+0xdd>
 940:	9f 87       	std	Y+15, r25	; 0x0f
 942:	8e 87       	std	Y+14, r24	; 0x0e
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 944:	00 00       	nop
	while(1)
	{
u8 arr[]={SSD_u8_EIGHT,SSD_u8_SEVEN,SSD_u8_SIX,SSD_u8_FIVE,SSD_u8_FOUR,SSD_u8_THREE,SSD_u8_TWO,SSD_u8_ONE,SSD_u8_ZERO};

u8 counter;
for(counter=0;counter<9;counter++){
 946:	89 81       	ldd	r24, Y+1	; 0x01
 948:	8f 5f       	subi	r24, 0xFF	; 255
 94a:	89 83       	std	Y+1, r24	; 0x01
 94c:	89 81       	ldd	r24, Y+1	; 0x01
 94e:	89 30       	cpi	r24, 0x09	; 9
 950:	08 f4       	brcc	.+2      	; 0x954 <__stack+0xf5>
 952:	59 cf       	rjmp	.-334    	; 0x806 <main+0x2c>
	SSD_u8SetNumber(arr[counter],&SSD1);
	_delay_ms(50);


}
SSD_t SSD2={COM_CATHODE,DIO_u8PORTA,DIO_u8PORTB,DIO_u8PIN0};
 954:	1f a2       	std	Y+39, r1	; 0x27
 956:	18 a6       	std	Y+40, r1	; 0x28
 958:	81 e0       	ldi	r24, 0x01	; 1
 95a:	89 a7       	std	Y+41, r24	; 0x29
 95c:	1a a6       	std	Y+42, r1	; 0x2a
SSD_u8Enable_SDD(&SSD2);
 95e:	ce 01       	movw	r24, r28
 960:	87 96       	adiw	r24, 0x27	; 39
 962:	0e 94 64 03 	call	0x6c8	; 0x6c8 <SSD_u8Enable_SDD>
 966:	80 e0       	ldi	r24, 0x00	; 0
 968:	90 e0       	ldi	r25, 0x00	; 0
 96a:	a8 ec       	ldi	r26, 0xC8	; 200
 96c:	b2 e4       	ldi	r27, 0x42	; 66
 96e:	88 8b       	std	Y+16, r24	; 0x10
 970:	99 8b       	std	Y+17, r25	; 0x11
 972:	aa 8b       	std	Y+18, r26	; 0x12
 974:	bb 8b       	std	Y+19, r27	; 0x13

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 976:	20 e0       	ldi	r18, 0x00	; 0
 978:	30 e0       	ldi	r19, 0x00	; 0
 97a:	4a e7       	ldi	r20, 0x7A	; 122
 97c:	55 e4       	ldi	r21, 0x45	; 69
 97e:	68 89       	ldd	r22, Y+16	; 0x10
 980:	79 89       	ldd	r23, Y+17	; 0x11
 982:	8a 89       	ldd	r24, Y+18	; 0x12
 984:	9b 89       	ldd	r25, Y+19	; 0x13
 986:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <__mulsf3>
 98a:	27 96       	adiw	r28, 0x07	; 7
 98c:	6c af       	std	Y+60, r22	; 0x3c
 98e:	7d af       	std	Y+61, r23	; 0x3d
 990:	8e af       	std	Y+62, r24	; 0x3e
 992:	9f af       	std	Y+63, r25	; 0x3f
 994:	27 97       	sbiw	r28, 0x07	; 7
 996:	27 96       	adiw	r28, 0x07	; 7
 998:	8c ad       	ldd	r24, Y+60	; 0x3c
 99a:	9d ad       	ldd	r25, Y+61	; 0x3d
 99c:	ae ad       	ldd	r26, Y+62	; 0x3e
 99e:	bf ad       	ldd	r27, Y+63	; 0x3f
 9a0:	27 97       	sbiw	r28, 0x07	; 7
 9a2:	8c 8b       	std	Y+20, r24	; 0x14
 9a4:	9d 8b       	std	Y+21, r25	; 0x15
 9a6:	ae 8b       	std	Y+22, r26	; 0x16
 9a8:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
 9aa:	20 e0       	ldi	r18, 0x00	; 0
 9ac:	30 e0       	ldi	r19, 0x00	; 0
 9ae:	40 e8       	ldi	r20, 0x80	; 128
 9b0:	5f e3       	ldi	r21, 0x3F	; 63
 9b2:	6c 89       	ldd	r22, Y+20	; 0x14
 9b4:	7d 89       	ldd	r23, Y+21	; 0x15
 9b6:	8e 89       	ldd	r24, Y+22	; 0x16
 9b8:	9f 89       	ldd	r25, Y+23	; 0x17
 9ba:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__cmpsf2>
 9be:	88 23       	and	r24, r24
 9c0:	2c f4       	brge	.+10     	; 0x9cc <__stack+0x16d>
		__ticks = 1;
 9c2:	81 e0       	ldi	r24, 0x01	; 1
 9c4:	90 e0       	ldi	r25, 0x00	; 0
 9c6:	99 8f       	std	Y+25, r25	; 0x19
 9c8:	88 8f       	std	Y+24, r24	; 0x18
 9ca:	61 c0       	rjmp	.+194    	; 0xa8e <__stack+0x22f>
	else if (__tmp > 65535)
 9cc:	20 e0       	ldi	r18, 0x00	; 0
 9ce:	3f ef       	ldi	r19, 0xFF	; 255
 9d0:	4f e7       	ldi	r20, 0x7F	; 127
 9d2:	57 e4       	ldi	r21, 0x47	; 71
 9d4:	6c 89       	ldd	r22, Y+20	; 0x14
 9d6:	7d 89       	ldd	r23, Y+21	; 0x15
 9d8:	8e 89       	ldd	r24, Y+22	; 0x16
 9da:	9f 89       	ldd	r25, Y+23	; 0x17
 9dc:	0e 94 d4 05 	call	0xba8	; 0xba8 <__gesf2>
 9e0:	18 16       	cp	r1, r24
 9e2:	0c f0       	brlt	.+2      	; 0x9e6 <__stack+0x187>
 9e4:	42 c0       	rjmp	.+132    	; 0xa6a <__stack+0x20b>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 9e6:	20 e0       	ldi	r18, 0x00	; 0
 9e8:	30 e0       	ldi	r19, 0x00	; 0
 9ea:	40 e2       	ldi	r20, 0x20	; 32
 9ec:	51 e4       	ldi	r21, 0x41	; 65
 9ee:	68 89       	ldd	r22, Y+16	; 0x10
 9f0:	79 89       	ldd	r23, Y+17	; 0x11
 9f2:	8a 89       	ldd	r24, Y+18	; 0x12
 9f4:	9b 89       	ldd	r25, Y+19	; 0x13
 9f6:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <__mulsf3>
 9fa:	2b 96       	adiw	r28, 0x0b	; 11
 9fc:	6c af       	std	Y+60, r22	; 0x3c
 9fe:	7d af       	std	Y+61, r23	; 0x3d
 a00:	8e af       	std	Y+62, r24	; 0x3e
 a02:	9f af       	std	Y+63, r25	; 0x3f
 a04:	2b 97       	sbiw	r28, 0x0b	; 11
 a06:	2b 96       	adiw	r28, 0x0b	; 11
 a08:	8c ad       	ldd	r24, Y+60	; 0x3c
 a0a:	9d ad       	ldd	r25, Y+61	; 0x3d
 a0c:	ae ad       	ldd	r26, Y+62	; 0x3e
 a0e:	bf ad       	ldd	r27, Y+63	; 0x3f
 a10:	2b 97       	sbiw	r28, 0x0b	; 11
 a12:	8f a7       	std	Y+47, r24	; 0x2f
 a14:	98 ab       	std	Y+48, r25	; 0x30
 a16:	a9 ab       	std	Y+49, r26	; 0x31
 a18:	ba ab       	std	Y+50, r27	; 0x32
 a1a:	6f a5       	ldd	r22, Y+47	; 0x2f
 a1c:	78 a9       	ldd	r23, Y+48	; 0x30
 a1e:	89 a9       	ldd	r24, Y+49	; 0x31
 a20:	9a a9       	ldd	r25, Y+50	; 0x32
 a22:	0e 94 58 05 	call	0xab0	; 0xab0 <__fixunssfsi>
 a26:	2f 96       	adiw	r28, 0x0f	; 15
 a28:	6c af       	std	Y+60, r22	; 0x3c
 a2a:	7d af       	std	Y+61, r23	; 0x3d
 a2c:	8e af       	std	Y+62, r24	; 0x3e
 a2e:	9f af       	std	Y+63, r25	; 0x3f
 a30:	2f 97       	sbiw	r28, 0x0f	; 15
 a32:	2d 96       	adiw	r28, 0x0d	; 13
 a34:	ae ad       	ldd	r26, Y+62	; 0x3e
 a36:	bf ad       	ldd	r27, Y+63	; 0x3f
 a38:	2d 97       	sbiw	r28, 0x0d	; 13
 a3a:	b9 8f       	std	Y+25, r27	; 0x19
 a3c:	a8 8f       	std	Y+24, r26	; 0x18
		while(__ticks)
 a3e:	10 c0       	rjmp	.+32     	; 0xa60 <__stack+0x201>
 a40:	80 e9       	ldi	r24, 0x90	; 144
 a42:	91 e0       	ldi	r25, 0x01	; 1
 a44:	9b 8f       	std	Y+27, r25	; 0x1b
 a46:	8a 8f       	std	Y+26, r24	; 0x1a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 a48:	8a 8d       	ldd	r24, Y+26	; 0x1a
 a4a:	9b 8d       	ldd	r25, Y+27	; 0x1b
 a4c:	01 97       	sbiw	r24, 0x01	; 1
 a4e:	f1 f7       	brne	.-4      	; 0xa4c <__stack+0x1ed>
 a50:	9b 8f       	std	Y+27, r25	; 0x1b
 a52:	8a 8f       	std	Y+26, r24	; 0x1a
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 a54:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 a56:	88 8d       	ldd	r24, Y+24	; 0x18
 a58:	99 8d       	ldd	r25, Y+25	; 0x19
 a5a:	01 97       	sbiw	r24, 0x01	; 1
 a5c:	99 8f       	std	Y+25, r25	; 0x19
 a5e:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 a60:	88 8d       	ldd	r24, Y+24	; 0x18
 a62:	99 8d       	ldd	r25, Y+25	; 0x19
 a64:	89 2b       	or	r24, r25
 a66:	61 f7       	brne	.-40     	; 0xa40 <__stack+0x1e1>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
 a68:	1d c0       	rjmp	.+58     	; 0xaa4 <__stack+0x245>
	}
	else
		__ticks = (uint16_t)__tmp;
 a6a:	6c 89       	ldd	r22, Y+20	; 0x14
 a6c:	7d 89       	ldd	r23, Y+21	; 0x15
 a6e:	8e 89       	ldd	r24, Y+22	; 0x16
 a70:	9f 89       	ldd	r25, Y+23	; 0x17
 a72:	0e 94 58 05 	call	0xab0	; 0xab0 <__fixunssfsi>
 a76:	63 96       	adiw	r28, 0x13	; 19
 a78:	6c af       	std	Y+60, r22	; 0x3c
 a7a:	7d af       	std	Y+61, r23	; 0x3d
 a7c:	8e af       	std	Y+62, r24	; 0x3e
 a7e:	9f af       	std	Y+63, r25	; 0x3f
 a80:	63 97       	sbiw	r28, 0x13	; 19
 a82:	61 96       	adiw	r28, 0x11	; 17
 a84:	ee ad       	ldd	r30, Y+62	; 0x3e
 a86:	ff ad       	ldd	r31, Y+63	; 0x3f
 a88:	61 97       	sbiw	r28, 0x11	; 17
 a8a:	f9 8f       	std	Y+25, r31	; 0x19
 a8c:	e8 8f       	std	Y+24, r30	; 0x18
 a8e:	88 8d       	ldd	r24, Y+24	; 0x18
 a90:	99 8d       	ldd	r25, Y+25	; 0x19
 a92:	9d 8f       	std	Y+29, r25	; 0x1d
 a94:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 a96:	8c 8d       	ldd	r24, Y+28	; 0x1c
 a98:	9d 8d       	ldd	r25, Y+29	; 0x1d
 a9a:	01 97       	sbiw	r24, 0x01	; 1
 a9c:	f1 f7       	brne	.-4      	; 0xa9a <__stack+0x23b>
 a9e:	9d 8f       	std	Y+29, r25	; 0x1d
 aa0:	8c 8f       	std	Y+28, r24	; 0x1c
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 aa2:	00 00       	nop
void main(void)
{


	while(1)
	{
 aa4:	a5 ce       	rjmp	.-694    	; 0x7f0 <main+0x16>

00000aa6 <__cmpsf2>:
 aa6:	0e 94 87 05 	call	0xb0e	; 0xb0e <__fp_cmp>
 aaa:	08 f4       	brcc	.+2      	; 0xaae <__cmpsf2+0x8>
 aac:	81 e0       	ldi	r24, 0x01	; 1
 aae:	08 95       	ret

00000ab0 <__fixunssfsi>:
 ab0:	0e 94 b3 05 	call	0xb66	; 0xb66 <__fp_splitA>
 ab4:	88 f0       	brcs	.+34     	; 0xad8 <__fixunssfsi+0x28>
 ab6:	9f 57       	subi	r25, 0x7F	; 127
 ab8:	98 f0       	brcs	.+38     	; 0xae0 <__fixunssfsi+0x30>
 aba:	b9 2f       	mov	r27, r25
 abc:	99 27       	eor	r25, r25
 abe:	b7 51       	subi	r27, 0x17	; 23
 ac0:	b0 f0       	brcs	.+44     	; 0xaee <__fixunssfsi+0x3e>
 ac2:	e1 f0       	breq	.+56     	; 0xafc <__fixunssfsi+0x4c>
 ac4:	66 0f       	add	r22, r22
 ac6:	77 1f       	adc	r23, r23
 ac8:	88 1f       	adc	r24, r24
 aca:	99 1f       	adc	r25, r25
 acc:	1a f0       	brmi	.+6      	; 0xad4 <__fixunssfsi+0x24>
 ace:	ba 95       	dec	r27
 ad0:	c9 f7       	brne	.-14     	; 0xac4 <__fixunssfsi+0x14>
 ad2:	14 c0       	rjmp	.+40     	; 0xafc <__fixunssfsi+0x4c>
 ad4:	b1 30       	cpi	r27, 0x01	; 1
 ad6:	91 f0       	breq	.+36     	; 0xafc <__fixunssfsi+0x4c>
 ad8:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__fp_zero>
 adc:	b1 e0       	ldi	r27, 0x01	; 1
 ade:	08 95       	ret
 ae0:	0c 94 cd 05 	jmp	0xb9a	; 0xb9a <__fp_zero>
 ae4:	67 2f       	mov	r22, r23
 ae6:	78 2f       	mov	r23, r24
 ae8:	88 27       	eor	r24, r24
 aea:	b8 5f       	subi	r27, 0xF8	; 248
 aec:	39 f0       	breq	.+14     	; 0xafc <__fixunssfsi+0x4c>
 aee:	b9 3f       	cpi	r27, 0xF9	; 249
 af0:	cc f3       	brlt	.-14     	; 0xae4 <__fixunssfsi+0x34>
 af2:	86 95       	lsr	r24
 af4:	77 95       	ror	r23
 af6:	67 95       	ror	r22
 af8:	b3 95       	inc	r27
 afa:	d9 f7       	brne	.-10     	; 0xaf2 <__fixunssfsi+0x42>
 afc:	3e f4       	brtc	.+14     	; 0xb0c <__fixunssfsi+0x5c>
 afe:	90 95       	com	r25
 b00:	80 95       	com	r24
 b02:	70 95       	com	r23
 b04:	61 95       	neg	r22
 b06:	7f 4f       	sbci	r23, 0xFF	; 255
 b08:	8f 4f       	sbci	r24, 0xFF	; 255
 b0a:	9f 4f       	sbci	r25, 0xFF	; 255
 b0c:	08 95       	ret

00000b0e <__fp_cmp>:
 b0e:	99 0f       	add	r25, r25
 b10:	00 08       	sbc	r0, r0
 b12:	55 0f       	add	r21, r21
 b14:	aa 0b       	sbc	r26, r26
 b16:	e0 e8       	ldi	r30, 0x80	; 128
 b18:	fe ef       	ldi	r31, 0xFE	; 254
 b1a:	16 16       	cp	r1, r22
 b1c:	17 06       	cpc	r1, r23
 b1e:	e8 07       	cpc	r30, r24
 b20:	f9 07       	cpc	r31, r25
 b22:	c0 f0       	brcs	.+48     	; 0xb54 <__fp_cmp+0x46>
 b24:	12 16       	cp	r1, r18
 b26:	13 06       	cpc	r1, r19
 b28:	e4 07       	cpc	r30, r20
 b2a:	f5 07       	cpc	r31, r21
 b2c:	98 f0       	brcs	.+38     	; 0xb54 <__fp_cmp+0x46>
 b2e:	62 1b       	sub	r22, r18
 b30:	73 0b       	sbc	r23, r19
 b32:	84 0b       	sbc	r24, r20
 b34:	95 0b       	sbc	r25, r21
 b36:	39 f4       	brne	.+14     	; 0xb46 <__fp_cmp+0x38>
 b38:	0a 26       	eor	r0, r26
 b3a:	61 f0       	breq	.+24     	; 0xb54 <__fp_cmp+0x46>
 b3c:	23 2b       	or	r18, r19
 b3e:	24 2b       	or	r18, r20
 b40:	25 2b       	or	r18, r21
 b42:	21 f4       	brne	.+8      	; 0xb4c <__fp_cmp+0x3e>
 b44:	08 95       	ret
 b46:	0a 26       	eor	r0, r26
 b48:	09 f4       	brne	.+2      	; 0xb4c <__fp_cmp+0x3e>
 b4a:	a1 40       	sbci	r26, 0x01	; 1
 b4c:	a6 95       	lsr	r26
 b4e:	8f ef       	ldi	r24, 0xFF	; 255
 b50:	81 1d       	adc	r24, r1
 b52:	81 1d       	adc	r24, r1
 b54:	08 95       	ret

00000b56 <__fp_split3>:
 b56:	57 fd       	sbrc	r21, 7
 b58:	90 58       	subi	r25, 0x80	; 128
 b5a:	44 0f       	add	r20, r20
 b5c:	55 1f       	adc	r21, r21
 b5e:	59 f0       	breq	.+22     	; 0xb76 <__fp_splitA+0x10>
 b60:	5f 3f       	cpi	r21, 0xFF	; 255
 b62:	71 f0       	breq	.+28     	; 0xb80 <__fp_splitA+0x1a>
 b64:	47 95       	ror	r20

00000b66 <__fp_splitA>:
 b66:	88 0f       	add	r24, r24
 b68:	97 fb       	bst	r25, 7
 b6a:	99 1f       	adc	r25, r25
 b6c:	61 f0       	breq	.+24     	; 0xb86 <__fp_splitA+0x20>
 b6e:	9f 3f       	cpi	r25, 0xFF	; 255
 b70:	79 f0       	breq	.+30     	; 0xb90 <__fp_splitA+0x2a>
 b72:	87 95       	ror	r24
 b74:	08 95       	ret
 b76:	12 16       	cp	r1, r18
 b78:	13 06       	cpc	r1, r19
 b7a:	14 06       	cpc	r1, r20
 b7c:	55 1f       	adc	r21, r21
 b7e:	f2 cf       	rjmp	.-28     	; 0xb64 <__fp_split3+0xe>
 b80:	46 95       	lsr	r20
 b82:	f1 df       	rcall	.-30     	; 0xb66 <__fp_splitA>
 b84:	08 c0       	rjmp	.+16     	; 0xb96 <__fp_splitA+0x30>
 b86:	16 16       	cp	r1, r22
 b88:	17 06       	cpc	r1, r23
 b8a:	18 06       	cpc	r1, r24
 b8c:	99 1f       	adc	r25, r25
 b8e:	f1 cf       	rjmp	.-30     	; 0xb72 <__fp_splitA+0xc>
 b90:	86 95       	lsr	r24
 b92:	71 05       	cpc	r23, r1
 b94:	61 05       	cpc	r22, r1
 b96:	08 94       	sec
 b98:	08 95       	ret

00000b9a <__fp_zero>:
 b9a:	e8 94       	clt

00000b9c <__fp_szero>:
 b9c:	bb 27       	eor	r27, r27
 b9e:	66 27       	eor	r22, r22
 ba0:	77 27       	eor	r23, r23
 ba2:	cb 01       	movw	r24, r22
 ba4:	97 f9       	bld	r25, 7
 ba6:	08 95       	ret

00000ba8 <__gesf2>:
 ba8:	0e 94 87 05 	call	0xb0e	; 0xb0e <__fp_cmp>
 bac:	08 f4       	brcc	.+2      	; 0xbb0 <__gesf2+0x8>
 bae:	8f ef       	ldi	r24, 0xFF	; 255
 bb0:	08 95       	ret

00000bb2 <__mulsf3>:
 bb2:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <__mulsf3x>
 bb6:	0c 94 5d 06 	jmp	0xcba	; 0xcba <__fp_round>
 bba:	0e 94 4f 06 	call	0xc9e	; 0xc9e <__fp_pscA>
 bbe:	38 f0       	brcs	.+14     	; 0xbce <__mulsf3+0x1c>
 bc0:	0e 94 56 06 	call	0xcac	; 0xcac <__fp_pscB>
 bc4:	20 f0       	brcs	.+8      	; 0xbce <__mulsf3+0x1c>
 bc6:	95 23       	and	r25, r21
 bc8:	11 f0       	breq	.+4      	; 0xbce <__mulsf3+0x1c>
 bca:	0c 94 46 06 	jmp	0xc8c	; 0xc8c <__fp_inf>
 bce:	0c 94 4c 06 	jmp	0xc98	; 0xc98 <__fp_nan>
 bd2:	11 24       	eor	r1, r1
 bd4:	0c 94 ce 05 	jmp	0xb9c	; 0xb9c <__fp_szero>

00000bd8 <__mulsf3x>:
 bd8:	0e 94 ab 05 	call	0xb56	; 0xb56 <__fp_split3>
 bdc:	70 f3       	brcs	.-36     	; 0xbba <__mulsf3+0x8>

00000bde <__mulsf3_pse>:
 bde:	95 9f       	mul	r25, r21
 be0:	c1 f3       	breq	.-16     	; 0xbd2 <__mulsf3+0x20>
 be2:	95 0f       	add	r25, r21
 be4:	50 e0       	ldi	r21, 0x00	; 0
 be6:	55 1f       	adc	r21, r21
 be8:	62 9f       	mul	r22, r18
 bea:	f0 01       	movw	r30, r0
 bec:	72 9f       	mul	r23, r18
 bee:	bb 27       	eor	r27, r27
 bf0:	f0 0d       	add	r31, r0
 bf2:	b1 1d       	adc	r27, r1
 bf4:	63 9f       	mul	r22, r19
 bf6:	aa 27       	eor	r26, r26
 bf8:	f0 0d       	add	r31, r0
 bfa:	b1 1d       	adc	r27, r1
 bfc:	aa 1f       	adc	r26, r26
 bfe:	64 9f       	mul	r22, r20
 c00:	66 27       	eor	r22, r22
 c02:	b0 0d       	add	r27, r0
 c04:	a1 1d       	adc	r26, r1
 c06:	66 1f       	adc	r22, r22
 c08:	82 9f       	mul	r24, r18
 c0a:	22 27       	eor	r18, r18
 c0c:	b0 0d       	add	r27, r0
 c0e:	a1 1d       	adc	r26, r1
 c10:	62 1f       	adc	r22, r18
 c12:	73 9f       	mul	r23, r19
 c14:	b0 0d       	add	r27, r0
 c16:	a1 1d       	adc	r26, r1
 c18:	62 1f       	adc	r22, r18
 c1a:	83 9f       	mul	r24, r19
 c1c:	a0 0d       	add	r26, r0
 c1e:	61 1d       	adc	r22, r1
 c20:	22 1f       	adc	r18, r18
 c22:	74 9f       	mul	r23, r20
 c24:	33 27       	eor	r19, r19
 c26:	a0 0d       	add	r26, r0
 c28:	61 1d       	adc	r22, r1
 c2a:	23 1f       	adc	r18, r19
 c2c:	84 9f       	mul	r24, r20
 c2e:	60 0d       	add	r22, r0
 c30:	21 1d       	adc	r18, r1
 c32:	82 2f       	mov	r24, r18
 c34:	76 2f       	mov	r23, r22
 c36:	6a 2f       	mov	r22, r26
 c38:	11 24       	eor	r1, r1
 c3a:	9f 57       	subi	r25, 0x7F	; 127
 c3c:	50 40       	sbci	r21, 0x00	; 0
 c3e:	9a f0       	brmi	.+38     	; 0xc66 <__mulsf3_pse+0x88>
 c40:	f1 f0       	breq	.+60     	; 0xc7e <__mulsf3_pse+0xa0>
 c42:	88 23       	and	r24, r24
 c44:	4a f0       	brmi	.+18     	; 0xc58 <__mulsf3_pse+0x7a>
 c46:	ee 0f       	add	r30, r30
 c48:	ff 1f       	adc	r31, r31
 c4a:	bb 1f       	adc	r27, r27
 c4c:	66 1f       	adc	r22, r22
 c4e:	77 1f       	adc	r23, r23
 c50:	88 1f       	adc	r24, r24
 c52:	91 50       	subi	r25, 0x01	; 1
 c54:	50 40       	sbci	r21, 0x00	; 0
 c56:	a9 f7       	brne	.-22     	; 0xc42 <__mulsf3_pse+0x64>
 c58:	9e 3f       	cpi	r25, 0xFE	; 254
 c5a:	51 05       	cpc	r21, r1
 c5c:	80 f0       	brcs	.+32     	; 0xc7e <__mulsf3_pse+0xa0>
 c5e:	0c 94 46 06 	jmp	0xc8c	; 0xc8c <__fp_inf>
 c62:	0c 94 ce 05 	jmp	0xb9c	; 0xb9c <__fp_szero>
 c66:	5f 3f       	cpi	r21, 0xFF	; 255
 c68:	e4 f3       	brlt	.-8      	; 0xc62 <__mulsf3_pse+0x84>
 c6a:	98 3e       	cpi	r25, 0xE8	; 232
 c6c:	d4 f3       	brlt	.-12     	; 0xc62 <__mulsf3_pse+0x84>
 c6e:	86 95       	lsr	r24
 c70:	77 95       	ror	r23
 c72:	67 95       	ror	r22
 c74:	b7 95       	ror	r27
 c76:	f7 95       	ror	r31
 c78:	e7 95       	ror	r30
 c7a:	9f 5f       	subi	r25, 0xFF	; 255
 c7c:	c1 f7       	brne	.-16     	; 0xc6e <__mulsf3_pse+0x90>
 c7e:	fe 2b       	or	r31, r30
 c80:	88 0f       	add	r24, r24
 c82:	91 1d       	adc	r25, r1
 c84:	96 95       	lsr	r25
 c86:	87 95       	ror	r24
 c88:	97 f9       	bld	r25, 7
 c8a:	08 95       	ret

00000c8c <__fp_inf>:
 c8c:	97 f9       	bld	r25, 7
 c8e:	9f 67       	ori	r25, 0x7F	; 127
 c90:	80 e8       	ldi	r24, 0x80	; 128
 c92:	70 e0       	ldi	r23, 0x00	; 0
 c94:	60 e0       	ldi	r22, 0x00	; 0
 c96:	08 95       	ret

00000c98 <__fp_nan>:
 c98:	9f ef       	ldi	r25, 0xFF	; 255
 c9a:	80 ec       	ldi	r24, 0xC0	; 192
 c9c:	08 95       	ret

00000c9e <__fp_pscA>:
 c9e:	00 24       	eor	r0, r0
 ca0:	0a 94       	dec	r0
 ca2:	16 16       	cp	r1, r22
 ca4:	17 06       	cpc	r1, r23
 ca6:	18 06       	cpc	r1, r24
 ca8:	09 06       	cpc	r0, r25
 caa:	08 95       	ret

00000cac <__fp_pscB>:
 cac:	00 24       	eor	r0, r0
 cae:	0a 94       	dec	r0
 cb0:	12 16       	cp	r1, r18
 cb2:	13 06       	cpc	r1, r19
 cb4:	14 06       	cpc	r1, r20
 cb6:	05 06       	cpc	r0, r21
 cb8:	08 95       	ret

00000cba <__fp_round>:
 cba:	09 2e       	mov	r0, r25
 cbc:	03 94       	inc	r0
 cbe:	00 0c       	add	r0, r0
 cc0:	11 f4       	brne	.+4      	; 0xcc6 <__fp_round+0xc>
 cc2:	88 23       	and	r24, r24
 cc4:	52 f0       	brmi	.+20     	; 0xcda <__fp_round+0x20>
 cc6:	bb 0f       	add	r27, r27
 cc8:	40 f4       	brcc	.+16     	; 0xcda <__fp_round+0x20>
 cca:	bf 2b       	or	r27, r31
 ccc:	11 f4       	brne	.+4      	; 0xcd2 <__fp_round+0x18>
 cce:	60 ff       	sbrs	r22, 0
 cd0:	04 c0       	rjmp	.+8      	; 0xcda <__fp_round+0x20>
 cd2:	6f 5f       	subi	r22, 0xFF	; 255
 cd4:	7f 4f       	sbci	r23, 0xFF	; 255
 cd6:	8f 4f       	sbci	r24, 0xFF	; 255
 cd8:	9f 4f       	sbci	r25, 0xFF	; 255
 cda:	08 95       	ret

00000cdc <_exit>:
 cdc:	f8 94       	cli

00000cde <__stop_program>:
 cde:	ff cf       	rjmp	.-2      	; 0xcde <__stop_program>
