
ICU_SW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001786  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00001786  0000181a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800076  00800076  00001830  2**0
                  ALLOC
  3 .stab         00002e44  00000000  00000000  00001830  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001507  00000000  00000000  00004674  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00005b7b  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00005b8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000080  00000000  00000000  00005bc8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000057e  00000000  00000000  00005c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000004f3  00000000  00000000  000061c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000002bb  00000000  00000000  000066b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001f4  00000000  00000000  00006974  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 aa 07 	jmp	0xf54	; 0xf54 <__vector_1>
       8:	0c 94 fc 07 	jmp	0xff8	; 0xff8 <__vector_2>
       c:	0c 94 4e 08 	jmp	0x109c	; 0x109c <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 b1 09 	jmp	0x1362	; 0x1362 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e8       	ldi	r30, 0x86	; 134
      68:	f7 e1       	ldi	r31, 0x17	; 23
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 38       	cpi	r26, 0x83	; 131
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e6 09 	call	0x13cc	; 0x13cc <main>
      8a:	0c 94 c1 0b 	jmp	0x1782	; 0x1782 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <CLCD_voidSendCommand>:
#include"CLCD_interface.h"
#include"CLCD_private.h"


void CLCD_voidSendCommand(u8 Copy_u8Command)
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	a3 97       	sbiw	r28, 0x23	; 35
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	0f be       	out	0x3f, r0	; 63
      a4:	cd bf       	out	0x3d, r28	; 61
      a6:	8f 87       	std	Y+15, r24	; 0x0f

#if CLCD_Mode == Eight_Bit_Mode

		/*set RS pin to LOW for command*/
		DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
      a8:	40 e0       	ldi	r20, 0x00	; 0
      aa:	60 e0       	ldi	r22, 0x00	; 0
      ac:	83 e0       	ldi	r24, 0x03	; 3
      ae:	0e 94 cb 03 	call	0x796	; 0x796 <DIO_u8SetPinValue>

		/*set RW pin to Low for write*/
		DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
      b2:	40 e0       	ldi	r20, 0x00	; 0
      b4:	61 e0       	ldi	r22, 0x01	; 1
      b6:	83 e0       	ldi	r24, 0x03	; 3
      b8:	0e 94 cb 03 	call	0x796	; 0x796 <DIO_u8SetPinValue>

		/*set command  to Data pins*/
		DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Command);
      bc:	6f 85       	ldd	r22, Y+15	; 0x0f
      be:	80 e0       	ldi	r24, 0x00	; 0
      c0:	0e 94 d6 04 	call	0x9ac	; 0x9ac <DIO_u8SetPortValue>

		/*set E pin to HIGH for Enable*/
		DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
      c4:	41 e0       	ldi	r20, 0x01	; 1
      c6:	62 e0       	ldi	r22, 0x02	; 2
      c8:	83 e0       	ldi	r24, 0x03	; 3
      ca:	0e 94 cb 03 	call	0x796	; 0x796 <DIO_u8SetPinValue>
      ce:	80 e0       	ldi	r24, 0x00	; 0
      d0:	90 e0       	ldi	r25, 0x00	; 0
      d2:	a0 e0       	ldi	r26, 0x00	; 0
      d4:	b0 e4       	ldi	r27, 0x40	; 64
      d6:	89 83       	std	Y+1, r24	; 0x01
      d8:	9a 83       	std	Y+2, r25	; 0x02
      da:	ab 83       	std	Y+3, r26	; 0x03
      dc:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
      de:	20 e0       	ldi	r18, 0x00	; 0
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	4a ef       	ldi	r20, 0xFA	; 250
      e4:	54 e4       	ldi	r21, 0x44	; 68
      e6:	69 81       	ldd	r22, Y+1	; 0x01
      e8:	7a 81       	ldd	r23, Y+2	; 0x02
      ea:	8b 81       	ldd	r24, Y+3	; 0x03
      ec:	9c 81       	ldd	r25, Y+4	; 0x04
      ee:	0e 94 2c 0b 	call	0x1658	; 0x1658 <__mulsf3>
      f2:	6c 8b       	std	Y+20, r22	; 0x14
      f4:	7d 8b       	std	Y+21, r23	; 0x15
      f6:	8e 8b       	std	Y+22, r24	; 0x16
      f8:	9f 8b       	std	Y+23, r25	; 0x17
      fa:	8c 89       	ldd	r24, Y+20	; 0x14
      fc:	9d 89       	ldd	r25, Y+21	; 0x15
      fe:	ae 89       	ldd	r26, Y+22	; 0x16
     100:	bf 89       	ldd	r27, Y+23	; 0x17
     102:	8d 83       	std	Y+5, r24	; 0x05
     104:	9e 83       	std	Y+6, r25	; 0x06
     106:	af 83       	std	Y+7, r26	; 0x07
     108:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     10a:	20 e0       	ldi	r18, 0x00	; 0
     10c:	30 e0       	ldi	r19, 0x00	; 0
     10e:	40 e8       	ldi	r20, 0x80	; 128
     110:	5f e3       	ldi	r21, 0x3F	; 63
     112:	6d 81       	ldd	r22, Y+5	; 0x05
     114:	7e 81       	ldd	r23, Y+6	; 0x06
     116:	8f 81       	ldd	r24, Y+7	; 0x07
     118:	98 85       	ldd	r25, Y+8	; 0x08
     11a:	0e 94 a6 0a 	call	0x154c	; 0x154c <__cmpsf2>
     11e:	88 23       	and	r24, r24
     120:	2c f4       	brge	.+10     	; 0x12c <CLCD_voidSendCommand+0x9a>
		__ticks = 1;
     122:	81 e0       	ldi	r24, 0x01	; 1
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	9a 87       	std	Y+10, r25	; 0x0a
     128:	89 87       	std	Y+9, r24	; 0x09
     12a:	54 c0       	rjmp	.+168    	; 0x1d4 <CLCD_voidSendCommand+0x142>
	else if (__tmp > 65535)
     12c:	20 e0       	ldi	r18, 0x00	; 0
     12e:	3f ef       	ldi	r19, 0xFF	; 255
     130:	4f e7       	ldi	r20, 0x7F	; 127
     132:	57 e4       	ldi	r21, 0x47	; 71
     134:	6d 81       	ldd	r22, Y+5	; 0x05
     136:	7e 81       	ldd	r23, Y+6	; 0x06
     138:	8f 81       	ldd	r24, Y+7	; 0x07
     13a:	98 85       	ldd	r25, Y+8	; 0x08
     13c:	0e 94 27 0b 	call	0x164e	; 0x164e <__gesf2>
     140:	18 16       	cp	r1, r24
     142:	d4 f5       	brge	.+116    	; 0x1b8 <CLCD_voidSendCommand+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     144:	20 e0       	ldi	r18, 0x00	; 0
     146:	30 e0       	ldi	r19, 0x00	; 0
     148:	40 e2       	ldi	r20, 0x20	; 32
     14a:	51 e4       	ldi	r21, 0x41	; 65
     14c:	69 81       	ldd	r22, Y+1	; 0x01
     14e:	7a 81       	ldd	r23, Y+2	; 0x02
     150:	8b 81       	ldd	r24, Y+3	; 0x03
     152:	9c 81       	ldd	r25, Y+4	; 0x04
     154:	0e 94 2c 0b 	call	0x1658	; 0x1658 <__mulsf3>
     158:	68 8f       	std	Y+24, r22	; 0x18
     15a:	79 8f       	std	Y+25, r23	; 0x19
     15c:	8a 8f       	std	Y+26, r24	; 0x1a
     15e:	9b 8f       	std	Y+27, r25	; 0x1b
     160:	88 8d       	ldd	r24, Y+24	; 0x18
     162:	99 8d       	ldd	r25, Y+25	; 0x19
     164:	aa 8d       	ldd	r26, Y+26	; 0x1a
     166:	bb 8d       	ldd	r27, Y+27	; 0x1b
     168:	88 8b       	std	Y+16, r24	; 0x10
     16a:	99 8b       	std	Y+17, r25	; 0x11
     16c:	aa 8b       	std	Y+18, r26	; 0x12
     16e:	bb 8b       	std	Y+19, r27	; 0x13
     170:	68 89       	ldd	r22, Y+16	; 0x10
     172:	79 89       	ldd	r23, Y+17	; 0x11
     174:	8a 89       	ldd	r24, Y+18	; 0x12
     176:	9b 89       	ldd	r25, Y+19	; 0x13
     178:	0e 94 ab 0a 	call	0x1556	; 0x1556 <__fixunssfsi>
     17c:	6c 8f       	std	Y+28, r22	; 0x1c
     17e:	7d 8f       	std	Y+29, r23	; 0x1d
     180:	8e 8f       	std	Y+30, r24	; 0x1e
     182:	9f 8f       	std	Y+31, r25	; 0x1f
     184:	ac 8d       	ldd	r26, Y+28	; 0x1c
     186:	bd 8d       	ldd	r27, Y+29	; 0x1d
     188:	ba 87       	std	Y+10, r27	; 0x0a
     18a:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
     18c:	10 c0       	rjmp	.+32     	; 0x1ae <CLCD_voidSendCommand+0x11c>
     18e:	88 ec       	ldi	r24, 0xC8	; 200
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	9c 87       	std	Y+12, r25	; 0x0c
     194:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     196:	8b 85       	ldd	r24, Y+11	; 0x0b
     198:	9c 85       	ldd	r25, Y+12	; 0x0c
     19a:	01 97       	sbiw	r24, 0x01	; 1
     19c:	f1 f7       	brne	.-4      	; 0x19a <CLCD_voidSendCommand+0x108>
     19e:	9c 87       	std	Y+12, r25	; 0x0c
     1a0:	8b 87       	std	Y+11, r24	; 0x0b
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
     1a2:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1a4:	89 85       	ldd	r24, Y+9	; 0x09
     1a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     1a8:	01 97       	sbiw	r24, 0x01	; 1
     1aa:	9a 87       	std	Y+10, r25	; 0x0a
     1ac:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1ae:	89 85       	ldd	r24, Y+9	; 0x09
     1b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     1b2:	89 2b       	or	r24, r25
     1b4:	61 f7       	brne	.-40     	; 0x18e <CLCD_voidSendCommand+0xfc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
     1b6:	19 c0       	rjmp	.+50     	; 0x1ea <CLCD_voidSendCommand+0x158>
	}
	else
		__ticks = (uint16_t)__tmp;
     1b8:	6d 81       	ldd	r22, Y+5	; 0x05
     1ba:	7e 81       	ldd	r23, Y+6	; 0x06
     1bc:	8f 81       	ldd	r24, Y+7	; 0x07
     1be:	98 85       	ldd	r25, Y+8	; 0x08
     1c0:	0e 94 ab 0a 	call	0x1556	; 0x1556 <__fixunssfsi>
     1c4:	68 a3       	std	Y+32, r22	; 0x20
     1c6:	79 a3       	std	Y+33, r23	; 0x21
     1c8:	8a a3       	std	Y+34, r24	; 0x22
     1ca:	9b a3       	std	Y+35, r25	; 0x23
     1cc:	88 a1       	ldd	r24, Y+32	; 0x20
     1ce:	99 a1       	ldd	r25, Y+33	; 0x21
     1d0:	9a 87       	std	Y+10, r25	; 0x0a
     1d2:	89 87       	std	Y+9, r24	; 0x09
     1d4:	89 85       	ldd	r24, Y+9	; 0x09
     1d6:	9a 85       	ldd	r25, Y+10	; 0x0a
     1d8:	9e 87       	std	Y+14, r25	; 0x0e
     1da:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1dc:	8d 85       	ldd	r24, Y+13	; 0x0d
     1de:	9e 85       	ldd	r25, Y+14	; 0x0e
     1e0:	01 97       	sbiw	r24, 0x01	; 1
     1e2:	f1 f7       	brne	.-4      	; 0x1e0 <CLCD_voidSendCommand+0x14e>
     1e4:	9e 87       	std	Y+14, r25	; 0x0e
     1e6:	8d 87       	std	Y+13, r24	; 0x0d
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
     1e8:	00 00       	nop
		_delay_ms(2);
		DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     1ea:	40 e0       	ldi	r20, 0x00	; 0
     1ec:	62 e0       	ldi	r22, 0x02	; 2
     1ee:	83 e0       	ldi	r24, 0x03	; 3
     1f0:	0e 94 cb 03 	call	0x796	; 0x796 <DIO_u8SetPinValue>
				DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);

#else
#error "Wrong CLCD Mode Configurations"
#endif
}
     1f4:	00 00       	nop
     1f6:	a3 96       	adiw	r28, 0x23	; 35
     1f8:	0f b6       	in	r0, 0x3f	; 63
     1fa:	f8 94       	cli
     1fc:	de bf       	out	0x3e, r29	; 62
     1fe:	0f be       	out	0x3f, r0	; 63
     200:	cd bf       	out	0x3d, r28	; 61
     202:	df 91       	pop	r29
     204:	cf 91       	pop	r28
     206:	08 95       	ret

00000208 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
     208:	cf 93       	push	r28
     20a:	df 93       	push	r29
     20c:	cd b7       	in	r28, 0x3d	; 61
     20e:	de b7       	in	r29, 0x3e	; 62
     210:	a3 97       	sbiw	r28, 0x23	; 35
     212:	0f b6       	in	r0, 0x3f	; 63
     214:	f8 94       	cli
     216:	de bf       	out	0x3e, r29	; 62
     218:	0f be       	out	0x3f, r0	; 63
     21a:	cd bf       	out	0x3d, r28	; 61
     21c:	8f 87       	std	Y+15, r24	; 0x0f

#if CLCD_Mode == Eight_Bit_Mode

	/*set RS pin to LOW for Data*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
     21e:	41 e0       	ldi	r20, 0x01	; 1
     220:	60 e0       	ldi	r22, 0x00	; 0
     222:	83 e0       	ldi	r24, 0x03	; 3
     224:	0e 94 cb 03 	call	0x796	; 0x796 <DIO_u8SetPinValue>

	/*set RW pin to HIGH for write*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     228:	40 e0       	ldi	r20, 0x00	; 0
     22a:	61 e0       	ldi	r22, 0x01	; 1
     22c:	83 e0       	ldi	r24, 0x03	; 3
     22e:	0e 94 cb 03 	call	0x796	; 0x796 <DIO_u8SetPinValue>

	/*set data  to Data pins*/
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Data);
     232:	6f 85       	ldd	r22, Y+15	; 0x0f
     234:	80 e0       	ldi	r24, 0x00	; 0
     236:	0e 94 d6 04 	call	0x9ac	; 0x9ac <DIO_u8SetPortValue>

	/*Send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     23a:	41 e0       	ldi	r20, 0x01	; 1
     23c:	62 e0       	ldi	r22, 0x02	; 2
     23e:	83 e0       	ldi	r24, 0x03	; 3
     240:	0e 94 cb 03 	call	0x796	; 0x796 <DIO_u8SetPinValue>
     244:	80 e0       	ldi	r24, 0x00	; 0
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	a0 e0       	ldi	r26, 0x00	; 0
     24a:	b0 e4       	ldi	r27, 0x40	; 64
     24c:	89 83       	std	Y+1, r24	; 0x01
     24e:	9a 83       	std	Y+2, r25	; 0x02
     250:	ab 83       	std	Y+3, r26	; 0x03
     252:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     254:	20 e0       	ldi	r18, 0x00	; 0
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	4a ef       	ldi	r20, 0xFA	; 250
     25a:	54 e4       	ldi	r21, 0x44	; 68
     25c:	69 81       	ldd	r22, Y+1	; 0x01
     25e:	7a 81       	ldd	r23, Y+2	; 0x02
     260:	8b 81       	ldd	r24, Y+3	; 0x03
     262:	9c 81       	ldd	r25, Y+4	; 0x04
     264:	0e 94 2c 0b 	call	0x1658	; 0x1658 <__mulsf3>
     268:	6c 8b       	std	Y+20, r22	; 0x14
     26a:	7d 8b       	std	Y+21, r23	; 0x15
     26c:	8e 8b       	std	Y+22, r24	; 0x16
     26e:	9f 8b       	std	Y+23, r25	; 0x17
     270:	8c 89       	ldd	r24, Y+20	; 0x14
     272:	9d 89       	ldd	r25, Y+21	; 0x15
     274:	ae 89       	ldd	r26, Y+22	; 0x16
     276:	bf 89       	ldd	r27, Y+23	; 0x17
     278:	8d 83       	std	Y+5, r24	; 0x05
     27a:	9e 83       	std	Y+6, r25	; 0x06
     27c:	af 83       	std	Y+7, r26	; 0x07
     27e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     280:	20 e0       	ldi	r18, 0x00	; 0
     282:	30 e0       	ldi	r19, 0x00	; 0
     284:	40 e8       	ldi	r20, 0x80	; 128
     286:	5f e3       	ldi	r21, 0x3F	; 63
     288:	6d 81       	ldd	r22, Y+5	; 0x05
     28a:	7e 81       	ldd	r23, Y+6	; 0x06
     28c:	8f 81       	ldd	r24, Y+7	; 0x07
     28e:	98 85       	ldd	r25, Y+8	; 0x08
     290:	0e 94 a6 0a 	call	0x154c	; 0x154c <__cmpsf2>
     294:	88 23       	and	r24, r24
     296:	2c f4       	brge	.+10     	; 0x2a2 <CLCD_voidSendData+0x9a>
		__ticks = 1;
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	9a 87       	std	Y+10, r25	; 0x0a
     29e:	89 87       	std	Y+9, r24	; 0x09
     2a0:	54 c0       	rjmp	.+168    	; 0x34a <CLCD_voidSendData+0x142>
	else if (__tmp > 65535)
     2a2:	20 e0       	ldi	r18, 0x00	; 0
     2a4:	3f ef       	ldi	r19, 0xFF	; 255
     2a6:	4f e7       	ldi	r20, 0x7F	; 127
     2a8:	57 e4       	ldi	r21, 0x47	; 71
     2aa:	6d 81       	ldd	r22, Y+5	; 0x05
     2ac:	7e 81       	ldd	r23, Y+6	; 0x06
     2ae:	8f 81       	ldd	r24, Y+7	; 0x07
     2b0:	98 85       	ldd	r25, Y+8	; 0x08
     2b2:	0e 94 27 0b 	call	0x164e	; 0x164e <__gesf2>
     2b6:	18 16       	cp	r1, r24
     2b8:	d4 f5       	brge	.+116    	; 0x32e <CLCD_voidSendData+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     2ba:	20 e0       	ldi	r18, 0x00	; 0
     2bc:	30 e0       	ldi	r19, 0x00	; 0
     2be:	40 e2       	ldi	r20, 0x20	; 32
     2c0:	51 e4       	ldi	r21, 0x41	; 65
     2c2:	69 81       	ldd	r22, Y+1	; 0x01
     2c4:	7a 81       	ldd	r23, Y+2	; 0x02
     2c6:	8b 81       	ldd	r24, Y+3	; 0x03
     2c8:	9c 81       	ldd	r25, Y+4	; 0x04
     2ca:	0e 94 2c 0b 	call	0x1658	; 0x1658 <__mulsf3>
     2ce:	68 8f       	std	Y+24, r22	; 0x18
     2d0:	79 8f       	std	Y+25, r23	; 0x19
     2d2:	8a 8f       	std	Y+26, r24	; 0x1a
     2d4:	9b 8f       	std	Y+27, r25	; 0x1b
     2d6:	88 8d       	ldd	r24, Y+24	; 0x18
     2d8:	99 8d       	ldd	r25, Y+25	; 0x19
     2da:	aa 8d       	ldd	r26, Y+26	; 0x1a
     2dc:	bb 8d       	ldd	r27, Y+27	; 0x1b
     2de:	88 8b       	std	Y+16, r24	; 0x10
     2e0:	99 8b       	std	Y+17, r25	; 0x11
     2e2:	aa 8b       	std	Y+18, r26	; 0x12
     2e4:	bb 8b       	std	Y+19, r27	; 0x13
     2e6:	68 89       	ldd	r22, Y+16	; 0x10
     2e8:	79 89       	ldd	r23, Y+17	; 0x11
     2ea:	8a 89       	ldd	r24, Y+18	; 0x12
     2ec:	9b 89       	ldd	r25, Y+19	; 0x13
     2ee:	0e 94 ab 0a 	call	0x1556	; 0x1556 <__fixunssfsi>
     2f2:	6c 8f       	std	Y+28, r22	; 0x1c
     2f4:	7d 8f       	std	Y+29, r23	; 0x1d
     2f6:	8e 8f       	std	Y+30, r24	; 0x1e
     2f8:	9f 8f       	std	Y+31, r25	; 0x1f
     2fa:	ac 8d       	ldd	r26, Y+28	; 0x1c
     2fc:	bd 8d       	ldd	r27, Y+29	; 0x1d
     2fe:	ba 87       	std	Y+10, r27	; 0x0a
     300:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
     302:	10 c0       	rjmp	.+32     	; 0x324 <CLCD_voidSendData+0x11c>
     304:	88 ec       	ldi	r24, 0xC8	; 200
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	9c 87       	std	Y+12, r25	; 0x0c
     30a:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     30c:	8b 85       	ldd	r24, Y+11	; 0x0b
     30e:	9c 85       	ldd	r25, Y+12	; 0x0c
     310:	01 97       	sbiw	r24, 0x01	; 1
     312:	f1 f7       	brne	.-4      	; 0x310 <CLCD_voidSendData+0x108>
     314:	9c 87       	std	Y+12, r25	; 0x0c
     316:	8b 87       	std	Y+11, r24	; 0x0b
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
     318:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     31a:	89 85       	ldd	r24, Y+9	; 0x09
     31c:	9a 85       	ldd	r25, Y+10	; 0x0a
     31e:	01 97       	sbiw	r24, 0x01	; 1
     320:	9a 87       	std	Y+10, r25	; 0x0a
     322:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     324:	89 85       	ldd	r24, Y+9	; 0x09
     326:	9a 85       	ldd	r25, Y+10	; 0x0a
     328:	89 2b       	or	r24, r25
     32a:	61 f7       	brne	.-40     	; 0x304 <CLCD_voidSendData+0xfc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
     32c:	19 c0       	rjmp	.+50     	; 0x360 <CLCD_voidSendData+0x158>
	}
	else
		__ticks = (uint16_t)__tmp;
     32e:	6d 81       	ldd	r22, Y+5	; 0x05
     330:	7e 81       	ldd	r23, Y+6	; 0x06
     332:	8f 81       	ldd	r24, Y+7	; 0x07
     334:	98 85       	ldd	r25, Y+8	; 0x08
     336:	0e 94 ab 0a 	call	0x1556	; 0x1556 <__fixunssfsi>
     33a:	68 a3       	std	Y+32, r22	; 0x20
     33c:	79 a3       	std	Y+33, r23	; 0x21
     33e:	8a a3       	std	Y+34, r24	; 0x22
     340:	9b a3       	std	Y+35, r25	; 0x23
     342:	88 a1       	ldd	r24, Y+32	; 0x20
     344:	99 a1       	ldd	r25, Y+33	; 0x21
     346:	9a 87       	std	Y+10, r25	; 0x0a
     348:	89 87       	std	Y+9, r24	; 0x09
     34a:	89 85       	ldd	r24, Y+9	; 0x09
     34c:	9a 85       	ldd	r25, Y+10	; 0x0a
     34e:	9e 87       	std	Y+14, r25	; 0x0e
     350:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     352:	8d 85       	ldd	r24, Y+13	; 0x0d
     354:	9e 85       	ldd	r25, Y+14	; 0x0e
     356:	01 97       	sbiw	r24, 0x01	; 1
     358:	f1 f7       	brne	.-4      	; 0x356 <CLCD_voidSendData+0x14e>
     35a:	9e 87       	std	Y+14, r25	; 0x0e
     35c:	8d 87       	std	Y+13, r24	; 0x0d
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
     35e:	00 00       	nop
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     360:	40 e0       	ldi	r20, 0x00	; 0
     362:	62 e0       	ldi	r22, 0x02	; 2
     364:	83 e0       	ldi	r24, 0x03	; 3
     366:	0e 94 cb 03 	call	0x796	; 0x796 <DIO_u8SetPinValue>
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);

#endif

}
     36a:	00 00       	nop
     36c:	a3 96       	adiw	r28, 0x23	; 35
     36e:	0f b6       	in	r0, 0x3f	; 63
     370:	f8 94       	cli
     372:	de bf       	out	0x3e, r29	; 62
     374:	0f be       	out	0x3f, r0	; 63
     376:	cd bf       	out	0x3d, r28	; 61
     378:	df 91       	pop	r29
     37a:	cf 91       	pop	r28
     37c:	08 95       	ret

0000037e <CLCD_voidInit>:

void CLCD_voidInit(void)
{
     37e:	cf 93       	push	r28
     380:	df 93       	push	r29
     382:	cd b7       	in	r28, 0x3d	; 61
     384:	de b7       	in	r29, 0x3e	; 62
     386:	a2 97       	sbiw	r28, 0x22	; 34
     388:	0f b6       	in	r0, 0x3f	; 63
     38a:	f8 94       	cli
     38c:	de bf       	out	0x3e, r29	; 62
     38e:	0f be       	out	0x3f, r0	; 63
     390:	cd bf       	out	0x3d, r28	; 61
     392:	80 e0       	ldi	r24, 0x00	; 0
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	a0 e2       	ldi	r26, 0x20	; 32
     398:	b2 e4       	ldi	r27, 0x42	; 66
     39a:	89 83       	std	Y+1, r24	; 0x01
     39c:	9a 83       	std	Y+2, r25	; 0x02
     39e:	ab 83       	std	Y+3, r26	; 0x03
     3a0:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     3a2:	20 e0       	ldi	r18, 0x00	; 0
     3a4:	30 e0       	ldi	r19, 0x00	; 0
     3a6:	4a ef       	ldi	r20, 0xFA	; 250
     3a8:	54 e4       	ldi	r21, 0x44	; 68
     3aa:	69 81       	ldd	r22, Y+1	; 0x01
     3ac:	7a 81       	ldd	r23, Y+2	; 0x02
     3ae:	8b 81       	ldd	r24, Y+3	; 0x03
     3b0:	9c 81       	ldd	r25, Y+4	; 0x04
     3b2:	0e 94 2c 0b 	call	0x1658	; 0x1658 <__mulsf3>
     3b6:	6b 8b       	std	Y+19, r22	; 0x13
     3b8:	7c 8b       	std	Y+20, r23	; 0x14
     3ba:	8d 8b       	std	Y+21, r24	; 0x15
     3bc:	9e 8b       	std	Y+22, r25	; 0x16
     3be:	8b 89       	ldd	r24, Y+19	; 0x13
     3c0:	9c 89       	ldd	r25, Y+20	; 0x14
     3c2:	ad 89       	ldd	r26, Y+21	; 0x15
     3c4:	be 89       	ldd	r27, Y+22	; 0x16
     3c6:	8d 83       	std	Y+5, r24	; 0x05
     3c8:	9e 83       	std	Y+6, r25	; 0x06
     3ca:	af 83       	std	Y+7, r26	; 0x07
     3cc:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     3ce:	20 e0       	ldi	r18, 0x00	; 0
     3d0:	30 e0       	ldi	r19, 0x00	; 0
     3d2:	40 e8       	ldi	r20, 0x80	; 128
     3d4:	5f e3       	ldi	r21, 0x3F	; 63
     3d6:	6d 81       	ldd	r22, Y+5	; 0x05
     3d8:	7e 81       	ldd	r23, Y+6	; 0x06
     3da:	8f 81       	ldd	r24, Y+7	; 0x07
     3dc:	98 85       	ldd	r25, Y+8	; 0x08
     3de:	0e 94 a6 0a 	call	0x154c	; 0x154c <__cmpsf2>
     3e2:	88 23       	and	r24, r24
     3e4:	2c f4       	brge	.+10     	; 0x3f0 <CLCD_voidInit+0x72>
		__ticks = 1;
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	9a 87       	std	Y+10, r25	; 0x0a
     3ec:	89 87       	std	Y+9, r24	; 0x09
     3ee:	54 c0       	rjmp	.+168    	; 0x498 <__FUSE_REGION_LENGTH__+0x98>
	else if (__tmp > 65535)
     3f0:	20 e0       	ldi	r18, 0x00	; 0
     3f2:	3f ef       	ldi	r19, 0xFF	; 255
     3f4:	4f e7       	ldi	r20, 0x7F	; 127
     3f6:	57 e4       	ldi	r21, 0x47	; 71
     3f8:	6d 81       	ldd	r22, Y+5	; 0x05
     3fa:	7e 81       	ldd	r23, Y+6	; 0x06
     3fc:	8f 81       	ldd	r24, Y+7	; 0x07
     3fe:	98 85       	ldd	r25, Y+8	; 0x08
     400:	0e 94 27 0b 	call	0x164e	; 0x164e <__gesf2>
     404:	18 16       	cp	r1, r24
     406:	d4 f5       	brge	.+116    	; 0x47c <__FUSE_REGION_LENGTH__+0x7c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     408:	20 e0       	ldi	r18, 0x00	; 0
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	40 e2       	ldi	r20, 0x20	; 32
     40e:	51 e4       	ldi	r21, 0x41	; 65
     410:	69 81       	ldd	r22, Y+1	; 0x01
     412:	7a 81       	ldd	r23, Y+2	; 0x02
     414:	8b 81       	ldd	r24, Y+3	; 0x03
     416:	9c 81       	ldd	r25, Y+4	; 0x04
     418:	0e 94 2c 0b 	call	0x1658	; 0x1658 <__mulsf3>
     41c:	6f 8b       	std	Y+23, r22	; 0x17
     41e:	78 8f       	std	Y+24, r23	; 0x18
     420:	89 8f       	std	Y+25, r24	; 0x19
     422:	9a 8f       	std	Y+26, r25	; 0x1a
     424:	8f 89       	ldd	r24, Y+23	; 0x17
     426:	98 8d       	ldd	r25, Y+24	; 0x18
     428:	a9 8d       	ldd	r26, Y+25	; 0x19
     42a:	ba 8d       	ldd	r27, Y+26	; 0x1a
     42c:	8f 87       	std	Y+15, r24	; 0x0f
     42e:	98 8b       	std	Y+16, r25	; 0x10
     430:	a9 8b       	std	Y+17, r26	; 0x11
     432:	ba 8b       	std	Y+18, r27	; 0x12
     434:	6f 85       	ldd	r22, Y+15	; 0x0f
     436:	78 89       	ldd	r23, Y+16	; 0x10
     438:	89 89       	ldd	r24, Y+17	; 0x11
     43a:	9a 89       	ldd	r25, Y+18	; 0x12
     43c:	0e 94 ab 0a 	call	0x1556	; 0x1556 <__fixunssfsi>
     440:	6b 8f       	std	Y+27, r22	; 0x1b
     442:	7c 8f       	std	Y+28, r23	; 0x1c
     444:	8d 8f       	std	Y+29, r24	; 0x1d
     446:	9e 8f       	std	Y+30, r25	; 0x1e
     448:	ab 8d       	ldd	r26, Y+27	; 0x1b
     44a:	bc 8d       	ldd	r27, Y+28	; 0x1c
     44c:	ba 87       	std	Y+10, r27	; 0x0a
     44e:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
     450:	10 c0       	rjmp	.+32     	; 0x472 <__FUSE_REGION_LENGTH__+0x72>
     452:	88 ec       	ldi	r24, 0xC8	; 200
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	9c 87       	std	Y+12, r25	; 0x0c
     458:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     45a:	8b 85       	ldd	r24, Y+11	; 0x0b
     45c:	9c 85       	ldd	r25, Y+12	; 0x0c
     45e:	01 97       	sbiw	r24, 0x01	; 1
     460:	f1 f7       	brne	.-4      	; 0x45e <__FUSE_REGION_LENGTH__+0x5e>
     462:	9c 87       	std	Y+12, r25	; 0x0c
     464:	8b 87       	std	Y+11, r24	; 0x0b
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
     466:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     468:	89 85       	ldd	r24, Y+9	; 0x09
     46a:	9a 85       	ldd	r25, Y+10	; 0x0a
     46c:	01 97       	sbiw	r24, 0x01	; 1
     46e:	9a 87       	std	Y+10, r25	; 0x0a
     470:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     472:	89 85       	ldd	r24, Y+9	; 0x09
     474:	9a 85       	ldd	r25, Y+10	; 0x0a
     476:	89 2b       	or	r24, r25
     478:	61 f7       	brne	.-40     	; 0x452 <__FUSE_REGION_LENGTH__+0x52>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
     47a:	19 c0       	rjmp	.+50     	; 0x4ae <__FUSE_REGION_LENGTH__+0xae>
	}
	else
		__ticks = (uint16_t)__tmp;
     47c:	6d 81       	ldd	r22, Y+5	; 0x05
     47e:	7e 81       	ldd	r23, Y+6	; 0x06
     480:	8f 81       	ldd	r24, Y+7	; 0x07
     482:	98 85       	ldd	r25, Y+8	; 0x08
     484:	0e 94 ab 0a 	call	0x1556	; 0x1556 <__fixunssfsi>
     488:	6f 8f       	std	Y+31, r22	; 0x1f
     48a:	78 a3       	std	Y+32, r23	; 0x20
     48c:	89 a3       	std	Y+33, r24	; 0x21
     48e:	9a a3       	std	Y+34, r25	; 0x22
     490:	8f 8d       	ldd	r24, Y+31	; 0x1f
     492:	98 a1       	ldd	r25, Y+32	; 0x20
     494:	9a 87       	std	Y+10, r25	; 0x0a
     496:	89 87       	std	Y+9, r24	; 0x09
     498:	89 85       	ldd	r24, Y+9	; 0x09
     49a:	9a 85       	ldd	r25, Y+10	; 0x0a
     49c:	9e 87       	std	Y+14, r25	; 0x0e
     49e:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     4a0:	8d 85       	ldd	r24, Y+13	; 0x0d
     4a2:	9e 85       	ldd	r25, Y+14	; 0x0e
     4a4:	01 97       	sbiw	r24, 0x01	; 1
     4a6:	f1 f7       	brne	.-4      	; 0x4a4 <__FUSE_REGION_LENGTH__+0xa4>
     4a8:	9e 87       	std	Y+14, r25	; 0x0e
     4aa:	8d 87       	std	Y+13, r24	; 0x0d
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
     4ac:	00 00       	nop

	/*wait for more than 30ms*/
	_delay_ms(40);

	/*function set command: 2 lines"1", 5*8 Font Size"0"*/
	CLCD_voidSendCommand(0b00111000);
     4ae:	88 e3       	ldi	r24, 0x38	; 56
     4b0:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_voidSendCommand>

	/*Display ON/OFF control: display enable, disable cursor, no blink cursor*/
	CLCD_voidSendCommand(0b00001100);
     4b4:	8c e0       	ldi	r24, 0x0C	; 12
     4b6:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_voidSendCommand>

 	/*Display clear*/
	CLCD_voidSendCommand(1);
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_voidSendCommand>

		/*Display Clear*/
		CLCD_voidSendCommand(0b00000001);

#endif
}
     4c0:	00 00       	nop
     4c2:	a2 96       	adiw	r28, 0x22	; 34
     4c4:	0f b6       	in	r0, 0x3f	; 63
     4c6:	f8 94       	cli
     4c8:	de bf       	out	0x3e, r29	; 62
     4ca:	0f be       	out	0x3f, r0	; 63
     4cc:	cd bf       	out	0x3d, r28	; 61
     4ce:	df 91       	pop	r29
     4d0:	cf 91       	pop	r28
     4d2:	08 95       	ret

000004d4 <CLCD_voidSendString>:

void CLCD_voidSendString(const char*Copy_pcString )
{
     4d4:	cf 93       	push	r28
     4d6:	df 93       	push	r29
     4d8:	00 d0       	rcall	.+0      	; 0x4da <CLCD_voidSendString+0x6>
     4da:	0f 92       	push	r0
     4dc:	cd b7       	in	r28, 0x3d	; 61
     4de:	de b7       	in	r29, 0x3e	; 62
     4e0:	9b 83       	std	Y+3, r25	; 0x03
     4e2:	8a 83       	std	Y+2, r24	; 0x02
	//any variable carry ASCII value should be char not unsigned or signed
	u8 Local_u8Counter=0;
     4e4:	19 82       	std	Y+1, r1	; 0x01
	while(Copy_pcString[Local_u8Counter]!='\0')
     4e6:	0e c0       	rjmp	.+28     	; 0x504 <CLCD_voidSendString+0x30>
	{
	CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
     4e8:	89 81       	ldd	r24, Y+1	; 0x01
     4ea:	88 2f       	mov	r24, r24
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	2a 81       	ldd	r18, Y+2	; 0x02
     4f0:	3b 81       	ldd	r19, Y+3	; 0x03
     4f2:	82 0f       	add	r24, r18
     4f4:	93 1f       	adc	r25, r19
     4f6:	fc 01       	movw	r30, r24
     4f8:	80 81       	ld	r24, Z
     4fa:	0e 94 04 01 	call	0x208	; 0x208 <CLCD_voidSendData>
	Local_u8Counter++;
     4fe:	89 81       	ldd	r24, Y+1	; 0x01
     500:	8f 5f       	subi	r24, 0xFF	; 255
     502:	89 83       	std	Y+1, r24	; 0x01

void CLCD_voidSendString(const char*Copy_pcString )
{
	//any variable carry ASCII value should be char not unsigned or signed
	u8 Local_u8Counter=0;
	while(Copy_pcString[Local_u8Counter]!='\0')
     504:	89 81       	ldd	r24, Y+1	; 0x01
     506:	88 2f       	mov	r24, r24
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	2a 81       	ldd	r18, Y+2	; 0x02
     50c:	3b 81       	ldd	r19, Y+3	; 0x03
     50e:	82 0f       	add	r24, r18
     510:	93 1f       	adc	r25, r19
     512:	fc 01       	movw	r30, r24
     514:	80 81       	ld	r24, Z
     516:	88 23       	and	r24, r24
     518:	39 f7       	brne	.-50     	; 0x4e8 <CLCD_voidSendString+0x14>
	{
	CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
	Local_u8Counter++;
	}

}
     51a:	00 00       	nop
     51c:	00 00       	nop
     51e:	0f 90       	pop	r0
     520:	0f 90       	pop	r0
     522:	0f 90       	pop	r0
     524:	df 91       	pop	r29
     526:	cf 91       	pop	r28
     528:	08 95       	ret

0000052a <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos)
{
     52a:	cf 93       	push	r28
     52c:	df 93       	push	r29
     52e:	00 d0       	rcall	.+0      	; 0x530 <CLCD_voidGoToXY+0x6>
     530:	00 d0       	rcall	.+0      	; 0x532 <CLCD_voidGoToXY+0x8>
     532:	cd b7       	in	r28, 0x3d	; 61
     534:	de b7       	in	r29, 0x3e	; 62
     536:	8b 83       	std	Y+3, r24	; 0x03
     538:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState=0;
     53a:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Address;
	if(Copy_u8XPos==0)
     53c:	8b 81       	ldd	r24, Y+3	; 0x03
     53e:	88 23       	and	r24, r24
     540:	19 f4       	brne	.+6      	; 0x548 <CLCD_voidGoToXY+0x1e>
	{
		/*Location is at first line in CLCD 16*2*/
		Local_u8Address=Copy_u8YPos;
     542:	8c 81       	ldd	r24, Y+4	; 0x04
     544:	89 83       	std	Y+1, r24	; 0x01
     546:	06 c0       	rjmp	.+12     	; 0x554 <CLCD_voidGoToXY+0x2a>
	}
	else if(Copy_u8XPos==1)
     548:	8b 81       	ldd	r24, Y+3	; 0x03
     54a:	81 30       	cpi	r24, 0x01	; 1
     54c:	19 f4       	brne	.+6      	; 0x554 <CLCD_voidGoToXY+0x2a>
	{
		/*Location is at Second line in CLCD 16*2*/
		Local_u8Address=Copy_u8YPos+0x40;
     54e:	8c 81       	ldd	r24, Y+4	; 0x04
     550:	80 5c       	subi	r24, 0xC0	; 192
     552:	89 83       	std	Y+1, r24	; 0x01
	}
	/*set bit number 7 for set DDRAM Address command then send the command*/
	CLCD_voidSendCommand(Local_u8Address+128);
     554:	89 81       	ldd	r24, Y+1	; 0x01
     556:	80 58       	subi	r24, 0x80	; 128
     558:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_voidSendCommand>
}
     55c:	00 00       	nop
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
     562:	0f 90       	pop	r0
     564:	0f 90       	pop	r0
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	08 95       	ret

0000056c <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8*Copy_pu8Pattern,u8 Copy_u8PatternNumber,u8 Copy_u8XPos,u8 Copy_u8YPos)
{
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
     570:	00 d0       	rcall	.+0      	; 0x572 <CLCD_voidWriteSpecialCharacter+0x6>
     572:	00 d0       	rcall	.+0      	; 0x574 <CLCD_voidWriteSpecialCharacter+0x8>
     574:	00 d0       	rcall	.+0      	; 0x576 <CLCD_voidWriteSpecialCharacter+0xa>
     576:	0f 92       	push	r0
     578:	cd b7       	in	r28, 0x3d	; 61
     57a:	de b7       	in	r29, 0x3e	; 62
     57c:	9c 83       	std	Y+4, r25	; 0x04
     57e:	8b 83       	std	Y+3, r24	; 0x03
     580:	6d 83       	std	Y+5, r22	; 0x05
     582:	4e 83       	std	Y+6, r20	; 0x06
     584:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress=0,Local_u8Iterator;
     586:	1a 82       	std	Y+2, r1	; 0x02

	/*calculate the CGRAM Address whose each block is 8 bytes */
	Local_u8CGRAMAddress=Copy_u8PatternNumber*8;
     588:	8d 81       	ldd	r24, Y+5	; 0x05
     58a:	88 0f       	add	r24, r24
     58c:	88 0f       	add	r24, r24
     58e:	88 0f       	add	r24, r24
     590:	8a 83       	std	Y+2, r24	; 0x02

	/*send CGRAM Address command to LCD, with setting bit 6,clearing bit 7*/
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);
     592:	8a 81       	ldd	r24, Y+2	; 0x02
     594:	80 5c       	subi	r24, 0xC0	; 192
     596:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_voidSendCommand>

	/*write pattern into CGRAM*/
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
     59a:	19 82       	std	Y+1, r1	; 0x01
     59c:	0e c0       	rjmp	.+28     	; 0x5ba <CLCD_voidWriteSpecialCharacter+0x4e>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
     59e:	89 81       	ldd	r24, Y+1	; 0x01
     5a0:	88 2f       	mov	r24, r24
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	2b 81       	ldd	r18, Y+3	; 0x03
     5a6:	3c 81       	ldd	r19, Y+4	; 0x04
     5a8:	82 0f       	add	r24, r18
     5aa:	93 1f       	adc	r25, r19
     5ac:	fc 01       	movw	r30, r24
     5ae:	80 81       	ld	r24, Z
     5b0:	0e 94 04 01 	call	0x208	; 0x208 <CLCD_voidSendData>

	/*send CGRAM Address command to LCD, with setting bit 6,clearing bit 7*/
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);

	/*write pattern into CGRAM*/
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
     5b4:	89 81       	ldd	r24, Y+1	; 0x01
     5b6:	8f 5f       	subi	r24, 0xFF	; 255
     5b8:	89 83       	std	Y+1, r24	; 0x01
     5ba:	89 81       	ldd	r24, Y+1	; 0x01
     5bc:	88 30       	cpi	r24, 0x08	; 8
     5be:	78 f3       	brcs	.-34     	; 0x59e <CLCD_voidWriteSpecialCharacter+0x32>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
	}

	/*Go back to the DDRAM to display the pattern*/
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
     5c0:	6f 81       	ldd	r22, Y+7	; 0x07
     5c2:	8e 81       	ldd	r24, Y+6	; 0x06
     5c4:	0e 94 95 02 	call	0x52a	; 0x52a <CLCD_voidGoToXY>

	/*Display the pattern written in the CG RAM
	 * DDRAM treat with the CGRAM with location(block) number from 0 to 7*/
	CLCD_voidSendData(Copy_u8PatternNumber);
     5c8:	8d 81       	ldd	r24, Y+5	; 0x05
     5ca:	0e 94 04 01 	call	0x208	; 0x208 <CLCD_voidSendData>

}
     5ce:	00 00       	nop
     5d0:	27 96       	adiw	r28, 0x07	; 7
     5d2:	0f b6       	in	r0, 0x3f	; 63
     5d4:	f8 94       	cli
     5d6:	de bf       	out	0x3e, r29	; 62
     5d8:	0f be       	out	0x3f, r0	; 63
     5da:	cd bf       	out	0x3d, r28	; 61
     5dc:	df 91       	pop	r29
     5de:	cf 91       	pop	r28
     5e0:	08 95       	ret

000005e2 <CLCD_voidWriteNumber>:


void CLCD_voidWriteNumber(u32 Copy_u32Number)
{
     5e2:	cf 92       	push	r12
     5e4:	df 92       	push	r13
     5e6:	ef 92       	push	r14
     5e8:	ff 92       	push	r15
     5ea:	0f 93       	push	r16
     5ec:	1f 93       	push	r17
     5ee:	cf 93       	push	r28
     5f0:	df 93       	push	r29
     5f2:	cd b7       	in	r28, 0x3d	; 61
     5f4:	de b7       	in	r29, 0x3e	; 62
     5f6:	a0 97       	sbiw	r28, 0x20	; 32
     5f8:	0f b6       	in	r0, 0x3f	; 63
     5fa:	f8 94       	cli
     5fc:	de bf       	out	0x3e, r29	; 62
     5fe:	0f be       	out	0x3f, r0	; 63
     600:	cd bf       	out	0x3d, r28	; 61
     602:	6d 83       	std	Y+5, r22	; 0x05
     604:	7e 83       	std	Y+6, r23	; 0x06
     606:	8f 83       	std	Y+7, r24	; 0x07
     608:	98 87       	std	Y+8, r25	; 0x08
	u32 Local_u32Reserverd=1;
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	a0 e0       	ldi	r26, 0x00	; 0
     610:	b0 e0       	ldi	r27, 0x00	; 0
     612:	89 83       	std	Y+1, r24	; 0x01
     614:	9a 83       	std	Y+2, r25	; 0x02
     616:	ab 83       	std	Y+3, r26	; 0x03
     618:	bc 83       	std	Y+4, r27	; 0x04

	while(Copy_u32Number !=0)
     61a:	56 c0       	rjmp	.+172    	; 0x6c8 <CLCD_voidWriteNumber+0xe6>
	{
		Local_u32Reserverd=Local_u32Reserverd*10 + Copy_u32Number%10;
     61c:	49 81       	ldd	r20, Y+1	; 0x01
     61e:	5a 81       	ldd	r21, Y+2	; 0x02
     620:	6b 81       	ldd	r22, Y+3	; 0x03
     622:	7c 81       	ldd	r23, Y+4	; 0x04
     624:	db 01       	movw	r26, r22
     626:	ca 01       	movw	r24, r20
     628:	88 0f       	add	r24, r24
     62a:	99 1f       	adc	r25, r25
     62c:	aa 1f       	adc	r26, r26
     62e:	bb 1f       	adc	r27, r27
     630:	88 0f       	add	r24, r24
     632:	99 1f       	adc	r25, r25
     634:	aa 1f       	adc	r26, r26
     636:	bb 1f       	adc	r27, r27
     638:	84 0f       	add	r24, r20
     63a:	95 1f       	adc	r25, r21
     63c:	a6 1f       	adc	r26, r22
     63e:	b7 1f       	adc	r27, r23
     640:	88 0f       	add	r24, r24
     642:	99 1f       	adc	r25, r25
     644:	aa 1f       	adc	r26, r26
     646:	bb 1f       	adc	r27, r27
     648:	6c 01       	movw	r12, r24
     64a:	7d 01       	movw	r14, r26
     64c:	8d 81       	ldd	r24, Y+5	; 0x05
     64e:	9e 81       	ldd	r25, Y+6	; 0x06
     650:	af 81       	ldd	r26, Y+7	; 0x07
     652:	b8 85       	ldd	r27, Y+8	; 0x08
     654:	89 87       	std	Y+9, r24	; 0x09
     656:	9a 87       	std	Y+10, r25	; 0x0a
     658:	ab 87       	std	Y+11, r26	; 0x0b
     65a:	bc 87       	std	Y+12, r27	; 0x0c
     65c:	0a e0       	ldi	r16, 0x0A	; 10
     65e:	10 e0       	ldi	r17, 0x00	; 0
     660:	20 e0       	ldi	r18, 0x00	; 0
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	69 85       	ldd	r22, Y+9	; 0x09
     666:	7a 85       	ldd	r23, Y+10	; 0x0a
     668:	8b 85       	ldd	r24, Y+11	; 0x0b
     66a:	9c 85       	ldd	r25, Y+12	; 0x0c
     66c:	a9 01       	movw	r20, r18
     66e:	98 01       	movw	r18, r16
     670:	0e 94 84 0a 	call	0x1508	; 0x1508 <__udivmodsi4>
     674:	6d 87       	std	Y+13, r22	; 0x0d
     676:	7e 87       	std	Y+14, r23	; 0x0e
     678:	8f 87       	std	Y+15, r24	; 0x0f
     67a:	98 8b       	std	Y+16, r25	; 0x10
     67c:	8d 85       	ldd	r24, Y+13	; 0x0d
     67e:	9e 85       	ldd	r25, Y+14	; 0x0e
     680:	af 85       	ldd	r26, Y+15	; 0x0f
     682:	b8 89       	ldd	r27, Y+16	; 0x10
     684:	8c 0d       	add	r24, r12
     686:	9d 1d       	adc	r25, r13
     688:	ae 1d       	adc	r26, r14
     68a:	bf 1d       	adc	r27, r15
     68c:	89 83       	std	Y+1, r24	; 0x01
     68e:	9a 83       	std	Y+2, r25	; 0x02
     690:	ab 83       	std	Y+3, r26	; 0x03
     692:	bc 83       	std	Y+4, r27	; 0x04
		Copy_u32Number/=10;
     694:	8d 81       	ldd	r24, Y+5	; 0x05
     696:	9e 81       	ldd	r25, Y+6	; 0x06
     698:	af 81       	ldd	r26, Y+7	; 0x07
     69a:	b8 85       	ldd	r27, Y+8	; 0x08
     69c:	89 8b       	std	Y+17, r24	; 0x11
     69e:	9a 8b       	std	Y+18, r25	; 0x12
     6a0:	ab 8b       	std	Y+19, r26	; 0x13
     6a2:	bc 8b       	std	Y+20, r27	; 0x14
     6a4:	0a e0       	ldi	r16, 0x0A	; 10
     6a6:	10 e0       	ldi	r17, 0x00	; 0
     6a8:	20 e0       	ldi	r18, 0x00	; 0
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	69 89       	ldd	r22, Y+17	; 0x11
     6ae:	7a 89       	ldd	r23, Y+18	; 0x12
     6b0:	8b 89       	ldd	r24, Y+19	; 0x13
     6b2:	9c 89       	ldd	r25, Y+20	; 0x14
     6b4:	a9 01       	movw	r20, r18
     6b6:	98 01       	movw	r18, r16
     6b8:	0e 94 84 0a 	call	0x1508	; 0x1508 <__udivmodsi4>
     6bc:	da 01       	movw	r26, r20
     6be:	c9 01       	movw	r24, r18
     6c0:	8d 83       	std	Y+5, r24	; 0x05
     6c2:	9e 83       	std	Y+6, r25	; 0x06
     6c4:	af 83       	std	Y+7, r26	; 0x07
     6c6:	b8 87       	std	Y+8, r27	; 0x08

void CLCD_voidWriteNumber(u32 Copy_u32Number)
{
	u32 Local_u32Reserverd=1;

	while(Copy_u32Number !=0)
     6c8:	8d 81       	ldd	r24, Y+5	; 0x05
     6ca:	9e 81       	ldd	r25, Y+6	; 0x06
     6cc:	af 81       	ldd	r26, Y+7	; 0x07
     6ce:	b8 85       	ldd	r27, Y+8	; 0x08
     6d0:	89 2b       	or	r24, r25
     6d2:	8a 2b       	or	r24, r26
     6d4:	8b 2b       	or	r24, r27
     6d6:	09 f0       	breq	.+2      	; 0x6da <CLCD_voidWriteNumber+0xf8>
     6d8:	a1 cf       	rjmp	.-190    	; 0x61c <CLCD_voidWriteNumber+0x3a>
		Copy_u32Number/=10;
	}

	do
	{
		CLCD_voidSendData((Local_u32Reserverd%10)+'0');
     6da:	89 81       	ldd	r24, Y+1	; 0x01
     6dc:	9a 81       	ldd	r25, Y+2	; 0x02
     6de:	ab 81       	ldd	r26, Y+3	; 0x03
     6e0:	bc 81       	ldd	r27, Y+4	; 0x04
     6e2:	8d 8b       	std	Y+21, r24	; 0x15
     6e4:	9e 8b       	std	Y+22, r25	; 0x16
     6e6:	af 8b       	std	Y+23, r26	; 0x17
     6e8:	b8 8f       	std	Y+24, r27	; 0x18
     6ea:	0a e0       	ldi	r16, 0x0A	; 10
     6ec:	10 e0       	ldi	r17, 0x00	; 0
     6ee:	20 e0       	ldi	r18, 0x00	; 0
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	6d 89       	ldd	r22, Y+21	; 0x15
     6f4:	7e 89       	ldd	r23, Y+22	; 0x16
     6f6:	8f 89       	ldd	r24, Y+23	; 0x17
     6f8:	98 8d       	ldd	r25, Y+24	; 0x18
     6fa:	a9 01       	movw	r20, r18
     6fc:	98 01       	movw	r18, r16
     6fe:	0e 94 84 0a 	call	0x1508	; 0x1508 <__udivmodsi4>
     702:	69 8f       	std	Y+25, r22	; 0x19
     704:	7a 8f       	std	Y+26, r23	; 0x1a
     706:	8b 8f       	std	Y+27, r24	; 0x1b
     708:	9c 8f       	std	Y+28, r25	; 0x1c
     70a:	89 8d       	ldd	r24, Y+25	; 0x19
     70c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     70e:	ab 8d       	ldd	r26, Y+27	; 0x1b
     710:	bc 8d       	ldd	r27, Y+28	; 0x1c
     712:	80 5d       	subi	r24, 0xD0	; 208
     714:	0e 94 04 01 	call	0x208	; 0x208 <CLCD_voidSendData>
		Local_u32Reserverd/=10;
     718:	89 81       	ldd	r24, Y+1	; 0x01
     71a:	9a 81       	ldd	r25, Y+2	; 0x02
     71c:	ab 81       	ldd	r26, Y+3	; 0x03
     71e:	bc 81       	ldd	r27, Y+4	; 0x04
     720:	8d 8f       	std	Y+29, r24	; 0x1d
     722:	9e 8f       	std	Y+30, r25	; 0x1e
     724:	af 8f       	std	Y+31, r26	; 0x1f
     726:	b8 a3       	std	Y+32, r27	; 0x20
     728:	0a e0       	ldi	r16, 0x0A	; 10
     72a:	10 e0       	ldi	r17, 0x00	; 0
     72c:	20 e0       	ldi	r18, 0x00	; 0
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	6d 8d       	ldd	r22, Y+29	; 0x1d
     732:	7e 8d       	ldd	r23, Y+30	; 0x1e
     734:	8f 8d       	ldd	r24, Y+31	; 0x1f
     736:	98 a1       	ldd	r25, Y+32	; 0x20
     738:	a9 01       	movw	r20, r18
     73a:	98 01       	movw	r18, r16
     73c:	0e 94 84 0a 	call	0x1508	; 0x1508 <__udivmodsi4>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	89 83       	std	Y+1, r24	; 0x01
     746:	9a 83       	std	Y+2, r25	; 0x02
     748:	ab 83       	std	Y+3, r26	; 0x03
     74a:	bc 83       	std	Y+4, r27	; 0x04

	}while(Local_u32Reserverd !=1);
     74c:	89 81       	ldd	r24, Y+1	; 0x01
     74e:	9a 81       	ldd	r25, Y+2	; 0x02
     750:	ab 81       	ldd	r26, Y+3	; 0x03
     752:	bc 81       	ldd	r27, Y+4	; 0x04
     754:	01 97       	sbiw	r24, 0x01	; 1
     756:	a1 05       	cpc	r26, r1
     758:	b1 05       	cpc	r27, r1
     75a:	09 f0       	breq	.+2      	; 0x75e <CLCD_voidWriteNumber+0x17c>
     75c:	be cf       	rjmp	.-132    	; 0x6da <CLCD_voidWriteNumber+0xf8>
}
     75e:	00 00       	nop
     760:	00 00       	nop
     762:	a0 96       	adiw	r28, 0x20	; 32
     764:	0f b6       	in	r0, 0x3f	; 63
     766:	f8 94       	cli
     768:	de bf       	out	0x3e, r29	; 62
     76a:	0f be       	out	0x3f, r0	; 63
     76c:	cd bf       	out	0x3d, r28	; 61
     76e:	df 91       	pop	r29
     770:	cf 91       	pop	r28
     772:	1f 91       	pop	r17
     774:	0f 91       	pop	r16
     776:	ff 90       	pop	r15
     778:	ef 90       	pop	r14
     77a:	df 90       	pop	r13
     77c:	cf 90       	pop	r12
     77e:	08 95       	ret

00000780 <CLCD_voidClearScreen>:

void CLCD_voidClearScreen()
{
     780:	cf 93       	push	r28
     782:	df 93       	push	r29
     784:	cd b7       	in	r28, 0x3d	; 61
     786:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCommand('1');
     788:	81 e3       	ldi	r24, 0x31	; 49
     78a:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_voidSendCommand>
}
     78e:	00 00       	nop
     790:	df 91       	pop	r29
     792:	cf 91       	pop	r28
     794:	08 95       	ret

00000796 <DIO_u8SetPinValue>:
#include"DIO_private.h"



u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
     796:	cf 93       	push	r28
     798:	df 93       	push	r29
     79a:	00 d0       	rcall	.+0      	; 0x79c <DIO_u8SetPinValue+0x6>
     79c:	00 d0       	rcall	.+0      	; 0x79e <DIO_u8SetPinValue+0x8>
     79e:	cd b7       	in	r28, 0x3d	; 61
     7a0:	de b7       	in	r29, 0x3e	; 62
     7a2:	8a 83       	std	Y+2, r24	; 0x02
     7a4:	6b 83       	std	Y+3, r22	; 0x03
     7a6:	4c 83       	std	Y+4, r20	; 0x04

u8 Local_u8ErrorState=0;
     7a8:	19 82       	std	Y+1, r1	; 0x01

if(Copy_u8Pin<=DIO_u8PIN7)
     7aa:	8b 81       	ldd	r24, Y+3	; 0x03
     7ac:	88 30       	cpi	r24, 0x08	; 8
     7ae:	08 f0       	brcs	.+2      	; 0x7b2 <DIO_u8SetPinValue+0x1c>
     7b0:	f3 c0       	rjmp	.+486    	; 0x998 <__stack+0x139>
{
	if(Copy_u8Value==DIO_u8PIN_HIGH)
     7b2:	8c 81       	ldd	r24, Y+4	; 0x04
     7b4:	81 30       	cpi	r24, 0x01	; 1
     7b6:	09 f0       	breq	.+2      	; 0x7ba <DIO_u8SetPinValue+0x24>
     7b8:	72 c0       	rjmp	.+228    	; 0x89e <__stack+0x3f>
		{
		switch(Copy_u8Port)
     7ba:	8a 81       	ldd	r24, Y+2	; 0x02
     7bc:	88 2f       	mov	r24, r24
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	84 30       	cpi	r24, 0x04	; 4
     7c2:	91 05       	cpc	r25, r1
     7c4:	09 f4       	brne	.+2      	; 0x7c8 <DIO_u8SetPinValue+0x32>
     7c6:	52 c0       	rjmp	.+164    	; 0x86c <__stack+0xd>
     7c8:	85 30       	cpi	r24, 0x05	; 5
     7ca:	91 05       	cpc	r25, r1
     7cc:	0c f0       	brlt	.+2      	; 0x7d0 <DIO_u8SetPinValue+0x3a>
     7ce:	64 c0       	rjmp	.+200    	; 0x898 <__stack+0x39>
     7d0:	83 30       	cpi	r24, 0x03	; 3
     7d2:	91 05       	cpc	r25, r1
     7d4:	a9 f1       	breq	.+106    	; 0x840 <DIO_u8SetPinValue+0xaa>
     7d6:	84 30       	cpi	r24, 0x04	; 4
     7d8:	91 05       	cpc	r25, r1
     7da:	0c f0       	brlt	.+2      	; 0x7de <DIO_u8SetPinValue+0x48>
     7dc:	5d c0       	rjmp	.+186    	; 0x898 <__stack+0x39>
     7de:	00 97       	sbiw	r24, 0x00	; 0
     7e0:	19 f0       	breq	.+6      	; 0x7e8 <DIO_u8SetPinValue+0x52>
     7e2:	01 97       	sbiw	r24, 0x01	; 1
     7e4:	b9 f0       	breq	.+46     	; 0x814 <DIO_u8SetPinValue+0x7e>
     7e6:	58 c0       	rjmp	.+176    	; 0x898 <__stack+0x39>
		{
			case DIO_u8PORTA:SET_BIT(PORTA,Copy_u8Pin);break;
     7e8:	8b e3       	ldi	r24, 0x3B	; 59
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	fc 01       	movw	r30, r24
     7ee:	80 81       	ld	r24, Z
     7f0:	48 2f       	mov	r20, r24
     7f2:	8b 81       	ldd	r24, Y+3	; 0x03
     7f4:	28 2f       	mov	r18, r24
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	02 c0       	rjmp	.+4      	; 0x802 <DIO_u8SetPinValue+0x6c>
     7fe:	88 0f       	add	r24, r24
     800:	99 1f       	adc	r25, r25
     802:	2a 95       	dec	r18
     804:	e2 f7       	brpl	.-8      	; 0x7fe <DIO_u8SetPinValue+0x68>
     806:	24 2f       	mov	r18, r20
     808:	28 2b       	or	r18, r24
     80a:	8b e3       	ldi	r24, 0x3B	; 59
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	fc 01       	movw	r30, r24
     810:	20 83       	st	Z, r18
     812:	c4 c0       	rjmp	.+392    	; 0x99c <__stack+0x13d>
			case DIO_u8PORTB:SET_BIT(PORTB,Copy_u8Pin);break;
     814:	88 e3       	ldi	r24, 0x38	; 56
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	fc 01       	movw	r30, r24
     81a:	80 81       	ld	r24, Z
     81c:	48 2f       	mov	r20, r24
     81e:	8b 81       	ldd	r24, Y+3	; 0x03
     820:	28 2f       	mov	r18, r24
     822:	30 e0       	ldi	r19, 0x00	; 0
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	02 c0       	rjmp	.+4      	; 0x82e <DIO_u8SetPinValue+0x98>
     82a:	88 0f       	add	r24, r24
     82c:	99 1f       	adc	r25, r25
     82e:	2a 95       	dec	r18
     830:	e2 f7       	brpl	.-8      	; 0x82a <DIO_u8SetPinValue+0x94>
     832:	24 2f       	mov	r18, r20
     834:	28 2b       	or	r18, r24
     836:	88 e3       	ldi	r24, 0x38	; 56
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	fc 01       	movw	r30, r24
     83c:	20 83       	st	Z, r18
     83e:	ae c0       	rjmp	.+348    	; 0x99c <__stack+0x13d>
			case DIO_u8PORTC:SET_BIT(PORTC,Copy_u8Pin);break;
     840:	85 e3       	ldi	r24, 0x35	; 53
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	fc 01       	movw	r30, r24
     846:	80 81       	ld	r24, Z
     848:	48 2f       	mov	r20, r24
     84a:	8b 81       	ldd	r24, Y+3	; 0x03
     84c:	28 2f       	mov	r18, r24
     84e:	30 e0       	ldi	r19, 0x00	; 0
     850:	81 e0       	ldi	r24, 0x01	; 1
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	02 c0       	rjmp	.+4      	; 0x85a <DIO_u8SetPinValue+0xc4>
     856:	88 0f       	add	r24, r24
     858:	99 1f       	adc	r25, r25
     85a:	2a 95       	dec	r18
     85c:	e2 f7       	brpl	.-8      	; 0x856 <DIO_u8SetPinValue+0xc0>
     85e:	24 2f       	mov	r18, r20
     860:	28 2b       	or	r18, r24
     862:	85 e3       	ldi	r24, 0x35	; 53
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	fc 01       	movw	r30, r24
     868:	20 83       	st	Z, r18
     86a:	98 c0       	rjmp	.+304    	; 0x99c <__stack+0x13d>
			case DIO_u8PORTD:SET_BIT(PORTD,Copy_u8Pin);break;
     86c:	82 e3       	ldi	r24, 0x32	; 50
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	fc 01       	movw	r30, r24
     872:	80 81       	ld	r24, Z
     874:	48 2f       	mov	r20, r24
     876:	8b 81       	ldd	r24, Y+3	; 0x03
     878:	28 2f       	mov	r18, r24
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	02 c0       	rjmp	.+4      	; 0x886 <__stack+0x27>
     882:	88 0f       	add	r24, r24
     884:	99 1f       	adc	r25, r25
     886:	2a 95       	dec	r18
     888:	e2 f7       	brpl	.-8      	; 0x882 <__stack+0x23>
     88a:	24 2f       	mov	r18, r20
     88c:	28 2b       	or	r18, r24
     88e:	82 e3       	ldi	r24, 0x32	; 50
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	fc 01       	movw	r30, r24
     894:	20 83       	st	Z, r18
     896:	82 c0       	rjmp	.+260    	; 0x99c <__stack+0x13d>
			default :Local_u8ErrorState=1;break;
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	89 83       	std	Y+1, r24	; 0x01
     89c:	7f c0       	rjmp	.+254    	; 0x99c <__stack+0x13d>
		}



		}
		else if(Copy_u8Value==DIO_u8PIN_LOW)
     89e:	8c 81       	ldd	r24, Y+4	; 0x04
     8a0:	88 23       	and	r24, r24
     8a2:	09 f0       	breq	.+2      	; 0x8a6 <__stack+0x47>
     8a4:	76 c0       	rjmp	.+236    	; 0x992 <__stack+0x133>
		{
			switch(Copy_u8Port)
     8a6:	8a 81       	ldd	r24, Y+2	; 0x02
     8a8:	88 2f       	mov	r24, r24
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	84 30       	cpi	r24, 0x04	; 4
     8ae:	91 05       	cpc	r25, r1
     8b0:	09 f4       	brne	.+2      	; 0x8b4 <__stack+0x55>
     8b2:	55 c0       	rjmp	.+170    	; 0x95e <__stack+0xff>
     8b4:	85 30       	cpi	r24, 0x05	; 5
     8b6:	91 05       	cpc	r25, r1
     8b8:	0c f0       	brlt	.+2      	; 0x8bc <__stack+0x5d>
     8ba:	68 c0       	rjmp	.+208    	; 0x98c <__stack+0x12d>
     8bc:	83 30       	cpi	r24, 0x03	; 3
     8be:	91 05       	cpc	r25, r1
     8c0:	b9 f1       	breq	.+110    	; 0x930 <__stack+0xd1>
     8c2:	84 30       	cpi	r24, 0x04	; 4
     8c4:	91 05       	cpc	r25, r1
     8c6:	0c f0       	brlt	.+2      	; 0x8ca <__stack+0x6b>
     8c8:	61 c0       	rjmp	.+194    	; 0x98c <__stack+0x12d>
     8ca:	00 97       	sbiw	r24, 0x00	; 0
     8cc:	19 f0       	breq	.+6      	; 0x8d4 <__stack+0x75>
     8ce:	01 97       	sbiw	r24, 0x01	; 1
     8d0:	c1 f0       	breq	.+48     	; 0x902 <__stack+0xa3>
     8d2:	5c c0       	rjmp	.+184    	; 0x98c <__stack+0x12d>
		{
			case DIO_u8PORTA:CLR_BIT(PORTA,Copy_u8Pin);break;
     8d4:	8b e3       	ldi	r24, 0x3B	; 59
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	fc 01       	movw	r30, r24
     8da:	80 81       	ld	r24, Z
     8dc:	48 2f       	mov	r20, r24
     8de:	8b 81       	ldd	r24, Y+3	; 0x03
     8e0:	28 2f       	mov	r18, r24
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	02 c0       	rjmp	.+4      	; 0x8ee <__stack+0x8f>
     8ea:	88 0f       	add	r24, r24
     8ec:	99 1f       	adc	r25, r25
     8ee:	2a 95       	dec	r18
     8f0:	e2 f7       	brpl	.-8      	; 0x8ea <__stack+0x8b>
     8f2:	80 95       	com	r24
     8f4:	24 2f       	mov	r18, r20
     8f6:	28 23       	and	r18, r24
     8f8:	8b e3       	ldi	r24, 0x3B	; 59
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	fc 01       	movw	r30, r24
     8fe:	20 83       	st	Z, r18
     900:	4d c0       	rjmp	.+154    	; 0x99c <__stack+0x13d>
			case DIO_u8PORTB:CLR_BIT(PORTB,Copy_u8Pin);break;
     902:	88 e3       	ldi	r24, 0x38	; 56
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	fc 01       	movw	r30, r24
     908:	80 81       	ld	r24, Z
     90a:	48 2f       	mov	r20, r24
     90c:	8b 81       	ldd	r24, Y+3	; 0x03
     90e:	28 2f       	mov	r18, r24
     910:	30 e0       	ldi	r19, 0x00	; 0
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	02 c0       	rjmp	.+4      	; 0x91c <__stack+0xbd>
     918:	88 0f       	add	r24, r24
     91a:	99 1f       	adc	r25, r25
     91c:	2a 95       	dec	r18
     91e:	e2 f7       	brpl	.-8      	; 0x918 <__stack+0xb9>
     920:	80 95       	com	r24
     922:	24 2f       	mov	r18, r20
     924:	28 23       	and	r18, r24
     926:	88 e3       	ldi	r24, 0x38	; 56
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	fc 01       	movw	r30, r24
     92c:	20 83       	st	Z, r18
     92e:	36 c0       	rjmp	.+108    	; 0x99c <__stack+0x13d>
			case DIO_u8PORTC:CLR_BIT(PORTC,Copy_u8Pin);break;
     930:	85 e3       	ldi	r24, 0x35	; 53
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	fc 01       	movw	r30, r24
     936:	80 81       	ld	r24, Z
     938:	48 2f       	mov	r20, r24
     93a:	8b 81       	ldd	r24, Y+3	; 0x03
     93c:	28 2f       	mov	r18, r24
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	81 e0       	ldi	r24, 0x01	; 1
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	02 c0       	rjmp	.+4      	; 0x94a <__stack+0xeb>
     946:	88 0f       	add	r24, r24
     948:	99 1f       	adc	r25, r25
     94a:	2a 95       	dec	r18
     94c:	e2 f7       	brpl	.-8      	; 0x946 <__stack+0xe7>
     94e:	80 95       	com	r24
     950:	24 2f       	mov	r18, r20
     952:	28 23       	and	r18, r24
     954:	85 e3       	ldi	r24, 0x35	; 53
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	fc 01       	movw	r30, r24
     95a:	20 83       	st	Z, r18
     95c:	1f c0       	rjmp	.+62     	; 0x99c <__stack+0x13d>
			case DIO_u8PORTD:CLR_BIT(PORTD,Copy_u8Pin);break;
     95e:	82 e3       	ldi	r24, 0x32	; 50
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	fc 01       	movw	r30, r24
     964:	80 81       	ld	r24, Z
     966:	48 2f       	mov	r20, r24
     968:	8b 81       	ldd	r24, Y+3	; 0x03
     96a:	28 2f       	mov	r18, r24
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	81 e0       	ldi	r24, 0x01	; 1
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	02 c0       	rjmp	.+4      	; 0x978 <__stack+0x119>
     974:	88 0f       	add	r24, r24
     976:	99 1f       	adc	r25, r25
     978:	2a 95       	dec	r18
     97a:	e2 f7       	brpl	.-8      	; 0x974 <__stack+0x115>
     97c:	80 95       	com	r24
     97e:	24 2f       	mov	r18, r20
     980:	28 23       	and	r18, r24
     982:	82 e3       	ldi	r24, 0x32	; 50
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	fc 01       	movw	r30, r24
     988:	20 83       	st	Z, r18
     98a:	08 c0       	rjmp	.+16     	; 0x99c <__stack+0x13d>
			default :Local_u8ErrorState=1;break;
     98c:	81 e0       	ldi	r24, 0x01	; 1
     98e:	89 83       	std	Y+1, r24	; 0x01
     990:	05 c0       	rjmp	.+10     	; 0x99c <__stack+0x13d>


		}
		else
		{
		Local_u8ErrorState=1;
     992:	81 e0       	ldi	r24, 0x01	; 1
     994:	89 83       	std	Y+1, r24	; 0x01
     996:	02 c0       	rjmp	.+4      	; 0x99c <__stack+0x13d>
		}


}
else{
	 Local_u8ErrorState=1;
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	89 83       	std	Y+1, r24	; 0x01

}
return Local_u8ErrorState;
     99c:	89 81       	ldd	r24, Y+1	; 0x01

}
     99e:	0f 90       	pop	r0
     9a0:	0f 90       	pop	r0
     9a2:	0f 90       	pop	r0
     9a4:	0f 90       	pop	r0
     9a6:	df 91       	pop	r29
     9a8:	cf 91       	pop	r28
     9aa:	08 95       	ret

000009ac <DIO_u8SetPortValue>:


u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
     9b0:	00 d0       	rcall	.+0      	; 0x9b2 <DIO_u8SetPortValue+0x6>
     9b2:	0f 92       	push	r0
     9b4:	cd b7       	in	r28, 0x3d	; 61
     9b6:	de b7       	in	r29, 0x3e	; 62
     9b8:	8a 83       	std	Y+2, r24	; 0x02
     9ba:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
     9bc:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
     9be:	8a 81       	ldd	r24, Y+2	; 0x02
     9c0:	88 2f       	mov	r24, r24
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	84 30       	cpi	r24, 0x04	; 4
     9c6:	91 05       	cpc	r25, r1
     9c8:	01 f1       	breq	.+64     	; 0xa0a <DIO_u8SetPortValue+0x5e>
     9ca:	85 30       	cpi	r24, 0x05	; 5
     9cc:	91 05       	cpc	r25, r1
     9ce:	1c f5       	brge	.+70     	; 0xa16 <DIO_u8SetPortValue+0x6a>
     9d0:	83 30       	cpi	r24, 0x03	; 3
     9d2:	91 05       	cpc	r25, r1
     9d4:	a1 f0       	breq	.+40     	; 0x9fe <DIO_u8SetPortValue+0x52>
     9d6:	84 30       	cpi	r24, 0x04	; 4
     9d8:	91 05       	cpc	r25, r1
     9da:	ec f4       	brge	.+58     	; 0xa16 <DIO_u8SetPortValue+0x6a>
     9dc:	00 97       	sbiw	r24, 0x00	; 0
     9de:	19 f0       	breq	.+6      	; 0x9e6 <DIO_u8SetPortValue+0x3a>
     9e0:	01 97       	sbiw	r24, 0x01	; 1
     9e2:	39 f0       	breq	.+14     	; 0x9f2 <DIO_u8SetPortValue+0x46>
     9e4:	18 c0       	rjmp	.+48     	; 0xa16 <DIO_u8SetPortValue+0x6a>
				{
					case DIO_u8PORTA: PORTA=Copy_u8Value; break;
     9e6:	8b e3       	ldi	r24, 0x3B	; 59
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	2b 81       	ldd	r18, Y+3	; 0x03
     9ec:	fc 01       	movw	r30, r24
     9ee:	20 83       	st	Z, r18
     9f0:	15 c0       	rjmp	.+42     	; 0xa1c <DIO_u8SetPortValue+0x70>
				    case DIO_u8PORTB: PORTB=Copy_u8Value; break;
     9f2:	88 e3       	ldi	r24, 0x38	; 56
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	2b 81       	ldd	r18, Y+3	; 0x03
     9f8:	fc 01       	movw	r30, r24
     9fa:	20 83       	st	Z, r18
     9fc:	0f c0       	rjmp	.+30     	; 0xa1c <DIO_u8SetPortValue+0x70>
				    case DIO_u8PORTC: PORTC=Copy_u8Value; break;
     9fe:	85 e3       	ldi	r24, 0x35	; 53
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	2b 81       	ldd	r18, Y+3	; 0x03
     a04:	fc 01       	movw	r30, r24
     a06:	20 83       	st	Z, r18
     a08:	09 c0       	rjmp	.+18     	; 0xa1c <DIO_u8SetPortValue+0x70>
				    case DIO_u8PORTD: PORTD=Copy_u8Value; break;
     a0a:	82 e3       	ldi	r24, 0x32	; 50
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	2b 81       	ldd	r18, Y+3	; 0x03
     a10:	fc 01       	movw	r30, r24
     a12:	20 83       	st	Z, r18
     a14:	03 c0       	rjmp	.+6      	; 0xa1c <DIO_u8SetPortValue+0x70>
				    default :Local_u8ErrorState=1; break;
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	89 83       	std	Y+1, r24	; 0x01
     a1a:	00 00       	nop
				}


	return Local_u8ErrorState;
     a1c:	89 81       	ldd	r24, Y+1	; 0x01

}
     a1e:	0f 90       	pop	r0
     a20:	0f 90       	pop	r0
     a22:	0f 90       	pop	r0
     a24:	df 91       	pop	r29
     a26:	cf 91       	pop	r28
     a28:	08 95       	ret

00000a2a <DIO_u8GetPinValue>:



u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8* Copy_pu8Value)
{
     a2a:	cf 93       	push	r28
     a2c:	df 93       	push	r29
     a2e:	00 d0       	rcall	.+0      	; 0xa30 <DIO_u8GetPinValue+0x6>
     a30:	00 d0       	rcall	.+0      	; 0xa32 <DIO_u8GetPinValue+0x8>
     a32:	0f 92       	push	r0
     a34:	cd b7       	in	r28, 0x3d	; 61
     a36:	de b7       	in	r29, 0x3e	; 62
     a38:	8a 83       	std	Y+2, r24	; 0x02
     a3a:	6b 83       	std	Y+3, r22	; 0x03
     a3c:	5d 83       	std	Y+5, r21	; 0x05
     a3e:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState=0;
     a40:	19 82       	std	Y+1, r1	; 0x01
	if( (Copy_pu8Value!=NULL) && (Copy_u8Pin<=DIO_u8PIN7) )
     a42:	8c 81       	ldd	r24, Y+4	; 0x04
     a44:	9d 81       	ldd	r25, Y+5	; 0x05
     a46:	89 2b       	or	r24, r25
     a48:	09 f4       	brne	.+2      	; 0xa4c <DIO_u8GetPinValue+0x22>
     a4a:	73 c0       	rjmp	.+230    	; 0xb32 <DIO_u8GetPinValue+0x108>
     a4c:	8b 81       	ldd	r24, Y+3	; 0x03
     a4e:	88 30       	cpi	r24, 0x08	; 8
     a50:	08 f0       	brcs	.+2      	; 0xa54 <DIO_u8GetPinValue+0x2a>
     a52:	6f c0       	rjmp	.+222    	; 0xb32 <DIO_u8GetPinValue+0x108>
				{
					switch(Copy_u8Port)
     a54:	8a 81       	ldd	r24, Y+2	; 0x02
     a56:	88 2f       	mov	r24, r24
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	84 30       	cpi	r24, 0x04	; 4
     a5c:	91 05       	cpc	r25, r1
     a5e:	09 f4       	brne	.+2      	; 0xa62 <DIO_u8GetPinValue+0x38>
     a60:	4f c0       	rjmp	.+158    	; 0xb00 <DIO_u8GetPinValue+0xd6>
     a62:	85 30       	cpi	r24, 0x05	; 5
     a64:	91 05       	cpc	r25, r1
     a66:	0c f0       	brlt	.+2      	; 0xa6a <DIO_u8GetPinValue+0x40>
     a68:	60 c0       	rjmp	.+192    	; 0xb2a <DIO_u8GetPinValue+0x100>
     a6a:	83 30       	cpi	r24, 0x03	; 3
     a6c:	91 05       	cpc	r25, r1
     a6e:	99 f1       	breq	.+102    	; 0xad6 <DIO_u8GetPinValue+0xac>
     a70:	84 30       	cpi	r24, 0x04	; 4
     a72:	91 05       	cpc	r25, r1
     a74:	0c f0       	brlt	.+2      	; 0xa78 <DIO_u8GetPinValue+0x4e>
     a76:	59 c0       	rjmp	.+178    	; 0xb2a <DIO_u8GetPinValue+0x100>
     a78:	00 97       	sbiw	r24, 0x00	; 0
     a7a:	19 f0       	breq	.+6      	; 0xa82 <DIO_u8GetPinValue+0x58>
     a7c:	01 97       	sbiw	r24, 0x01	; 1
     a7e:	b1 f0       	breq	.+44     	; 0xaac <DIO_u8GetPinValue+0x82>
     a80:	54 c0       	rjmp	.+168    	; 0xb2a <DIO_u8GetPinValue+0x100>
					{
						 case DIO_u8PORTA: *Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin); break;
     a82:	89 e3       	ldi	r24, 0x39	; 57
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	fc 01       	movw	r30, r24
     a88:	80 81       	ld	r24, Z
     a8a:	88 2f       	mov	r24, r24
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	2b 81       	ldd	r18, Y+3	; 0x03
     a90:	22 2f       	mov	r18, r18
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	02 c0       	rjmp	.+4      	; 0xa9a <DIO_u8GetPinValue+0x70>
     a96:	95 95       	asr	r25
     a98:	87 95       	ror	r24
     a9a:	2a 95       	dec	r18
     a9c:	e2 f7       	brpl	.-8      	; 0xa96 <DIO_u8GetPinValue+0x6c>
     a9e:	28 2f       	mov	r18, r24
     aa0:	21 70       	andi	r18, 0x01	; 1
     aa2:	8c 81       	ldd	r24, Y+4	; 0x04
     aa4:	9d 81       	ldd	r25, Y+5	; 0x05
     aa6:	fc 01       	movw	r30, r24
     aa8:	20 83       	st	Z, r18
     aaa:	42 c0       	rjmp	.+132    	; 0xb30 <DIO_u8GetPinValue+0x106>
					     case DIO_u8PORTB: *Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin); break;
     aac:	86 e3       	ldi	r24, 0x36	; 54
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	fc 01       	movw	r30, r24
     ab2:	80 81       	ld	r24, Z
     ab4:	88 2f       	mov	r24, r24
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	2b 81       	ldd	r18, Y+3	; 0x03
     aba:	22 2f       	mov	r18, r18
     abc:	30 e0       	ldi	r19, 0x00	; 0
     abe:	02 c0       	rjmp	.+4      	; 0xac4 <DIO_u8GetPinValue+0x9a>
     ac0:	95 95       	asr	r25
     ac2:	87 95       	ror	r24
     ac4:	2a 95       	dec	r18
     ac6:	e2 f7       	brpl	.-8      	; 0xac0 <DIO_u8GetPinValue+0x96>
     ac8:	28 2f       	mov	r18, r24
     aca:	21 70       	andi	r18, 0x01	; 1
     acc:	8c 81       	ldd	r24, Y+4	; 0x04
     ace:	9d 81       	ldd	r25, Y+5	; 0x05
     ad0:	fc 01       	movw	r30, r24
     ad2:	20 83       	st	Z, r18
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <DIO_u8GetPinValue+0x106>
					     case DIO_u8PORTC: *Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin); break;
     ad6:	83 e3       	ldi	r24, 0x33	; 51
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	fc 01       	movw	r30, r24
     adc:	80 81       	ld	r24, Z
     ade:	88 2f       	mov	r24, r24
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	2b 81       	ldd	r18, Y+3	; 0x03
     ae4:	22 2f       	mov	r18, r18
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	02 c0       	rjmp	.+4      	; 0xaee <DIO_u8GetPinValue+0xc4>
     aea:	95 95       	asr	r25
     aec:	87 95       	ror	r24
     aee:	2a 95       	dec	r18
     af0:	e2 f7       	brpl	.-8      	; 0xaea <DIO_u8GetPinValue+0xc0>
     af2:	28 2f       	mov	r18, r24
     af4:	21 70       	andi	r18, 0x01	; 1
     af6:	8c 81       	ldd	r24, Y+4	; 0x04
     af8:	9d 81       	ldd	r25, Y+5	; 0x05
     afa:	fc 01       	movw	r30, r24
     afc:	20 83       	st	Z, r18
     afe:	18 c0       	rjmp	.+48     	; 0xb30 <DIO_u8GetPinValue+0x106>
					     case DIO_u8PORTD: *Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin); break;
     b00:	80 e3       	ldi	r24, 0x30	; 48
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	fc 01       	movw	r30, r24
     b06:	80 81       	ld	r24, Z
     b08:	88 2f       	mov	r24, r24
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	2b 81       	ldd	r18, Y+3	; 0x03
     b0e:	22 2f       	mov	r18, r18
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	02 c0       	rjmp	.+4      	; 0xb18 <DIO_u8GetPinValue+0xee>
     b14:	95 95       	asr	r25
     b16:	87 95       	ror	r24
     b18:	2a 95       	dec	r18
     b1a:	e2 f7       	brpl	.-8      	; 0xb14 <DIO_u8GetPinValue+0xea>
     b1c:	28 2f       	mov	r18, r24
     b1e:	21 70       	andi	r18, 0x01	; 1
     b20:	8c 81       	ldd	r24, Y+4	; 0x04
     b22:	9d 81       	ldd	r25, Y+5	; 0x05
     b24:	fc 01       	movw	r30, r24
     b26:	20 83       	st	Z, r18
     b28:	03 c0       	rjmp	.+6      	; 0xb30 <DIO_u8GetPinValue+0x106>
					     default : Local_u8ErrorState=1; break;
     b2a:	81 e0       	ldi	r24, 0x01	; 1
     b2c:	89 83       	std	Y+1, r24	; 0x01
     b2e:	00 00       	nop
{

	u8 Local_u8ErrorState=0;
	if( (Copy_pu8Value!=NULL) && (Copy_u8Pin<=DIO_u8PIN7) )
				{
					switch(Copy_u8Port)
     b30:	02 c0       	rjmp	.+4      	; 0xb36 <DIO_u8GetPinValue+0x10c>
					}

				}
				else
				{
				Local_u8ErrorState=1;
     b32:	81 e0       	ldi	r24, 0x01	; 1
     b34:	89 83       	std	Y+1, r24	; 0x01

				}


	return Local_u8ErrorState;
     b36:	89 81       	ldd	r24, Y+1	; 0x01


}
     b38:	0f 90       	pop	r0
     b3a:	0f 90       	pop	r0
     b3c:	0f 90       	pop	r0
     b3e:	0f 90       	pop	r0
     b40:	0f 90       	pop	r0
     b42:	df 91       	pop	r29
     b44:	cf 91       	pop	r28
     b46:	08 95       	ret

00000b48 <EXTI_voidInt0Init>:




void EXTI_voidInt0Init(void)
{
     b48:	cf 93       	push	r28
     b4a:	df 93       	push	r29
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
#elif INT0_SENSE == FALLING_EDGE
	SET_BIT(MCUCR,MCUCR_ISC01);
	CLR_BIT(MCUCR,MCUCR_ISC00);

#elif INT0_SENSE == RISING_EDGE
	SET_BIT(MCUCR,MCUCR_ISC01);
     b50:	85 e5       	ldi	r24, 0x55	; 85
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	fc 01       	movw	r30, r24
     b56:	20 81       	ld	r18, Z
     b58:	85 e5       	ldi	r24, 0x55	; 85
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	22 60       	ori	r18, 0x02	; 2
     b5e:	fc 01       	movw	r30, r24
     b60:	20 83       	st	Z, r18
	SET_BIT(MCUCR,MCUCR_ISC00);
     b62:	85 e5       	ldi	r24, 0x55	; 85
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	fc 01       	movw	r30, r24
     b68:	20 81       	ld	r18, Z
     b6a:	85 e5       	ldi	r24, 0x55	; 85
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	21 60       	ori	r18, 0x01	; 1
     b70:	fc 01       	movw	r30, r24
     b72:	20 83       	st	Z, r18

#endif

   /*Check peripheral interrupt enable (PIE) initial state*/
#if INT0_INITIAL_STATE ==ENABLED
	SET_BIT(GICR,GICR_INT0);
     b74:	8b e5       	ldi	r24, 0x5B	; 91
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	fc 01       	movw	r30, r24
     b7a:	20 81       	ld	r18, Z
     b7c:	8b e5       	ldi	r24, 0x5B	; 91
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	20 64       	ori	r18, 0x40	; 64
     b82:	fc 01       	movw	r30, r24
     b84:	20 83       	st	Z, r18
#else
#error "Wrong INT0_INITIAL_STATE Configuration Option"

#endif

}
     b86:	00 00       	nop
     b88:	df 91       	pop	r29
     b8a:	cf 91       	pop	r28
     b8c:	08 95       	ret

00000b8e <EXTI_voidInt1Init>:

void EXTI_voidInt1Init(void)
{
     b8e:	cf 93       	push	r28
     b90:	df 93       	push	r29
     b92:	cd b7       	in	r28, 0x3d	; 61
     b94:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(MCUCR,MCUCR_ISC11);
	SET_BIT(MCUCR,MCUCR_ISC10);

#elif INT1_SENSE == FALLING_EDGE

	SET_BIT(MCUCR,MCUCR_ISC11);
     b96:	85 e5       	ldi	r24, 0x55	; 85
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	fc 01       	movw	r30, r24
     b9c:	20 81       	ld	r18, Z
     b9e:	85 e5       	ldi	r24, 0x55	; 85
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	28 60       	ori	r18, 0x08	; 8
     ba4:	fc 01       	movw	r30, r24
     ba6:	20 83       	st	Z, r18
	CLR_BIT(MCUCR,MCUCR_ISC10);
     ba8:	85 e5       	ldi	r24, 0x55	; 85
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	fc 01       	movw	r30, r24
     bae:	20 81       	ld	r18, Z
     bb0:	85 e5       	ldi	r24, 0x55	; 85
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	2b 7f       	andi	r18, 0xFB	; 251
     bb6:	fc 01       	movw	r30, r24
     bb8:	20 83       	st	Z, r18

#endif

	   /*Check peripheral interrupt enable (PIE) initial state*/
#if INT1_INITIAL_STATE ==ENABLED
		SET_BIT(GICR,GICR_INT1);
     bba:	8b e5       	ldi	r24, 0x5B	; 91
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	fc 01       	movw	r30, r24
     bc0:	20 81       	ld	r18, Z
     bc2:	8b e5       	ldi	r24, 0x5B	; 91
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	20 68       	ori	r18, 0x80	; 128
     bc8:	fc 01       	movw	r30, r24
     bca:	20 83       	st	Z, r18
#else
#error "Wrong INT1_INITIAL_STATE Configuration Option"

#endif

}
     bcc:	00 00       	nop
     bce:	df 91       	pop	r29
     bd0:	cf 91       	pop	r28
     bd2:	08 95       	ret

00000bd4 <EXTI_voidInt2Init>:

void EXTI_voidInt2Init(void)
{
     bd4:	cf 93       	push	r28
     bd6:	df 93       	push	r29
     bd8:	cd b7       	in	r28, 0x3d	; 61
     bda:	de b7       	in	r29, 0x3e	; 62
	/*(PIF) Check sense Control*/
#if INT2_SENSE == FALLING_EDGE
	CLR_BIT(MCUCSR,MCUCSR_ISC2);
     bdc:	84 e5       	ldi	r24, 0x54	; 84
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	fc 01       	movw	r30, r24
     be2:	20 81       	ld	r18, Z
     be4:	84 e5       	ldi	r24, 0x54	; 84
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	2f 7b       	andi	r18, 0xBF	; 191
     bea:	fc 01       	movw	r30, r24
     bec:	20 83       	st	Z, r18
#endif

	/*Check peripheral(Specific) interrupt enable (PIE) initial state*/

#if INT2_INITIAL_STATE==DISABLE
	SET_BIT(GICR,GICR_INT2);
     bee:	8b e5       	ldi	r24, 0x5B	; 91
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	fc 01       	movw	r30, r24
     bf4:	20 81       	ld	r18, Z
     bf6:	8b e5       	ldi	r24, 0x5B	; 91
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	20 62       	ori	r18, 0x20	; 32
     bfc:	fc 01       	movw	r30, r24
     bfe:	20 83       	st	Z, r18
#else
#error "Wrong INT2_INITIAL_STATE Configuration Option"

#endif

}
     c00:	00 00       	nop
     c02:	df 91       	pop	r29
     c04:	cf 91       	pop	r28
     c06:	08 95       	ret

00000c08 <EXTI_u8Int0SetSenseControl>:
 *  								3-FALLING_EDGE
 *  								4-RISING_EDGE
 *  Output: Error Status with type u8
 *  */
u8 EXTI_u8Int0SetSenseControl(u8 Copy_u8Sense)
{
     c08:	cf 93       	push	r28
     c0a:	df 93       	push	r29
     c0c:	00 d0       	rcall	.+0      	; 0xc0e <EXTI_u8Int0SetSenseControl+0x6>
     c0e:	cd b7       	in	r28, 0x3d	; 61
     c10:	de b7       	in	r29, 0x3e	; 62
     c12:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
     c14:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Sense)
     c16:	8a 81       	ldd	r24, Y+2	; 0x02
     c18:	88 2f       	mov	r24, r24
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	91 05       	cpc	r25, r1
     c20:	c1 f1       	breq	.+112    	; 0xc92 <EXTI_u8Int0SetSenseControl+0x8a>
     c22:	85 30       	cpi	r24, 0x05	; 5
     c24:	91 05       	cpc	r25, r1
     c26:	0c f0       	brlt	.+2      	; 0xc2a <EXTI_u8Int0SetSenseControl+0x22>
     c28:	5a c0       	rjmp	.+180    	; 0xcde <EXTI_u8Int0SetSenseControl+0xd6>
     c2a:	83 30       	cpi	r24, 0x03	; 3
     c2c:	91 05       	cpc	r25, r1
     c2e:	09 f4       	brne	.+2      	; 0xc32 <EXTI_u8Int0SetSenseControl+0x2a>
     c30:	43 c0       	rjmp	.+134    	; 0xcb8 <EXTI_u8Int0SetSenseControl+0xb0>
     c32:	84 30       	cpi	r24, 0x04	; 4
     c34:	91 05       	cpc	r25, r1
     c36:	0c f0       	brlt	.+2      	; 0xc3a <EXTI_u8Int0SetSenseControl+0x32>
     c38:	52 c0       	rjmp	.+164    	; 0xcde <EXTI_u8Int0SetSenseControl+0xd6>
     c3a:	81 30       	cpi	r24, 0x01	; 1
     c3c:	91 05       	cpc	r25, r1
     c3e:	19 f0       	breq	.+6      	; 0xc46 <EXTI_u8Int0SetSenseControl+0x3e>
     c40:	02 97       	sbiw	r24, 0x02	; 2
     c42:	a1 f0       	breq	.+40     	; 0xc6c <EXTI_u8Int0SetSenseControl+0x64>
     c44:	4c c0       	rjmp	.+152    	; 0xcde <EXTI_u8Int0SetSenseControl+0xd6>
	{
	case LOW_LEVEL: CLR_BIT(MCUCR,MCUCR_ISC01); CLR_BIT(MCUCR,MCUCR_ISC00);break;
     c46:	85 e5       	ldi	r24, 0x55	; 85
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	fc 01       	movw	r30, r24
     c4c:	20 81       	ld	r18, Z
     c4e:	85 e5       	ldi	r24, 0x55	; 85
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	2d 7f       	andi	r18, 0xFD	; 253
     c54:	fc 01       	movw	r30, r24
     c56:	20 83       	st	Z, r18
     c58:	85 e5       	ldi	r24, 0x55	; 85
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	fc 01       	movw	r30, r24
     c5e:	20 81       	ld	r18, Z
     c60:	85 e5       	ldi	r24, 0x55	; 85
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	2e 7f       	andi	r18, 0xFE	; 254
     c66:	fc 01       	movw	r30, r24
     c68:	20 83       	st	Z, r18
     c6a:	3b c0       	rjmp	.+118    	; 0xce2 <EXTI_u8Int0SetSenseControl+0xda>

	case ON_CHANGE: SET_BIT(MCUCR,MCUCR_ISC00); CLR_BIT(MCUCR,MCUCR_ISC01);break;
     c6c:	85 e5       	ldi	r24, 0x55	; 85
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	fc 01       	movw	r30, r24
     c72:	20 81       	ld	r18, Z
     c74:	85 e5       	ldi	r24, 0x55	; 85
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	21 60       	ori	r18, 0x01	; 1
     c7a:	fc 01       	movw	r30, r24
     c7c:	20 83       	st	Z, r18
     c7e:	85 e5       	ldi	r24, 0x55	; 85
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	fc 01       	movw	r30, r24
     c84:	20 81       	ld	r18, Z
     c86:	85 e5       	ldi	r24, 0x55	; 85
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	2d 7f       	andi	r18, 0xFD	; 253
     c8c:	fc 01       	movw	r30, r24
     c8e:	20 83       	st	Z, r18
     c90:	28 c0       	rjmp	.+80     	; 0xce2 <EXTI_u8Int0SetSenseControl+0xda>

	case RISING_EDGE:SET_BIT(MCUCR,MCUCR_ISC01); SET_BIT(MCUCR,MCUCR_ISC00);break;
     c92:	85 e5       	ldi	r24, 0x55	; 85
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	fc 01       	movw	r30, r24
     c98:	20 81       	ld	r18, Z
     c9a:	85 e5       	ldi	r24, 0x55	; 85
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	22 60       	ori	r18, 0x02	; 2
     ca0:	fc 01       	movw	r30, r24
     ca2:	20 83       	st	Z, r18
     ca4:	85 e5       	ldi	r24, 0x55	; 85
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	fc 01       	movw	r30, r24
     caa:	20 81       	ld	r18, Z
     cac:	85 e5       	ldi	r24, 0x55	; 85
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	21 60       	ori	r18, 0x01	; 1
     cb2:	fc 01       	movw	r30, r24
     cb4:	20 83       	st	Z, r18
     cb6:	15 c0       	rjmp	.+42     	; 0xce2 <EXTI_u8Int0SetSenseControl+0xda>

	case FALLING_EDGE:SET_BIT(MCUCR,MCUCR_ISC01); CLR_BIT(MCUCR,MCUCR_ISC00);break;
     cb8:	85 e5       	ldi	r24, 0x55	; 85
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	fc 01       	movw	r30, r24
     cbe:	20 81       	ld	r18, Z
     cc0:	85 e5       	ldi	r24, 0x55	; 85
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	22 60       	ori	r18, 0x02	; 2
     cc6:	fc 01       	movw	r30, r24
     cc8:	20 83       	st	Z, r18
     cca:	85 e5       	ldi	r24, 0x55	; 85
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	fc 01       	movw	r30, r24
     cd0:	20 81       	ld	r18, Z
     cd2:	85 e5       	ldi	r24, 0x55	; 85
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	2e 7f       	andi	r18, 0xFE	; 254
     cd8:	fc 01       	movw	r30, r24
     cda:	20 83       	st	Z, r18
     cdc:	02 c0       	rjmp	.+4      	; 0xce2 <EXTI_u8Int0SetSenseControl+0xda>

	default: Local_u8ErrorState=NOK;
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	89 83       	std	Y+1, r24	; 0x01

	}
	return Local_u8ErrorState;
     ce2:	89 81       	ldd	r24, Y+1	; 0x01
}
     ce4:	0f 90       	pop	r0
     ce6:	0f 90       	pop	r0
     ce8:	df 91       	pop	r29
     cea:	cf 91       	pop	r28
     cec:	08 95       	ret

00000cee <EXTI_u8Int1SetSenseControl>:
 *  								3-FALLING_EDGE
 *  								4-RISING_EDGE
 *  Output: Error Status with type u8
 *  */
u8 EXTI_u8Int1SetSenseControl(u8 Copy_u8Sense)
{
     cee:	cf 93       	push	r28
     cf0:	df 93       	push	r29
     cf2:	00 d0       	rcall	.+0      	; 0xcf4 <EXTI_u8Int1SetSenseControl+0x6>
     cf4:	cd b7       	in	r28, 0x3d	; 61
     cf6:	de b7       	in	r29, 0x3e	; 62
     cf8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
     cfa:	19 82       	std	Y+1, r1	; 0x01
		switch (Copy_u8Sense)
     cfc:	8a 81       	ldd	r24, Y+2	; 0x02
     cfe:	88 2f       	mov	r24, r24
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	84 30       	cpi	r24, 0x04	; 4
     d04:	91 05       	cpc	r25, r1
     d06:	c1 f1       	breq	.+112    	; 0xd78 <EXTI_u8Int1SetSenseControl+0x8a>
     d08:	85 30       	cpi	r24, 0x05	; 5
     d0a:	91 05       	cpc	r25, r1
     d0c:	0c f0       	brlt	.+2      	; 0xd10 <EXTI_u8Int1SetSenseControl+0x22>
     d0e:	5a c0       	rjmp	.+180    	; 0xdc4 <EXTI_u8Int1SetSenseControl+0xd6>
     d10:	83 30       	cpi	r24, 0x03	; 3
     d12:	91 05       	cpc	r25, r1
     d14:	09 f4       	brne	.+2      	; 0xd18 <EXTI_u8Int1SetSenseControl+0x2a>
     d16:	43 c0       	rjmp	.+134    	; 0xd9e <EXTI_u8Int1SetSenseControl+0xb0>
     d18:	84 30       	cpi	r24, 0x04	; 4
     d1a:	91 05       	cpc	r25, r1
     d1c:	0c f0       	brlt	.+2      	; 0xd20 <EXTI_u8Int1SetSenseControl+0x32>
     d1e:	52 c0       	rjmp	.+164    	; 0xdc4 <EXTI_u8Int1SetSenseControl+0xd6>
     d20:	81 30       	cpi	r24, 0x01	; 1
     d22:	91 05       	cpc	r25, r1
     d24:	19 f0       	breq	.+6      	; 0xd2c <EXTI_u8Int1SetSenseControl+0x3e>
     d26:	02 97       	sbiw	r24, 0x02	; 2
     d28:	a1 f0       	breq	.+40     	; 0xd52 <EXTI_u8Int1SetSenseControl+0x64>
     d2a:	4c c0       	rjmp	.+152    	; 0xdc4 <EXTI_u8Int1SetSenseControl+0xd6>
		{
		case LOW_LEVEL: CLR_BIT(MCUCR,MCUCR_ISC11); CLR_BIT(MCUCR,MCUCR_ISC10);break;
     d2c:	85 e5       	ldi	r24, 0x55	; 85
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	fc 01       	movw	r30, r24
     d32:	20 81       	ld	r18, Z
     d34:	85 e5       	ldi	r24, 0x55	; 85
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	27 7f       	andi	r18, 0xF7	; 247
     d3a:	fc 01       	movw	r30, r24
     d3c:	20 83       	st	Z, r18
     d3e:	85 e5       	ldi	r24, 0x55	; 85
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	fc 01       	movw	r30, r24
     d44:	20 81       	ld	r18, Z
     d46:	85 e5       	ldi	r24, 0x55	; 85
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	2b 7f       	andi	r18, 0xFB	; 251
     d4c:	fc 01       	movw	r30, r24
     d4e:	20 83       	st	Z, r18
     d50:	3b c0       	rjmp	.+118    	; 0xdc8 <EXTI_u8Int1SetSenseControl+0xda>

		case ON_CHANGE: CLR_BIT(MCUCR,MCUCR_ISC11); SET_BIT(MCUCR,MCUCR_ISC10);break;
     d52:	85 e5       	ldi	r24, 0x55	; 85
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	fc 01       	movw	r30, r24
     d58:	20 81       	ld	r18, Z
     d5a:	85 e5       	ldi	r24, 0x55	; 85
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	27 7f       	andi	r18, 0xF7	; 247
     d60:	fc 01       	movw	r30, r24
     d62:	20 83       	st	Z, r18
     d64:	85 e5       	ldi	r24, 0x55	; 85
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	fc 01       	movw	r30, r24
     d6a:	20 81       	ld	r18, Z
     d6c:	85 e5       	ldi	r24, 0x55	; 85
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	24 60       	ori	r18, 0x04	; 4
     d72:	fc 01       	movw	r30, r24
     d74:	20 83       	st	Z, r18
     d76:	28 c0       	rjmp	.+80     	; 0xdc8 <EXTI_u8Int1SetSenseControl+0xda>

		case RISING_EDGE: SET_BIT(MCUCR,MCUCR_ISC11); SET_BIT(MCUCR,MCUCR_ISC10);break;
     d78:	85 e5       	ldi	r24, 0x55	; 85
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	fc 01       	movw	r30, r24
     d7e:	20 81       	ld	r18, Z
     d80:	85 e5       	ldi	r24, 0x55	; 85
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	28 60       	ori	r18, 0x08	; 8
     d86:	fc 01       	movw	r30, r24
     d88:	20 83       	st	Z, r18
     d8a:	85 e5       	ldi	r24, 0x55	; 85
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	fc 01       	movw	r30, r24
     d90:	20 81       	ld	r18, Z
     d92:	85 e5       	ldi	r24, 0x55	; 85
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	24 60       	ori	r18, 0x04	; 4
     d98:	fc 01       	movw	r30, r24
     d9a:	20 83       	st	Z, r18
     d9c:	15 c0       	rjmp	.+42     	; 0xdc8 <EXTI_u8Int1SetSenseControl+0xda>

		case FALLING_EDGE: SET_BIT(MCUCR,MCUCR_ISC11); CLR_BIT(MCUCR,MCUCR_ISC10);break;
     d9e:	85 e5       	ldi	r24, 0x55	; 85
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	fc 01       	movw	r30, r24
     da4:	20 81       	ld	r18, Z
     da6:	85 e5       	ldi	r24, 0x55	; 85
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	28 60       	ori	r18, 0x08	; 8
     dac:	fc 01       	movw	r30, r24
     dae:	20 83       	st	Z, r18
     db0:	85 e5       	ldi	r24, 0x55	; 85
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	fc 01       	movw	r30, r24
     db6:	20 81       	ld	r18, Z
     db8:	85 e5       	ldi	r24, 0x55	; 85
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	2b 7f       	andi	r18, 0xFB	; 251
     dbe:	fc 01       	movw	r30, r24
     dc0:	20 83       	st	Z, r18
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <EXTI_u8Int1SetSenseControl+0xda>

		default: Local_u8ErrorState=NOK;
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	89 83       	std	Y+1, r24	; 0x01

		}
		return Local_u8ErrorState;
     dc8:	89 81       	ldd	r24, Y+1	; 0x01

}
     dca:	0f 90       	pop	r0
     dcc:	0f 90       	pop	r0
     dce:	df 91       	pop	r29
     dd0:	cf 91       	pop	r28
     dd2:	08 95       	ret

00000dd4 <EXTI_u8Int2SetSenseControl>:
 *  								1-FALLING_EDGE
 *  								2-RISING_EDGE
 *  Output: Error Status with type u8
 *  */
u8 EXTI_u8Int2SetSenseControl(u8 Copy_u8Sense)
{
     dd4:	cf 93       	push	r28
     dd6:	df 93       	push	r29
     dd8:	00 d0       	rcall	.+0      	; 0xdda <EXTI_u8Int2SetSenseControl+0x6>
     dda:	cd b7       	in	r28, 0x3d	; 61
     ddc:	de b7       	in	r29, 0x3e	; 62
     dde:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
     de0:	19 82       	std	Y+1, r1	; 0x01
		switch (Copy_u8Sense)
     de2:	8a 81       	ldd	r24, Y+2	; 0x02
     de4:	88 2f       	mov	r24, r24
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	83 30       	cpi	r24, 0x03	; 3
     dea:	91 05       	cpc	r25, r1
     dec:	61 f0       	breq	.+24     	; 0xe06 <EXTI_u8Int2SetSenseControl+0x32>
     dee:	04 97       	sbiw	r24, 0x04	; 4
     df0:	a1 f4       	brne	.+40     	; 0xe1a <EXTI_u8Int2SetSenseControl+0x46>
		{

		case RISING_EDGE:SET_BIT(MCUCSR,MCUCSR_ISC2);break;
     df2:	84 e5       	ldi	r24, 0x54	; 84
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	fc 01       	movw	r30, r24
     df8:	20 81       	ld	r18, Z
     dfa:	84 e5       	ldi	r24, 0x54	; 84
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	20 64       	ori	r18, 0x40	; 64
     e00:	fc 01       	movw	r30, r24
     e02:	20 83       	st	Z, r18
     e04:	0c c0       	rjmp	.+24     	; 0xe1e <EXTI_u8Int2SetSenseControl+0x4a>

		case FALLING_EDGE: 	CLR_BIT(MCUCSR,MCUCSR_ISC2);break;
     e06:	84 e5       	ldi	r24, 0x54	; 84
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	fc 01       	movw	r30, r24
     e0c:	20 81       	ld	r18, Z
     e0e:	84 e5       	ldi	r24, 0x54	; 84
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	2f 7b       	andi	r18, 0xBF	; 191
     e14:	fc 01       	movw	r30, r24
     e16:	20 83       	st	Z, r18
     e18:	02 c0       	rjmp	.+4      	; 0xe1e <EXTI_u8Int2SetSenseControl+0x4a>

		default: Local_u8ErrorState=NOK;
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	89 83       	std	Y+1, r24	; 0x01

		}

		return Local_u8ErrorState;
     e1e:	89 81       	ldd	r24, Y+1	; 0x01
}
     e20:	0f 90       	pop	r0
     e22:	0f 90       	pop	r0
     e24:	df 91       	pop	r29
     e26:	cf 91       	pop	r28
     e28:	08 95       	ret

00000e2a <EXTI_u8IntEnable>:


u8 EXTI_u8IntEnable(u8 Copy_u8Int)
{
     e2a:	cf 93       	push	r28
     e2c:	df 93       	push	r29
     e2e:	00 d0       	rcall	.+0      	; 0xe30 <EXTI_u8IntEnable+0x6>
     e30:	cd b7       	in	r28, 0x3d	; 61
     e32:	de b7       	in	r29, 0x3e	; 62
     e34:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
     e36:	19 82       	std	Y+1, r1	; 0x01
		switch(Copy_u8Int)
     e38:	8a 81       	ldd	r24, Y+2	; 0x02
     e3a:	88 2f       	mov	r24, r24
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	83 30       	cpi	r24, 0x03	; 3
     e40:	91 05       	cpc	r25, r1
     e42:	e9 f0       	breq	.+58     	; 0xe7e <EXTI_u8IntEnable+0x54>
     e44:	84 30       	cpi	r24, 0x04	; 4
     e46:	91 05       	cpc	r25, r1
     e48:	24 f5       	brge	.+72     	; 0xe92 <EXTI_u8IntEnable+0x68>
     e4a:	81 30       	cpi	r24, 0x01	; 1
     e4c:	91 05       	cpc	r25, r1
     e4e:	19 f0       	breq	.+6      	; 0xe56 <EXTI_u8IntEnable+0x2c>
     e50:	02 97       	sbiw	r24, 0x02	; 2
     e52:	59 f0       	breq	.+22     	; 0xe6a <EXTI_u8IntEnable+0x40>
     e54:	1e c0       	rjmp	.+60     	; 0xe92 <EXTI_u8IntEnable+0x68>
		{
			case INT0 :SET_BIT(GICR,GICR_INT0); break;
     e56:	8b e5       	ldi	r24, 0x5B	; 91
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	fc 01       	movw	r30, r24
     e5c:	20 81       	ld	r18, Z
     e5e:	8b e5       	ldi	r24, 0x5B	; 91
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	20 64       	ori	r18, 0x40	; 64
     e64:	fc 01       	movw	r30, r24
     e66:	20 83       	st	Z, r18
     e68:	16 c0       	rjmp	.+44     	; 0xe96 <EXTI_u8IntEnable+0x6c>
			case INT1: SET_BIT(GICR,GICR_INT1); break;
     e6a:	8b e5       	ldi	r24, 0x5B	; 91
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	fc 01       	movw	r30, r24
     e70:	20 81       	ld	r18, Z
     e72:	8b e5       	ldi	r24, 0x5B	; 91
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	20 68       	ori	r18, 0x80	; 128
     e78:	fc 01       	movw	r30, r24
     e7a:	20 83       	st	Z, r18
     e7c:	0c c0       	rjmp	.+24     	; 0xe96 <EXTI_u8IntEnable+0x6c>
			case INT2 :SET_BIT(GICR,GICR_INT2); break;
     e7e:	8b e5       	ldi	r24, 0x5B	; 91
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	fc 01       	movw	r30, r24
     e84:	20 81       	ld	r18, Z
     e86:	8b e5       	ldi	r24, 0x5B	; 91
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	20 62       	ori	r18, 0x20	; 32
     e8c:	fc 01       	movw	r30, r24
     e8e:	20 83       	st	Z, r18
     e90:	02 c0       	rjmp	.+4      	; 0xe96 <EXTI_u8IntEnable+0x6c>
			default: Local_u8ErrorState=NOK;
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	89 83       	std	Y+1, r24	; 0x01
		}

	return Local_u8ErrorState;
     e96:	89 81       	ldd	r24, Y+1	; 0x01
}
     e98:	0f 90       	pop	r0
     e9a:	0f 90       	pop	r0
     e9c:	df 91       	pop	r29
     e9e:	cf 91       	pop	r28
     ea0:	08 95       	ret

00000ea2 <EXTI_u8IntDisable>:


u8 EXTI_u8IntDisable(u8 Copy_u8Int)
{
     ea2:	cf 93       	push	r28
     ea4:	df 93       	push	r29
     ea6:	00 d0       	rcall	.+0      	; 0xea8 <EXTI_u8IntDisable+0x6>
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
     eac:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
     eae:	19 82       	std	Y+1, r1	; 0x01
		switch(Copy_u8Int)
     eb0:	8a 81       	ldd	r24, Y+2	; 0x02
     eb2:	88 2f       	mov	r24, r24
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	83 30       	cpi	r24, 0x03	; 3
     eb8:	91 05       	cpc	r25, r1
     eba:	e9 f0       	breq	.+58     	; 0xef6 <EXTI_u8IntDisable+0x54>
     ebc:	84 30       	cpi	r24, 0x04	; 4
     ebe:	91 05       	cpc	r25, r1
     ec0:	24 f5       	brge	.+72     	; 0xf0a <EXTI_u8IntDisable+0x68>
     ec2:	81 30       	cpi	r24, 0x01	; 1
     ec4:	91 05       	cpc	r25, r1
     ec6:	19 f0       	breq	.+6      	; 0xece <EXTI_u8IntDisable+0x2c>
     ec8:	02 97       	sbiw	r24, 0x02	; 2
     eca:	59 f0       	breq	.+22     	; 0xee2 <EXTI_u8IntDisable+0x40>
     ecc:	1e c0       	rjmp	.+60     	; 0xf0a <EXTI_u8IntDisable+0x68>
		{
			case INT0 :CLR_BIT(GICR,GICR_INT0); break;
     ece:	8b e5       	ldi	r24, 0x5B	; 91
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	fc 01       	movw	r30, r24
     ed4:	20 81       	ld	r18, Z
     ed6:	8b e5       	ldi	r24, 0x5B	; 91
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	2f 7b       	andi	r18, 0xBF	; 191
     edc:	fc 01       	movw	r30, r24
     ede:	20 83       	st	Z, r18
     ee0:	16 c0       	rjmp	.+44     	; 0xf0e <EXTI_u8IntDisable+0x6c>
			case INT1: CLR_BIT(GICR,GICR_INT1); break;
     ee2:	8b e5       	ldi	r24, 0x5B	; 91
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	fc 01       	movw	r30, r24
     ee8:	20 81       	ld	r18, Z
     eea:	8b e5       	ldi	r24, 0x5B	; 91
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	2f 77       	andi	r18, 0x7F	; 127
     ef0:	fc 01       	movw	r30, r24
     ef2:	20 83       	st	Z, r18
     ef4:	0c c0       	rjmp	.+24     	; 0xf0e <EXTI_u8IntDisable+0x6c>
			case INT2 :CLR_BIT(GICR,GICR_INT2); break;
     ef6:	8b e5       	ldi	r24, 0x5B	; 91
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	fc 01       	movw	r30, r24
     efc:	20 81       	ld	r18, Z
     efe:	8b e5       	ldi	r24, 0x5B	; 91
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	2f 7d       	andi	r18, 0xDF	; 223
     f04:	fc 01       	movw	r30, r24
     f06:	20 83       	st	Z, r18
     f08:	02 c0       	rjmp	.+4      	; 0xf0e <EXTI_u8IntDisable+0x6c>
			default: Local_u8ErrorState=NOK;
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	89 83       	std	Y+1, r24	; 0x01
		}

	return Local_u8ErrorState;
     f0e:	89 81       	ldd	r24, Y+1	; 0x01
}
     f10:	0f 90       	pop	r0
     f12:	0f 90       	pop	r0
     f14:	df 91       	pop	r29
     f16:	cf 91       	pop	r28
     f18:	08 95       	ret

00000f1a <EXTI_u8Int0SetCallBack>:

/*create Global Pointer to function to hold INT0 ISR Address*/
void (*EXTI_pvInt0Func)(void)=NULL;

u8 EXTI_u8Int0SetCallBack(void (*Copy_pvInt0Func)(void))
{
     f1a:	cf 93       	push	r28
     f1c:	df 93       	push	r29
     f1e:	00 d0       	rcall	.+0      	; 0xf20 <EXTI_u8Int0SetCallBack+0x6>
     f20:	0f 92       	push	r0
     f22:	cd b7       	in	r28, 0x3d	; 61
     f24:	de b7       	in	r29, 0x3e	; 62
     f26:	9b 83       	std	Y+3, r25	; 0x03
     f28:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
     f2a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt0Func !=NULL)
     f2c:	8a 81       	ldd	r24, Y+2	; 0x02
     f2e:	9b 81       	ldd	r25, Y+3	; 0x03
     f30:	89 2b       	or	r24, r25
     f32:	39 f0       	breq	.+14     	; 0xf42 <EXTI_u8Int0SetCallBack+0x28>
	{
		EXTI_pvInt0Func=Copy_pvInt0Func;
     f34:	8a 81       	ldd	r24, Y+2	; 0x02
     f36:	9b 81       	ldd	r25, Y+3	; 0x03
     f38:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <__data_end+0x1>
     f3c:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <EXTI_u8Int0SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState=NULL_POINTER;
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
     f46:	89 81       	ldd	r24, Y+1	; 0x01
}
     f48:	0f 90       	pop	r0
     f4a:	0f 90       	pop	r0
     f4c:	0f 90       	pop	r0
     f4e:	df 91       	pop	r29
     f50:	cf 91       	pop	r28
     f52:	08 95       	ret

00000f54 <__vector_1>:

/*ISR of INT0 */
void __vector_1 (void)  __attribute__((signal));
void __vector_1 (void)
{
     f54:	1f 92       	push	r1
     f56:	0f 92       	push	r0
     f58:	0f b6       	in	r0, 0x3f	; 63
     f5a:	0f 92       	push	r0
     f5c:	11 24       	eor	r1, r1
     f5e:	2f 93       	push	r18
     f60:	3f 93       	push	r19
     f62:	4f 93       	push	r20
     f64:	5f 93       	push	r21
     f66:	6f 93       	push	r22
     f68:	7f 93       	push	r23
     f6a:	8f 93       	push	r24
     f6c:	9f 93       	push	r25
     f6e:	af 93       	push	r26
     f70:	bf 93       	push	r27
     f72:	ef 93       	push	r30
     f74:	ff 93       	push	r31
     f76:	cf 93       	push	r28
     f78:	df 93       	push	r29
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvInt0Func !=NULL)
     f7e:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
     f82:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <__data_end+0x1>
     f86:	89 2b       	or	r24, r25
     f88:	31 f0       	breq	.+12     	; 0xf96 <__vector_1+0x42>
	{
		EXTI_pvInt0Func();
     f8a:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
     f8e:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <__data_end+0x1>
     f92:	fc 01       	movw	r30, r24
     f94:	09 95       	icall
	else
	{
		/*Do nothing*/
	}

}
     f96:	00 00       	nop
     f98:	df 91       	pop	r29
     f9a:	cf 91       	pop	r28
     f9c:	ff 91       	pop	r31
     f9e:	ef 91       	pop	r30
     fa0:	bf 91       	pop	r27
     fa2:	af 91       	pop	r26
     fa4:	9f 91       	pop	r25
     fa6:	8f 91       	pop	r24
     fa8:	7f 91       	pop	r23
     faa:	6f 91       	pop	r22
     fac:	5f 91       	pop	r21
     fae:	4f 91       	pop	r20
     fb0:	3f 91       	pop	r19
     fb2:	2f 91       	pop	r18
     fb4:	0f 90       	pop	r0
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	0f 90       	pop	r0
     fba:	1f 90       	pop	r1
     fbc:	18 95       	reti

00000fbe <EXTI_u8Int1SetCallBack>:

/*create Global Pointer to function to hold INT1 ISR Address*/
void (*EXTI_pvInt1Func)(void)=NULL;
u8 EXTI_u8Int1SetCallBack(void (*Copy_pvInt1Func)(void))
{
     fbe:	cf 93       	push	r28
     fc0:	df 93       	push	r29
     fc2:	00 d0       	rcall	.+0      	; 0xfc4 <EXTI_u8Int1SetCallBack+0x6>
     fc4:	0f 92       	push	r0
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
     fca:	9b 83       	std	Y+3, r25	; 0x03
     fcc:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
     fce:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt1Func !=NULL)
     fd0:	8a 81       	ldd	r24, Y+2	; 0x02
     fd2:	9b 81       	ldd	r25, Y+3	; 0x03
     fd4:	89 2b       	or	r24, r25
     fd6:	39 f0       	breq	.+14     	; 0xfe6 <EXTI_u8Int1SetCallBack+0x28>
	{
		EXTI_pvInt1Func=Copy_pvInt1Func;
     fd8:	8a 81       	ldd	r24, Y+2	; 0x02
     fda:	9b 81       	ldd	r25, Y+3	; 0x03
     fdc:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <EXTI_pvInt1Func+0x1>
     fe0:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <EXTI_pvInt1Func>
     fe4:	02 c0       	rjmp	.+4      	; 0xfea <EXTI_u8Int1SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState=NULL_POINTER;
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
     fea:	89 81       	ldd	r24, Y+1	; 0x01
}
     fec:	0f 90       	pop	r0
     fee:	0f 90       	pop	r0
     ff0:	0f 90       	pop	r0
     ff2:	df 91       	pop	r29
     ff4:	cf 91       	pop	r28
     ff6:	08 95       	ret

00000ff8 <__vector_2>:

/*ISR of INT1 */
void __vector_2 (void)  __attribute__((signal));
void __vector_2 (void)
{
     ff8:	1f 92       	push	r1
     ffa:	0f 92       	push	r0
     ffc:	0f b6       	in	r0, 0x3f	; 63
     ffe:	0f 92       	push	r0
    1000:	11 24       	eor	r1, r1
    1002:	2f 93       	push	r18
    1004:	3f 93       	push	r19
    1006:	4f 93       	push	r20
    1008:	5f 93       	push	r21
    100a:	6f 93       	push	r22
    100c:	7f 93       	push	r23
    100e:	8f 93       	push	r24
    1010:	9f 93       	push	r25
    1012:	af 93       	push	r26
    1014:	bf 93       	push	r27
    1016:	ef 93       	push	r30
    1018:	ff 93       	push	r31
    101a:	cf 93       	push	r28
    101c:	df 93       	push	r29
    101e:	cd b7       	in	r28, 0x3d	; 61
    1020:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvInt1Func !=NULL)
    1022:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <EXTI_pvInt1Func>
    1026:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <EXTI_pvInt1Func+0x1>
    102a:	89 2b       	or	r24, r25
    102c:	31 f0       	breq	.+12     	; 0x103a <__vector_2+0x42>
	{
		EXTI_pvInt1Func();
    102e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <EXTI_pvInt1Func>
    1032:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <EXTI_pvInt1Func+0x1>
    1036:	fc 01       	movw	r30, r24
    1038:	09 95       	icall
	else
	{
		/*Do nothing*/
	}

}
    103a:	00 00       	nop
    103c:	df 91       	pop	r29
    103e:	cf 91       	pop	r28
    1040:	ff 91       	pop	r31
    1042:	ef 91       	pop	r30
    1044:	bf 91       	pop	r27
    1046:	af 91       	pop	r26
    1048:	9f 91       	pop	r25
    104a:	8f 91       	pop	r24
    104c:	7f 91       	pop	r23
    104e:	6f 91       	pop	r22
    1050:	5f 91       	pop	r21
    1052:	4f 91       	pop	r20
    1054:	3f 91       	pop	r19
    1056:	2f 91       	pop	r18
    1058:	0f 90       	pop	r0
    105a:	0f be       	out	0x3f, r0	; 63
    105c:	0f 90       	pop	r0
    105e:	1f 90       	pop	r1
    1060:	18 95       	reti

00001062 <EXTI_u8Int2SetCallBack>:

/*create Global Pointer to function to hold INT2 ISR Address*/
void (*EXTI_pvInt2Func)(void)=NULL;
u8 EXTI_u8Int2SetCallBack(void (*Copy_pvInt2Func)(void))
{
    1062:	cf 93       	push	r28
    1064:	df 93       	push	r29
    1066:	00 d0       	rcall	.+0      	; 0x1068 <EXTI_u8Int2SetCallBack+0x6>
    1068:	0f 92       	push	r0
    106a:	cd b7       	in	r28, 0x3d	; 61
    106c:	de b7       	in	r29, 0x3e	; 62
    106e:	9b 83       	std	Y+3, r25	; 0x03
    1070:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    1072:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt2Func !=NULL)
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
    1076:	9b 81       	ldd	r25, Y+3	; 0x03
    1078:	89 2b       	or	r24, r25
    107a:	39 f0       	breq	.+14     	; 0x108a <EXTI_u8Int2SetCallBack+0x28>
	{
		EXTI_pvInt2Func=Copy_pvInt2Func;
    107c:	8a 81       	ldd	r24, Y+2	; 0x02
    107e:	9b 81       	ldd	r25, Y+3	; 0x03
    1080:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <EXTI_pvInt2Func+0x1>
    1084:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <EXTI_pvInt2Func>
    1088:	02 c0       	rjmp	.+4      	; 0x108e <EXTI_u8Int2SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState=NULL_POINTER;
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    108e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1090:	0f 90       	pop	r0
    1092:	0f 90       	pop	r0
    1094:	0f 90       	pop	r0
    1096:	df 91       	pop	r29
    1098:	cf 91       	pop	r28
    109a:	08 95       	ret

0000109c <__vector_3>:

/*ISR of INT2 */
void __vector_3 (void)  __attribute__((signal));
void __vector_3 (void)
{
    109c:	1f 92       	push	r1
    109e:	0f 92       	push	r0
    10a0:	0f b6       	in	r0, 0x3f	; 63
    10a2:	0f 92       	push	r0
    10a4:	11 24       	eor	r1, r1
    10a6:	2f 93       	push	r18
    10a8:	3f 93       	push	r19
    10aa:	4f 93       	push	r20
    10ac:	5f 93       	push	r21
    10ae:	6f 93       	push	r22
    10b0:	7f 93       	push	r23
    10b2:	8f 93       	push	r24
    10b4:	9f 93       	push	r25
    10b6:	af 93       	push	r26
    10b8:	bf 93       	push	r27
    10ba:	ef 93       	push	r30
    10bc:	ff 93       	push	r31
    10be:	cf 93       	push	r28
    10c0:	df 93       	push	r29
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvInt2Func !=NULL)
    10c6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <EXTI_pvInt2Func>
    10ca:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <EXTI_pvInt2Func+0x1>
    10ce:	89 2b       	or	r24, r25
    10d0:	31 f0       	breq	.+12     	; 0x10de <__vector_3+0x42>
	{
		EXTI_pvInt2Func();
    10d2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <EXTI_pvInt2Func>
    10d6:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <EXTI_pvInt2Func+0x1>
    10da:	fc 01       	movw	r30, r24
    10dc:	09 95       	icall
	else
	{
		/*Do nothing*/
	}

}
    10de:	00 00       	nop
    10e0:	df 91       	pop	r29
    10e2:	cf 91       	pop	r28
    10e4:	ff 91       	pop	r31
    10e6:	ef 91       	pop	r30
    10e8:	bf 91       	pop	r27
    10ea:	af 91       	pop	r26
    10ec:	9f 91       	pop	r25
    10ee:	8f 91       	pop	r24
    10f0:	7f 91       	pop	r23
    10f2:	6f 91       	pop	r22
    10f4:	5f 91       	pop	r21
    10f6:	4f 91       	pop	r20
    10f8:	3f 91       	pop	r19
    10fa:	2f 91       	pop	r18
    10fc:	0f 90       	pop	r0
    10fe:	0f be       	out	0x3f, r0	; 63
    1100:	0f 90       	pop	r0
    1102:	1f 90       	pop	r1
    1104:	18 95       	reti

00001106 <GIE_voidEnable>:
#include"GIE_interface.h"
#include"GIE_register.h"


void GIE_voidEnable(void)
{
    1106:	cf 93       	push	r28
    1108:	df 93       	push	r29
    110a:	cd b7       	in	r28, 0x3d	; 61
    110c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    110e:	8f e5       	ldi	r24, 0x5F	; 95
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	fc 01       	movw	r30, r24
    1114:	20 81       	ld	r18, Z
    1116:	8f e5       	ldi	r24, 0x5F	; 95
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	20 68       	ori	r18, 0x80	; 128
    111c:	fc 01       	movw	r30, r24
    111e:	20 83       	st	Z, r18
	
}
    1120:	00 00       	nop
    1122:	df 91       	pop	r29
    1124:	cf 91       	pop	r28
    1126:	08 95       	ret

00001128 <GIE_voidDisable>:
void GIE_voidDisable(void)
{
    1128:	cf 93       	push	r28
    112a:	df 93       	push	r29
    112c:	cd b7       	in	r28, 0x3d	; 61
    112e:	de b7       	in	r29, 0x3e	; 62
	
	CLR_BIT(SREG,SREG_I);
    1130:	8f e5       	ldi	r24, 0x5F	; 95
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	fc 01       	movw	r30, r24
    1136:	20 81       	ld	r18, Z
    1138:	8f e5       	ldi	r24, 0x5F	; 95
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	2f 77       	andi	r18, 0x7F	; 127
    113e:	fc 01       	movw	r30, r24
    1140:	20 83       	st	Z, r18
	
    1142:	00 00       	nop
    1144:	df 91       	pop	r29
    1146:	cf 91       	pop	r28
    1148:	08 95       	ret

0000114a <PORT_voidInit>:
#include"PORT_interface.h"
#include"PORT_register.h"


void PORT_voidInit()
{
    114a:	cf 93       	push	r28
    114c:	df 93       	push	r29
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
    1152:	8a e3       	ldi	r24, 0x3A	; 58
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	2f ef       	ldi	r18, 0xFF	; 255
    1158:	fc 01       	movw	r30, r24
    115a:	20 83       	st	Z, r18
	DDRB=PORTB_DIR;
    115c:	87 e3       	ldi	r24, 0x37	; 55
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	28 e0       	ldi	r18, 0x08	; 8
    1162:	fc 01       	movw	r30, r24
    1164:	20 83       	st	Z, r18
	DDRC=PORTC_DIR;
    1166:	84 e3       	ldi	r24, 0x34	; 52
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	27 e4       	ldi	r18, 0x47	; 71
    116c:	fc 01       	movw	r30, r24
    116e:	20 83       	st	Z, r18
	DDRD=PORTD_DIR;
    1170:	81 e3       	ldi	r24, 0x31	; 49
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	fc 01       	movw	r30, r24
    1176:	10 82       	st	Z, r1

	PORTA=PORTA_InitVal;
    1178:	8b e3       	ldi	r24, 0x3B	; 59
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	fc 01       	movw	r30, r24
    117e:	10 82       	st	Z, r1
	PORTB=PORTB_InitVal;
    1180:	88 e3       	ldi	r24, 0x38	; 56
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	fc 01       	movw	r30, r24
    1186:	10 82       	st	Z, r1
	PORTC=PORTC_InitVal;
    1188:	85 e3       	ldi	r24, 0x35	; 53
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	fc 01       	movw	r30, r24
    118e:	10 82       	st	Z, r1
	PORTD=PORTD_InitVal;
    1190:	82 e3       	ldi	r24, 0x32	; 50
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	fc 01       	movw	r30, r24
    1196:	10 82       	st	Z, r1
}
    1198:	00 00       	nop
    119a:	df 91       	pop	r29
    119c:	cf 91       	pop	r28
    119e:	08 95       	ret

000011a0 <TIMER0_voidInit>:


static void (*TIMER0_pvCallBackFunc)(void)=NULL;

void TIMER0_voidInit(void)
{
    11a0:	cf 93       	push	r28
    11a2:	df 93       	push	r29
    11a4:	cd b7       	in	r28, 0x3d	; 61
    11a6:	de b7       	in	r29, 0x3e	; 62
			SET_BIT(TIMSK,TIMSK_OCIE0);

#elif	WAVE_GENERATION_MODE == FAST_PWM

	/*choose fastPWM Mode*/
	SET_BIT(TCCR0,TCCR0_WGM00);
    11a8:	83 e5       	ldi	r24, 0x53	; 83
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	fc 01       	movw	r30, r24
    11ae:	20 81       	ld	r18, Z
    11b0:	83 e5       	ldi	r24, 0x53	; 83
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	20 64       	ori	r18, 0x40	; 64
    11b6:	fc 01       	movw	r30, r24
    11b8:	20 83       	st	Z, r18
	SET_BIT(TCCR0,TCCR0_WGM01);
    11ba:	83 e5       	ldi	r24, 0x53	; 83
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	fc 01       	movw	r30, r24
    11c0:	20 81       	ld	r18, Z
    11c2:	83 e5       	ldi	r24, 0x53	; 83
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	28 60       	ori	r18, 0x08	; 8
    11c8:	fc 01       	movw	r30, r24
    11ca:	20 83       	st	Z, r18
		SET_BIT(TCCR0,TCCR0_COM00);

		#elif COMP_OUT_MODE == NON_INVERTING_MODE

		/*Choose Non_Inverting mode*/
		SET_BIT(TCCR0,TCCR0_COM01);
    11cc:	83 e5       	ldi	r24, 0x53	; 83
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	fc 01       	movw	r30, r24
    11d2:	20 81       	ld	r18, Z
    11d4:	83 e5       	ldi	r24, 0x53	; 83
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	20 62       	ori	r18, 0x20	; 32
    11da:	fc 01       	movw	r30, r24
    11dc:	20 83       	st	Z, r18
		CLR_BIT(TCCR0,TCCR0_COM00);
    11de:	83 e5       	ldi	r24, 0x53	; 83
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	fc 01       	movw	r30, r24
    11e4:	20 81       	ld	r18, Z
    11e6:	83 e5       	ldi	r24, 0x53	; 83
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	2f 7e       	andi	r18, 0xEF	; 239
    11ec:	fc 01       	movw	r30, r24
    11ee:	20 83       	st	Z, r18
#endif



		/*Set prescaler(Bit Masking) */
		TCCR0 &=TIMER_PRESC_MASK;
    11f0:	83 e5       	ldi	r24, 0x53	; 83
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	fc 01       	movw	r30, r24
    11f6:	20 81       	ld	r18, Z
    11f8:	83 e5       	ldi	r24, 0x53	; 83
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	28 7f       	andi	r18, 0xF8	; 248
    11fe:	fc 01       	movw	r30, r24
    1200:	20 83       	st	Z, r18
		TCCR0 |=CLK_PRESCALER;
    1202:	83 e5       	ldi	r24, 0x53	; 83
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	fc 01       	movw	r30, r24
    1208:	20 81       	ld	r18, Z
    120a:	83 e5       	ldi	r24, 0x53	; 83
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	22 60       	ori	r18, 0x02	; 2
    1210:	fc 01       	movw	r30, r24
    1212:	20 83       	st	Z, r18


}
    1214:	00 00       	nop
    1216:	df 91       	pop	r29
    1218:	cf 91       	pop	r28
    121a:	08 95       	ret

0000121c <TIMER0_voidSetCompMatchValue>:

void TIMER0_voidSetCompMatchValue(u8 Copy_u8Value)
{
    121c:	cf 93       	push	r28
    121e:	df 93       	push	r29
    1220:	0f 92       	push	r0
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
    1226:	89 83       	std	Y+1, r24	; 0x01
	OCR0=Copy_u8Value;
    1228:	8c e5       	ldi	r24, 0x5C	; 92
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	29 81       	ldd	r18, Y+1	; 0x01
    122e:	fc 01       	movw	r30, r24
    1230:	20 83       	st	Z, r18
}
    1232:	00 00       	nop
    1234:	0f 90       	pop	r0
    1236:	df 91       	pop	r29
    1238:	cf 91       	pop	r28
    123a:	08 95       	ret

0000123c <TIMER0_u8SetCallBack>:

u8 TIMER0_u8SetCallBack(void (*Copy_pvCallBackFunc)(void))
{
    123c:	cf 93       	push	r28
    123e:	df 93       	push	r29
    1240:	00 d0       	rcall	.+0      	; 0x1242 <TIMER0_u8SetCallBack+0x6>
    1242:	0f 92       	push	r0
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62
    1248:	9b 83       	std	Y+3, r25	; 0x03
    124a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    124c:	19 82       	std	Y+1, r1	; 0x01
	
	if(Copy_pvCallBackFunc!=NULL)
    124e:	8a 81       	ldd	r24, Y+2	; 0x02
    1250:	9b 81       	ldd	r25, Y+3	; 0x03
    1252:	89 2b       	or	r24, r25
    1254:	39 f0       	breq	.+14     	; 0x1264 <TIMER0_u8SetCallBack+0x28>
	{
		TIMER0_pvCallBackFunc=Copy_pvCallBackFunc;
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	9b 81       	ldd	r25, Y+3	; 0x03
    125a:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <TIMER0_pvCallBackFunc+0x1>
    125e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <TIMER0_pvCallBackFunc>
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <TIMER0_u8SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState=NULL_POINTER;
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1268:	89 81       	ldd	r24, Y+1	; 0x01
}
    126a:	0f 90       	pop	r0
    126c:	0f 90       	pop	r0
    126e:	0f 90       	pop	r0
    1270:	df 91       	pop	r29
    1272:	cf 91       	pop	r28
    1274:	08 95       	ret

00001276 <TIMER1_voidInit>:


void TIMER1_voidInit()

{
    1276:	cf 93       	push	r28
    1278:	df 93       	push	r29
    127a:	cd b7       	in	r28, 0x3d	; 61
    127c:	de b7       	in	r29, 0x3e	; 62
		SET_BIT(TCCR1A,TCCR1A_WGM11);
		SET_BIT(TCCR1B,TCCR1B_WGM12);
		SET_BIT(TCCR1B,TCCR1B_WGM13);*/

		/*Prescaler */
		TCCR1B &=TIMER_PRESC_MASK;
    127e:	8e e4       	ldi	r24, 0x4E	; 78
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	fc 01       	movw	r30, r24
    1284:	20 81       	ld	r18, Z
    1286:	8e e4       	ldi	r24, 0x4E	; 78
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	28 7f       	andi	r18, 0xF8	; 248
    128c:	fc 01       	movw	r30, r24
    128e:	20 83       	st	Z, r18
		TCCR1B |= DIVIDE_BY_8;
    1290:	8e e4       	ldi	r24, 0x4E	; 78
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	fc 01       	movw	r30, r24
    1296:	20 81       	ld	r18, Z
    1298:	8e e4       	ldi	r24, 0x4E	; 78
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	22 60       	ori	r18, 0x02	; 2
    129e:	fc 01       	movw	r30, r24
    12a0:	20 83       	st	Z, r18
}
    12a2:	00 00       	nop
    12a4:	df 91       	pop	r29
    12a6:	cf 91       	pop	r28
    12a8:	08 95       	ret

000012aa <TIMER1_voidSetTimerValue>:

void TIMER1_voidSetTimerValue(u16 Copy_u16Value)
{
    12aa:	cf 93       	push	r28
    12ac:	df 93       	push	r29
    12ae:	00 d0       	rcall	.+0      	; 0x12b0 <TIMER1_voidSetTimerValue+0x6>
    12b0:	cd b7       	in	r28, 0x3d	; 61
    12b2:	de b7       	in	r29, 0x3e	; 62
    12b4:	9a 83       	std	Y+2, r25	; 0x02
    12b6:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=Copy_u16Value;
    12b8:	8c e4       	ldi	r24, 0x4C	; 76
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	29 81       	ldd	r18, Y+1	; 0x01
    12be:	3a 81       	ldd	r19, Y+2	; 0x02
    12c0:	fc 01       	movw	r30, r24
    12c2:	31 83       	std	Z+1, r19	; 0x01
    12c4:	20 83       	st	Z, r18
}
    12c6:	00 00       	nop
    12c8:	0f 90       	pop	r0
    12ca:	0f 90       	pop	r0
    12cc:	df 91       	pop	r29
    12ce:	cf 91       	pop	r28
    12d0:	08 95       	ret

000012d2 <TIMER1_u16ReadTimerValue>:

u16 TIMER1_u16ReadTimerValue()
{
    12d2:	cf 93       	push	r28
    12d4:	df 93       	push	r29
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    12da:	8c e4       	ldi	r24, 0x4C	; 76
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	fc 01       	movw	r30, r24
    12e0:	80 81       	ld	r24, Z
    12e2:	91 81       	ldd	r25, Z+1	; 0x01
}
    12e4:	df 91       	pop	r29
    12e6:	cf 91       	pop	r28
    12e8:	08 95       	ret

000012ea <TIMER1_voidSetICR>:



void TIMER1_voidSetICR(u16 Copy_u16TopValue)
{
    12ea:	cf 93       	push	r28
    12ec:	df 93       	push	r29
    12ee:	00 d0       	rcall	.+0      	; 0x12f0 <TIMER1_voidSetICR+0x6>
    12f0:	cd b7       	in	r28, 0x3d	; 61
    12f2:	de b7       	in	r29, 0x3e	; 62
    12f4:	9a 83       	std	Y+2, r25	; 0x02
    12f6:	89 83       	std	Y+1, r24	; 0x01
	ICR1=Copy_u16TopValue;
    12f8:	86 e4       	ldi	r24, 0x46	; 70
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	29 81       	ldd	r18, Y+1	; 0x01
    12fe:	3a 81       	ldd	r19, Y+2	; 0x02
    1300:	fc 01       	movw	r30, r24
    1302:	31 83       	std	Z+1, r19	; 0x01
    1304:	20 83       	st	Z, r18

}
    1306:	00 00       	nop
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	df 91       	pop	r29
    130e:	cf 91       	pop	r28
    1310:	08 95       	ret

00001312 <TIMER1_voidSetChannelACompMatch>:
void TIMER1_voidSetChannelACompMatch(u16 Copy_u16ChannelACompMatch)
{
    1312:	cf 93       	push	r28
    1314:	df 93       	push	r29
    1316:	00 d0       	rcall	.+0      	; 0x1318 <TIMER1_voidSetChannelACompMatch+0x6>
    1318:	cd b7       	in	r28, 0x3d	; 61
    131a:	de b7       	in	r29, 0x3e	; 62
    131c:	9a 83       	std	Y+2, r25	; 0x02
    131e:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=Copy_u16ChannelACompMatch;
    1320:	8a e4       	ldi	r24, 0x4A	; 74
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	29 81       	ldd	r18, Y+1	; 0x01
    1326:	3a 81       	ldd	r19, Y+2	; 0x02
    1328:	fc 01       	movw	r30, r24
    132a:	31 83       	std	Z+1, r19	; 0x01
    132c:	20 83       	st	Z, r18
}
    132e:	00 00       	nop
    1330:	0f 90       	pop	r0
    1332:	0f 90       	pop	r0
    1334:	df 91       	pop	r29
    1336:	cf 91       	pop	r28
    1338:	08 95       	ret

0000133a <TIMER1_voidSetChannelBCompMatch>:

void TIMER1_voidSetChannelBCompMatch(u16 Copy_u16ChannelBCompMatch)
{
    133a:	cf 93       	push	r28
    133c:	df 93       	push	r29
    133e:	00 d0       	rcall	.+0      	; 0x1340 <TIMER1_voidSetChannelBCompMatch+0x6>
    1340:	cd b7       	in	r28, 0x3d	; 61
    1342:	de b7       	in	r29, 0x3e	; 62
    1344:	9a 83       	std	Y+2, r25	; 0x02
    1346:	89 83       	std	Y+1, r24	; 0x01
	OCR1B=Copy_u16ChannelBCompMatch;
    1348:	88 e4       	ldi	r24, 0x48	; 72
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	29 81       	ldd	r18, Y+1	; 0x01
    134e:	3a 81       	ldd	r19, Y+2	; 0x02
    1350:	fc 01       	movw	r30, r24
    1352:	31 83       	std	Z+1, r19	; 0x01
    1354:	20 83       	st	Z, r18
}
    1356:	00 00       	nop
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	df 91       	pop	r29
    135e:	cf 91       	pop	r28
    1360:	08 95       	ret

00001362 <__vector_10>:

void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
    1362:	1f 92       	push	r1
    1364:	0f 92       	push	r0
    1366:	0f b6       	in	r0, 0x3f	; 63
    1368:	0f 92       	push	r0
    136a:	11 24       	eor	r1, r1
    136c:	2f 93       	push	r18
    136e:	3f 93       	push	r19
    1370:	4f 93       	push	r20
    1372:	5f 93       	push	r21
    1374:	6f 93       	push	r22
    1376:	7f 93       	push	r23
    1378:	8f 93       	push	r24
    137a:	9f 93       	push	r25
    137c:	af 93       	push	r26
    137e:	bf 93       	push	r27
    1380:	ef 93       	push	r30
    1382:	ff 93       	push	r31
    1384:	cf 93       	push	r28
    1386:	df 93       	push	r29
    1388:	cd b7       	in	r28, 0x3d	; 61
    138a:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pvCallBackFunc!=NULL)
    138c:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <TIMER0_pvCallBackFunc>
    1390:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <TIMER0_pvCallBackFunc+0x1>
    1394:	89 2b       	or	r24, r25
    1396:	31 f0       	breq	.+12     	; 0x13a4 <__vector_10+0x42>
	{
		TIMER0_pvCallBackFunc();
    1398:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <TIMER0_pvCallBackFunc>
    139c:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <TIMER0_pvCallBackFunc+0x1>
    13a0:	fc 01       	movw	r30, r24
    13a2:	09 95       	icall
	}

}
    13a4:	00 00       	nop
    13a6:	df 91       	pop	r29
    13a8:	cf 91       	pop	r28
    13aa:	ff 91       	pop	r31
    13ac:	ef 91       	pop	r30
    13ae:	bf 91       	pop	r27
    13b0:	af 91       	pop	r26
    13b2:	9f 91       	pop	r25
    13b4:	8f 91       	pop	r24
    13b6:	7f 91       	pop	r23
    13b8:	6f 91       	pop	r22
    13ba:	5f 91       	pop	r21
    13bc:	4f 91       	pop	r20
    13be:	3f 91       	pop	r19
    13c0:	2f 91       	pop	r18
    13c2:	0f 90       	pop	r0
    13c4:	0f be       	out	0x3f, r0	; 63
    13c6:	0f 90       	pop	r0
    13c8:	1f 90       	pop	r1
    13ca:	18 95       	reti

000013cc <main>:
static u16 App_u16OnTicks=0;

void ICU_SW();

void main()
{
    13cc:	cf 93       	push	r28
    13ce:	df 93       	push	r29
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
    13d4:	28 97       	sbiw	r28, 0x08	; 8
    13d6:	0f b6       	in	r0, 0x3f	; 63
    13d8:	f8 94       	cli
    13da:	de bf       	out	0x3e, r29	; 62
    13dc:	0f be       	out	0x3f, r0	; 63
    13de:	cd bf       	out	0x3d, r28	; 61

	PORT_voidInit();
    13e0:	0e 94 a5 08 	call	0x114a	; 0x114a <PORT_voidInit>

	EXTI_u8Int0SetCallBack(ICU_SW);
    13e4:	83 e4       	ldi	r24, 0x43	; 67
    13e6:	9a e0       	ldi	r25, 0x0A	; 10
    13e8:	0e 94 8d 07 	call	0xf1a	; 0xf1a <EXTI_u8Int0SetCallBack>
	EXTI_voidInt0Init();
    13ec:	0e 94 a4 05 	call	0xb48	; 0xb48 <EXTI_voidInt0Init>

	TIMER0_voidSetCompMatchValue(64);
    13f0:	80 e4       	ldi	r24, 0x40	; 64
    13f2:	0e 94 0e 09 	call	0x121c	; 0x121c <TIMER0_voidSetCompMatchValue>
	TIMER1_voidInit();
    13f6:	0e 94 3b 09 	call	0x1276	; 0x1276 <TIMER1_voidInit>

	CLCD_voidInit();
    13fa:	0e 94 bf 01 	call	0x37e	; 0x37e <CLCD_voidInit>
	TIMER0_voidInit();
    13fe:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <TIMER0_voidInit>
	GIE_voidEnable();
    1402:	0e 94 83 08 	call	0x1106	; 0x1106 <GIE_voidEnable>


	while(1)
	{
		/*Wait until period time and on ticks are measured*/
		while((App_u16PeriodTicks == 0) && (App_u16OnTicks == 0));
    1406:	00 00       	nop
    1408:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <App_u16PeriodTicks>
    140c:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <App_u16PeriodTicks+0x1>
    1410:	89 2b       	or	r24, r25
    1412:	31 f4       	brne	.+12     	; 0x1420 <main+0x54>
    1414:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <App_u16OnTicks>
    1418:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <App_u16OnTicks+0x1>
    141c:	89 2b       	or	r24, r25
    141e:	a1 f3       	breq	.-24     	; 0x1408 <main+0x3c>

		CLCD_voidGoToXY(0,0);
    1420:	60 e0       	ldi	r22, 0x00	; 0
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	0e 94 95 02 	call	0x52a	; 0x52a <CLCD_voidGoToXY>
		CLCD_voidSendString("PTime = ");
    1428:	80 e6       	ldi	r24, 0x60	; 96
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <CLCD_voidSendString>
		CLCD_voidWriteNumber(App_u16PeriodTicks);
    1430:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <App_u16PeriodTicks>
    1434:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <App_u16PeriodTicks+0x1>
    1438:	9c 01       	movw	r18, r24
    143a:	40 e0       	ldi	r20, 0x00	; 0
    143c:	50 e0       	ldi	r21, 0x00	; 0
    143e:	29 83       	std	Y+1, r18	; 0x01
    1440:	3a 83       	std	Y+2, r19	; 0x02
    1442:	4b 83       	std	Y+3, r20	; 0x03
    1444:	5c 83       	std	Y+4, r21	; 0x04
    1446:	69 81       	ldd	r22, Y+1	; 0x01
    1448:	7a 81       	ldd	r23, Y+2	; 0x02
    144a:	8b 81       	ldd	r24, Y+3	; 0x03
    144c:	9c 81       	ldd	r25, Y+4	; 0x04
    144e:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <CLCD_voidWriteNumber>

		CLCD_voidGoToXY(1,0);
    1452:	60 e0       	ldi	r22, 0x00	; 0
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	0e 94 95 02 	call	0x52a	; 0x52a <CLCD_voidGoToXY>
		CLCD_voidSendString("On Ticks = ");
    145a:	89 e6       	ldi	r24, 0x69	; 105
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <CLCD_voidSendString>
		CLCD_voidWriteNumber(App_u16OnTicks);
    1462:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <App_u16OnTicks>
    1466:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <App_u16OnTicks+0x1>
    146a:	9c 01       	movw	r18, r24
    146c:	40 e0       	ldi	r20, 0x00	; 0
    146e:	50 e0       	ldi	r21, 0x00	; 0
    1470:	2d 83       	std	Y+5, r18	; 0x05
    1472:	3e 83       	std	Y+6, r19	; 0x06
    1474:	4f 83       	std	Y+7, r20	; 0x07
    1476:	58 87       	std	Y+8, r21	; 0x08
    1478:	6d 81       	ldd	r22, Y+5	; 0x05
    147a:	7e 81       	ldd	r23, Y+6	; 0x06
    147c:	8f 81       	ldd	r24, Y+7	; 0x07
    147e:	98 85       	ldd	r25, Y+8	; 0x08
    1480:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <CLCD_voidWriteNumber>


	while(1)
	{
		/*Wait until period time and on ticks are measured*/
		while((App_u16PeriodTicks == 0) && (App_u16OnTicks == 0));
    1484:	c0 cf       	rjmp	.-128    	; 0x1406 <main+0x3a>

00001486 <ICU_SW>:
}

/*The function that will run inside the INT0_ISR*/

void ICU_SW()
{
    1486:	cf 93       	push	r28
    1488:	df 93       	push	r29
    148a:	cd b7       	in	r28, 0x3d	; 61
    148c:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8Counter=0;
	//u16 App_u16PeriodTicks, App_u16OnTicks;

	Local_u8Counter++;
    148e:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <Local_u8Counter.1552>
    1492:	8f 5f       	subi	r24, 0xFF	; 255
    1494:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <Local_u8Counter.1552>

	if(Local_u8Counter==1)
    1498:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <Local_u8Counter.1552>
    149c:	81 30       	cpi	r24, 0x01	; 1
    149e:	29 f4       	brne	.+10     	; 0x14aa <ICU_SW+0x24>
	{
		/*First Rising Edge*/
		TIMER1_voidSetTimerValue(0);
    14a0:	80 e0       	ldi	r24, 0x00	; 0
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	0e 94 55 09 	call	0x12aa	; 0x12aa <TIMER1_voidSetTimerValue>

		/*Disable INT0 interrupt*/
		EXTI_u8IntDisable(INT0);

	}
}
    14a8:	2b c0       	rjmp	.+86     	; 0x1500 <ICU_SW+0x7a>
	if(Local_u8Counter==1)
	{
		/*First Rising Edge*/
		TIMER1_voidSetTimerValue(0);
	}
	else if(Local_u8Counter==2)
    14aa:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <Local_u8Counter.1552>
    14ae:	82 30       	cpi	r24, 0x02	; 2
    14b0:	51 f4       	brne	.+20     	; 0x14c6 <ICU_SW+0x40>
	{
		/*Second Rising Edge*/
		App_u16PeriodTicks=TIMER1_u16ReadTimerValue();
    14b2:	0e 94 69 09 	call	0x12d2	; 0x12d2 <TIMER1_u16ReadTimerValue>
    14b6:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <App_u16PeriodTicks+0x1>
    14ba:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <App_u16PeriodTicks>

		/*Change Trigger to falling Edge*/
		EXTI_u8Int0SetSenseControl(FALLING_EDGE);
    14be:	83 e0       	ldi	r24, 0x03	; 3
    14c0:	0e 94 04 06 	call	0xc08	; 0xc08 <EXTI_u8Int0SetSenseControl>

		/*Disable INT0 interrupt*/
		EXTI_u8IntDisable(INT0);

	}
}
    14c4:	1d c0       	rjmp	.+58     	; 0x1500 <ICU_SW+0x7a>

		/*Change Trigger to falling Edge*/
		EXTI_u8Int0SetSenseControl(FALLING_EDGE);

	}
	else if(Local_u8Counter==3)
    14c6:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <Local_u8Counter.1552>
    14ca:	83 30       	cpi	r24, 0x03	; 3
    14cc:	c9 f4       	brne	.+50     	; 0x1500 <ICU_SW+0x7a>
	{
		/*Timer reading now is period ticks + on ticks*/
		App_u16OnTicks=TIMER1_u16ReadTimerValue();
    14ce:	0e 94 69 09 	call	0x12d2	; 0x12d2 <TIMER1_u16ReadTimerValue>
    14d2:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <App_u16OnTicks+0x1>
    14d6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <App_u16OnTicks>
		App_u16OnTicks -=App_u16PeriodTicks;
    14da:	20 91 80 00 	lds	r18, 0x0080	; 0x800080 <App_u16OnTicks>
    14de:	30 91 81 00 	lds	r19, 0x0081	; 0x800081 <App_u16OnTicks+0x1>
    14e2:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <App_u16PeriodTicks>
    14e6:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <App_u16PeriodTicks+0x1>
    14ea:	a9 01       	movw	r20, r18
    14ec:	48 1b       	sub	r20, r24
    14ee:	59 0b       	sbc	r21, r25
    14f0:	ca 01       	movw	r24, r20
    14f2:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <App_u16OnTicks+0x1>
    14f6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <App_u16OnTicks>

		/*Disable INT0 interrupt*/
		EXTI_u8IntDisable(INT0);
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	0e 94 51 07 	call	0xea2	; 0xea2 <EXTI_u8IntDisable>

	}
}
    1500:	00 00       	nop
    1502:	df 91       	pop	r29
    1504:	cf 91       	pop	r28
    1506:	08 95       	ret

00001508 <__udivmodsi4>:
    1508:	a1 e2       	ldi	r26, 0x21	; 33
    150a:	1a 2e       	mov	r1, r26
    150c:	aa 1b       	sub	r26, r26
    150e:	bb 1b       	sub	r27, r27
    1510:	fd 01       	movw	r30, r26
    1512:	0d c0       	rjmp	.+26     	; 0x152e <__udivmodsi4_ep>

00001514 <__udivmodsi4_loop>:
    1514:	aa 1f       	adc	r26, r26
    1516:	bb 1f       	adc	r27, r27
    1518:	ee 1f       	adc	r30, r30
    151a:	ff 1f       	adc	r31, r31
    151c:	a2 17       	cp	r26, r18
    151e:	b3 07       	cpc	r27, r19
    1520:	e4 07       	cpc	r30, r20
    1522:	f5 07       	cpc	r31, r21
    1524:	20 f0       	brcs	.+8      	; 0x152e <__udivmodsi4_ep>
    1526:	a2 1b       	sub	r26, r18
    1528:	b3 0b       	sbc	r27, r19
    152a:	e4 0b       	sbc	r30, r20
    152c:	f5 0b       	sbc	r31, r21

0000152e <__udivmodsi4_ep>:
    152e:	66 1f       	adc	r22, r22
    1530:	77 1f       	adc	r23, r23
    1532:	88 1f       	adc	r24, r24
    1534:	99 1f       	adc	r25, r25
    1536:	1a 94       	dec	r1
    1538:	69 f7       	brne	.-38     	; 0x1514 <__udivmodsi4_loop>
    153a:	60 95       	com	r22
    153c:	70 95       	com	r23
    153e:	80 95       	com	r24
    1540:	90 95       	com	r25
    1542:	9b 01       	movw	r18, r22
    1544:	ac 01       	movw	r20, r24
    1546:	bd 01       	movw	r22, r26
    1548:	cf 01       	movw	r24, r30
    154a:	08 95       	ret

0000154c <__cmpsf2>:
    154c:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__fp_cmp>
    1550:	08 f4       	brcc	.+2      	; 0x1554 <__cmpsf2+0x8>
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	08 95       	ret

00001556 <__fixunssfsi>:
    1556:	0e 94 06 0b 	call	0x160c	; 0x160c <__fp_splitA>
    155a:	88 f0       	brcs	.+34     	; 0x157e <__fixunssfsi+0x28>
    155c:	9f 57       	subi	r25, 0x7F	; 127
    155e:	98 f0       	brcs	.+38     	; 0x1586 <__fixunssfsi+0x30>
    1560:	b9 2f       	mov	r27, r25
    1562:	99 27       	eor	r25, r25
    1564:	b7 51       	subi	r27, 0x17	; 23
    1566:	b0 f0       	brcs	.+44     	; 0x1594 <__fixunssfsi+0x3e>
    1568:	e1 f0       	breq	.+56     	; 0x15a2 <__fixunssfsi+0x4c>
    156a:	66 0f       	add	r22, r22
    156c:	77 1f       	adc	r23, r23
    156e:	88 1f       	adc	r24, r24
    1570:	99 1f       	adc	r25, r25
    1572:	1a f0       	brmi	.+6      	; 0x157a <__fixunssfsi+0x24>
    1574:	ba 95       	dec	r27
    1576:	c9 f7       	brne	.-14     	; 0x156a <__fixunssfsi+0x14>
    1578:	14 c0       	rjmp	.+40     	; 0x15a2 <__fixunssfsi+0x4c>
    157a:	b1 30       	cpi	r27, 0x01	; 1
    157c:	91 f0       	breq	.+36     	; 0x15a2 <__fixunssfsi+0x4c>
    157e:	0e 94 20 0b 	call	0x1640	; 0x1640 <__fp_zero>
    1582:	b1 e0       	ldi	r27, 0x01	; 1
    1584:	08 95       	ret
    1586:	0c 94 20 0b 	jmp	0x1640	; 0x1640 <__fp_zero>
    158a:	67 2f       	mov	r22, r23
    158c:	78 2f       	mov	r23, r24
    158e:	88 27       	eor	r24, r24
    1590:	b8 5f       	subi	r27, 0xF8	; 248
    1592:	39 f0       	breq	.+14     	; 0x15a2 <__fixunssfsi+0x4c>
    1594:	b9 3f       	cpi	r27, 0xF9	; 249
    1596:	cc f3       	brlt	.-14     	; 0x158a <__fixunssfsi+0x34>
    1598:	86 95       	lsr	r24
    159a:	77 95       	ror	r23
    159c:	67 95       	ror	r22
    159e:	b3 95       	inc	r27
    15a0:	d9 f7       	brne	.-10     	; 0x1598 <__fixunssfsi+0x42>
    15a2:	3e f4       	brtc	.+14     	; 0x15b2 <__fixunssfsi+0x5c>
    15a4:	90 95       	com	r25
    15a6:	80 95       	com	r24
    15a8:	70 95       	com	r23
    15aa:	61 95       	neg	r22
    15ac:	7f 4f       	sbci	r23, 0xFF	; 255
    15ae:	8f 4f       	sbci	r24, 0xFF	; 255
    15b0:	9f 4f       	sbci	r25, 0xFF	; 255
    15b2:	08 95       	ret

000015b4 <__fp_cmp>:
    15b4:	99 0f       	add	r25, r25
    15b6:	00 08       	sbc	r0, r0
    15b8:	55 0f       	add	r21, r21
    15ba:	aa 0b       	sbc	r26, r26
    15bc:	e0 e8       	ldi	r30, 0x80	; 128
    15be:	fe ef       	ldi	r31, 0xFE	; 254
    15c0:	16 16       	cp	r1, r22
    15c2:	17 06       	cpc	r1, r23
    15c4:	e8 07       	cpc	r30, r24
    15c6:	f9 07       	cpc	r31, r25
    15c8:	c0 f0       	brcs	.+48     	; 0x15fa <__fp_cmp+0x46>
    15ca:	12 16       	cp	r1, r18
    15cc:	13 06       	cpc	r1, r19
    15ce:	e4 07       	cpc	r30, r20
    15d0:	f5 07       	cpc	r31, r21
    15d2:	98 f0       	brcs	.+38     	; 0x15fa <__fp_cmp+0x46>
    15d4:	62 1b       	sub	r22, r18
    15d6:	73 0b       	sbc	r23, r19
    15d8:	84 0b       	sbc	r24, r20
    15da:	95 0b       	sbc	r25, r21
    15dc:	39 f4       	brne	.+14     	; 0x15ec <__fp_cmp+0x38>
    15de:	0a 26       	eor	r0, r26
    15e0:	61 f0       	breq	.+24     	; 0x15fa <__fp_cmp+0x46>
    15e2:	23 2b       	or	r18, r19
    15e4:	24 2b       	or	r18, r20
    15e6:	25 2b       	or	r18, r21
    15e8:	21 f4       	brne	.+8      	; 0x15f2 <__fp_cmp+0x3e>
    15ea:	08 95       	ret
    15ec:	0a 26       	eor	r0, r26
    15ee:	09 f4       	brne	.+2      	; 0x15f2 <__fp_cmp+0x3e>
    15f0:	a1 40       	sbci	r26, 0x01	; 1
    15f2:	a6 95       	lsr	r26
    15f4:	8f ef       	ldi	r24, 0xFF	; 255
    15f6:	81 1d       	adc	r24, r1
    15f8:	81 1d       	adc	r24, r1
    15fa:	08 95       	ret

000015fc <__fp_split3>:
    15fc:	57 fd       	sbrc	r21, 7
    15fe:	90 58       	subi	r25, 0x80	; 128
    1600:	44 0f       	add	r20, r20
    1602:	55 1f       	adc	r21, r21
    1604:	59 f0       	breq	.+22     	; 0x161c <__fp_splitA+0x10>
    1606:	5f 3f       	cpi	r21, 0xFF	; 255
    1608:	71 f0       	breq	.+28     	; 0x1626 <__fp_splitA+0x1a>
    160a:	47 95       	ror	r20

0000160c <__fp_splitA>:
    160c:	88 0f       	add	r24, r24
    160e:	97 fb       	bst	r25, 7
    1610:	99 1f       	adc	r25, r25
    1612:	61 f0       	breq	.+24     	; 0x162c <__fp_splitA+0x20>
    1614:	9f 3f       	cpi	r25, 0xFF	; 255
    1616:	79 f0       	breq	.+30     	; 0x1636 <__fp_splitA+0x2a>
    1618:	87 95       	ror	r24
    161a:	08 95       	ret
    161c:	12 16       	cp	r1, r18
    161e:	13 06       	cpc	r1, r19
    1620:	14 06       	cpc	r1, r20
    1622:	55 1f       	adc	r21, r21
    1624:	f2 cf       	rjmp	.-28     	; 0x160a <__fp_split3+0xe>
    1626:	46 95       	lsr	r20
    1628:	f1 df       	rcall	.-30     	; 0x160c <__fp_splitA>
    162a:	08 c0       	rjmp	.+16     	; 0x163c <__fp_splitA+0x30>
    162c:	16 16       	cp	r1, r22
    162e:	17 06       	cpc	r1, r23
    1630:	18 06       	cpc	r1, r24
    1632:	99 1f       	adc	r25, r25
    1634:	f1 cf       	rjmp	.-30     	; 0x1618 <__fp_splitA+0xc>
    1636:	86 95       	lsr	r24
    1638:	71 05       	cpc	r23, r1
    163a:	61 05       	cpc	r22, r1
    163c:	08 94       	sec
    163e:	08 95       	ret

00001640 <__fp_zero>:
    1640:	e8 94       	clt

00001642 <__fp_szero>:
    1642:	bb 27       	eor	r27, r27
    1644:	66 27       	eor	r22, r22
    1646:	77 27       	eor	r23, r23
    1648:	cb 01       	movw	r24, r22
    164a:	97 f9       	bld	r25, 7
    164c:	08 95       	ret

0000164e <__gesf2>:
    164e:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__fp_cmp>
    1652:	08 f4       	brcc	.+2      	; 0x1656 <__gesf2+0x8>
    1654:	8f ef       	ldi	r24, 0xFF	; 255
    1656:	08 95       	ret

00001658 <__mulsf3>:
    1658:	0e 94 3f 0b 	call	0x167e	; 0x167e <__mulsf3x>
    165c:	0c 94 b0 0b 	jmp	0x1760	; 0x1760 <__fp_round>
    1660:	0e 94 a2 0b 	call	0x1744	; 0x1744 <__fp_pscA>
    1664:	38 f0       	brcs	.+14     	; 0x1674 <__mulsf3+0x1c>
    1666:	0e 94 a9 0b 	call	0x1752	; 0x1752 <__fp_pscB>
    166a:	20 f0       	brcs	.+8      	; 0x1674 <__mulsf3+0x1c>
    166c:	95 23       	and	r25, r21
    166e:	11 f0       	breq	.+4      	; 0x1674 <__mulsf3+0x1c>
    1670:	0c 94 99 0b 	jmp	0x1732	; 0x1732 <__fp_inf>
    1674:	0c 94 9f 0b 	jmp	0x173e	; 0x173e <__fp_nan>
    1678:	11 24       	eor	r1, r1
    167a:	0c 94 21 0b 	jmp	0x1642	; 0x1642 <__fp_szero>

0000167e <__mulsf3x>:
    167e:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <__fp_split3>
    1682:	70 f3       	brcs	.-36     	; 0x1660 <__mulsf3+0x8>

00001684 <__mulsf3_pse>:
    1684:	95 9f       	mul	r25, r21
    1686:	c1 f3       	breq	.-16     	; 0x1678 <__mulsf3+0x20>
    1688:	95 0f       	add	r25, r21
    168a:	50 e0       	ldi	r21, 0x00	; 0
    168c:	55 1f       	adc	r21, r21
    168e:	62 9f       	mul	r22, r18
    1690:	f0 01       	movw	r30, r0
    1692:	72 9f       	mul	r23, r18
    1694:	bb 27       	eor	r27, r27
    1696:	f0 0d       	add	r31, r0
    1698:	b1 1d       	adc	r27, r1
    169a:	63 9f       	mul	r22, r19
    169c:	aa 27       	eor	r26, r26
    169e:	f0 0d       	add	r31, r0
    16a0:	b1 1d       	adc	r27, r1
    16a2:	aa 1f       	adc	r26, r26
    16a4:	64 9f       	mul	r22, r20
    16a6:	66 27       	eor	r22, r22
    16a8:	b0 0d       	add	r27, r0
    16aa:	a1 1d       	adc	r26, r1
    16ac:	66 1f       	adc	r22, r22
    16ae:	82 9f       	mul	r24, r18
    16b0:	22 27       	eor	r18, r18
    16b2:	b0 0d       	add	r27, r0
    16b4:	a1 1d       	adc	r26, r1
    16b6:	62 1f       	adc	r22, r18
    16b8:	73 9f       	mul	r23, r19
    16ba:	b0 0d       	add	r27, r0
    16bc:	a1 1d       	adc	r26, r1
    16be:	62 1f       	adc	r22, r18
    16c0:	83 9f       	mul	r24, r19
    16c2:	a0 0d       	add	r26, r0
    16c4:	61 1d       	adc	r22, r1
    16c6:	22 1f       	adc	r18, r18
    16c8:	74 9f       	mul	r23, r20
    16ca:	33 27       	eor	r19, r19
    16cc:	a0 0d       	add	r26, r0
    16ce:	61 1d       	adc	r22, r1
    16d0:	23 1f       	adc	r18, r19
    16d2:	84 9f       	mul	r24, r20
    16d4:	60 0d       	add	r22, r0
    16d6:	21 1d       	adc	r18, r1
    16d8:	82 2f       	mov	r24, r18
    16da:	76 2f       	mov	r23, r22
    16dc:	6a 2f       	mov	r22, r26
    16de:	11 24       	eor	r1, r1
    16e0:	9f 57       	subi	r25, 0x7F	; 127
    16e2:	50 40       	sbci	r21, 0x00	; 0
    16e4:	9a f0       	brmi	.+38     	; 0x170c <__mulsf3_pse+0x88>
    16e6:	f1 f0       	breq	.+60     	; 0x1724 <__mulsf3_pse+0xa0>
    16e8:	88 23       	and	r24, r24
    16ea:	4a f0       	brmi	.+18     	; 0x16fe <__mulsf3_pse+0x7a>
    16ec:	ee 0f       	add	r30, r30
    16ee:	ff 1f       	adc	r31, r31
    16f0:	bb 1f       	adc	r27, r27
    16f2:	66 1f       	adc	r22, r22
    16f4:	77 1f       	adc	r23, r23
    16f6:	88 1f       	adc	r24, r24
    16f8:	91 50       	subi	r25, 0x01	; 1
    16fa:	50 40       	sbci	r21, 0x00	; 0
    16fc:	a9 f7       	brne	.-22     	; 0x16e8 <__mulsf3_pse+0x64>
    16fe:	9e 3f       	cpi	r25, 0xFE	; 254
    1700:	51 05       	cpc	r21, r1
    1702:	80 f0       	brcs	.+32     	; 0x1724 <__mulsf3_pse+0xa0>
    1704:	0c 94 99 0b 	jmp	0x1732	; 0x1732 <__fp_inf>
    1708:	0c 94 21 0b 	jmp	0x1642	; 0x1642 <__fp_szero>
    170c:	5f 3f       	cpi	r21, 0xFF	; 255
    170e:	e4 f3       	brlt	.-8      	; 0x1708 <__mulsf3_pse+0x84>
    1710:	98 3e       	cpi	r25, 0xE8	; 232
    1712:	d4 f3       	brlt	.-12     	; 0x1708 <__mulsf3_pse+0x84>
    1714:	86 95       	lsr	r24
    1716:	77 95       	ror	r23
    1718:	67 95       	ror	r22
    171a:	b7 95       	ror	r27
    171c:	f7 95       	ror	r31
    171e:	e7 95       	ror	r30
    1720:	9f 5f       	subi	r25, 0xFF	; 255
    1722:	c1 f7       	brne	.-16     	; 0x1714 <__mulsf3_pse+0x90>
    1724:	fe 2b       	or	r31, r30
    1726:	88 0f       	add	r24, r24
    1728:	91 1d       	adc	r25, r1
    172a:	96 95       	lsr	r25
    172c:	87 95       	ror	r24
    172e:	97 f9       	bld	r25, 7
    1730:	08 95       	ret

00001732 <__fp_inf>:
    1732:	97 f9       	bld	r25, 7
    1734:	9f 67       	ori	r25, 0x7F	; 127
    1736:	80 e8       	ldi	r24, 0x80	; 128
    1738:	70 e0       	ldi	r23, 0x00	; 0
    173a:	60 e0       	ldi	r22, 0x00	; 0
    173c:	08 95       	ret

0000173e <__fp_nan>:
    173e:	9f ef       	ldi	r25, 0xFF	; 255
    1740:	80 ec       	ldi	r24, 0xC0	; 192
    1742:	08 95       	ret

00001744 <__fp_pscA>:
    1744:	00 24       	eor	r0, r0
    1746:	0a 94       	dec	r0
    1748:	16 16       	cp	r1, r22
    174a:	17 06       	cpc	r1, r23
    174c:	18 06       	cpc	r1, r24
    174e:	09 06       	cpc	r0, r25
    1750:	08 95       	ret

00001752 <__fp_pscB>:
    1752:	00 24       	eor	r0, r0
    1754:	0a 94       	dec	r0
    1756:	12 16       	cp	r1, r18
    1758:	13 06       	cpc	r1, r19
    175a:	14 06       	cpc	r1, r20
    175c:	05 06       	cpc	r0, r21
    175e:	08 95       	ret

00001760 <__fp_round>:
    1760:	09 2e       	mov	r0, r25
    1762:	03 94       	inc	r0
    1764:	00 0c       	add	r0, r0
    1766:	11 f4       	brne	.+4      	; 0x176c <__fp_round+0xc>
    1768:	88 23       	and	r24, r24
    176a:	52 f0       	brmi	.+20     	; 0x1780 <__fp_round+0x20>
    176c:	bb 0f       	add	r27, r27
    176e:	40 f4       	brcc	.+16     	; 0x1780 <__fp_round+0x20>
    1770:	bf 2b       	or	r27, r31
    1772:	11 f4       	brne	.+4      	; 0x1778 <__fp_round+0x18>
    1774:	60 ff       	sbrs	r22, 0
    1776:	04 c0       	rjmp	.+8      	; 0x1780 <__fp_round+0x20>
    1778:	6f 5f       	subi	r22, 0xFF	; 255
    177a:	7f 4f       	sbci	r23, 0xFF	; 255
    177c:	8f 4f       	sbci	r24, 0xFF	; 255
    177e:	9f 4f       	sbci	r25, 0xFF	; 255
    1780:	08 95       	ret

00001782 <_exit>:
    1782:	f8 94       	cli

00001784 <__stop_program>:
    1784:	ff cf       	rjmp	.-2      	; 0x1784 <__stop_program>
