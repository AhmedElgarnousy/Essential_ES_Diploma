
Hamoksha_Video.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009e  00800060  000029ae  00002a22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002988  00000000  00000000  00002ac0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001119  00000000  00000000  00005448  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00006561  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00006574  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000040  00000000  00000000  000065b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000532  00000000  00000000  000065f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004cb  00000000  00000000  00006b22  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000115  00000000  00000000  00006fed  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001f4  00000000  00000000  00007102  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ea       	ldi	r30, 0xAE	; 174
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 3f       	cpi	r26, 0xFE	; 254
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
      76:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <main>
      7a:	0c 94 d5 14 	jmp	0x29aa	; 0x29aa <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <CLCD_voidSendCommand>:
#include"CLCD_interface.h"
#include"CLCD_private.h"


void CLCD_voidSendCommand(u8 Copy_u8Command)
{
      82:	cf 93       	push	r28
      84:	df 93       	push	r29
      86:	cd b7       	in	r28, 0x3d	; 61
      88:	de b7       	in	r29, 0x3e	; 62
      8a:	a3 97       	sbiw	r28, 0x23	; 35
      8c:	0f b6       	in	r0, 0x3f	; 63
      8e:	f8 94       	cli
      90:	de bf       	out	0x3e, r29	; 62
      92:	0f be       	out	0x3f, r0	; 63
      94:	cd bf       	out	0x3d, r28	; 61
      96:	8f 87       	std	Y+15, r24	; 0x0f

#if CLCD_Mode == Eight_Bit_Mode

		/*set RS pin to LOW for command*/
		DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
      98:	40 e0       	ldi	r20, 0x00	; 0
      9a:	60 e0       	ldi	r22, 0x00	; 0
      9c:	83 e0       	ldi	r24, 0x03	; 3
      9e:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <DIO_u8SetPinValue>

		/*set RW pin to Low for write*/
		DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	61 e0       	ldi	r22, 0x01	; 1
      a6:	83 e0       	ldi	r24, 0x03	; 3
      a8:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <DIO_u8SetPinValue>

		/*set command  to Data pins*/
		DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Command);
      ac:	6f 85       	ldd	r22, Y+15	; 0x0f
      ae:	80 e0       	ldi	r24, 0x00	; 0
      b0:	0e 94 04 04 	call	0x808	; 0x808 <DIO_u8SetPortValue>

		/*set E pin to HIGH for Enable*/
		DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
      b4:	41 e0       	ldi	r20, 0x01	; 1
      b6:	62 e0       	ldi	r22, 0x02	; 2
      b8:	83 e0       	ldi	r24, 0x03	; 3
      ba:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <DIO_u8SetPinValue>
      be:	80 e0       	ldi	r24, 0x00	; 0
      c0:	90 e0       	ldi	r25, 0x00	; 0
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b0 e4       	ldi	r27, 0x40	; 64
      c6:	89 83       	std	Y+1, r24	; 0x01
      c8:	9a 83       	std	Y+2, r25	; 0x02
      ca:	ab 83       	std	Y+3, r26	; 0x03
      cc:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
      ce:	20 e0       	ldi	r18, 0x00	; 0
      d0:	30 e0       	ldi	r19, 0x00	; 0
      d2:	4a ef       	ldi	r20, 0xFA	; 250
      d4:	54 e4       	ldi	r21, 0x44	; 68
      d6:	69 81       	ldd	r22, Y+1	; 0x01
      d8:	7a 81       	ldd	r23, Y+2	; 0x02
      da:	8b 81       	ldd	r24, Y+3	; 0x03
      dc:	9c 81       	ldd	r25, Y+4	; 0x04
      de:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
      e2:	6c 8b       	std	Y+20, r22	; 0x14
      e4:	7d 8b       	std	Y+21, r23	; 0x15
      e6:	8e 8b       	std	Y+22, r24	; 0x16
      e8:	9f 8b       	std	Y+23, r25	; 0x17
      ea:	8c 89       	ldd	r24, Y+20	; 0x14
      ec:	9d 89       	ldd	r25, Y+21	; 0x15
      ee:	ae 89       	ldd	r26, Y+22	; 0x16
      f0:	bf 89       	ldd	r27, Y+23	; 0x17
      f2:	8d 83       	std	Y+5, r24	; 0x05
      f4:	9e 83       	std	Y+6, r25	; 0x06
      f6:	af 83       	std	Y+7, r26	; 0x07
      f8:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
      fa:	20 e0       	ldi	r18, 0x00	; 0
      fc:	30 e0       	ldi	r19, 0x00	; 0
      fe:	40 e8       	ldi	r20, 0x80	; 128
     100:	5f e3       	ldi	r21, 0x3F	; 63
     102:	6d 81       	ldd	r22, Y+5	; 0x05
     104:	7e 81       	ldd	r23, Y+6	; 0x06
     106:	8f 81       	ldd	r24, Y+7	; 0x07
     108:	98 85       	ldd	r25, Y+8	; 0x08
     10a:	0e 94 ba 13 	call	0x2774	; 0x2774 <__cmpsf2>
     10e:	88 23       	and	r24, r24
     110:	2c f4       	brge	.+10     	; 0x11c <CLCD_voidSendCommand+0x9a>
		__ticks = 1;
     112:	81 e0       	ldi	r24, 0x01	; 1
     114:	90 e0       	ldi	r25, 0x00	; 0
     116:	9a 87       	std	Y+10, r25	; 0x0a
     118:	89 87       	std	Y+9, r24	; 0x09
     11a:	54 c0       	rjmp	.+168    	; 0x1c4 <CLCD_voidSendCommand+0x142>
	else if (__tmp > 65535)
     11c:	20 e0       	ldi	r18, 0x00	; 0
     11e:	3f ef       	ldi	r19, 0xFF	; 255
     120:	4f e7       	ldi	r20, 0x7F	; 127
     122:	57 e4       	ldi	r21, 0x47	; 71
     124:	6d 81       	ldd	r22, Y+5	; 0x05
     126:	7e 81       	ldd	r23, Y+6	; 0x06
     128:	8f 81       	ldd	r24, Y+7	; 0x07
     12a:	98 85       	ldd	r25, Y+8	; 0x08
     12c:	0e 94 3b 14 	call	0x2876	; 0x2876 <__gesf2>
     130:	18 16       	cp	r1, r24
     132:	d4 f5       	brge	.+116    	; 0x1a8 <CLCD_voidSendCommand+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     134:	20 e0       	ldi	r18, 0x00	; 0
     136:	30 e0       	ldi	r19, 0x00	; 0
     138:	40 e2       	ldi	r20, 0x20	; 32
     13a:	51 e4       	ldi	r21, 0x41	; 65
     13c:	69 81       	ldd	r22, Y+1	; 0x01
     13e:	7a 81       	ldd	r23, Y+2	; 0x02
     140:	8b 81       	ldd	r24, Y+3	; 0x03
     142:	9c 81       	ldd	r25, Y+4	; 0x04
     144:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
     148:	68 8f       	std	Y+24, r22	; 0x18
     14a:	79 8f       	std	Y+25, r23	; 0x19
     14c:	8a 8f       	std	Y+26, r24	; 0x1a
     14e:	9b 8f       	std	Y+27, r25	; 0x1b
     150:	88 8d       	ldd	r24, Y+24	; 0x18
     152:	99 8d       	ldd	r25, Y+25	; 0x19
     154:	aa 8d       	ldd	r26, Y+26	; 0x1a
     156:	bb 8d       	ldd	r27, Y+27	; 0x1b
     158:	88 8b       	std	Y+16, r24	; 0x10
     15a:	99 8b       	std	Y+17, r25	; 0x11
     15c:	aa 8b       	std	Y+18, r26	; 0x12
     15e:	bb 8b       	std	Y+19, r27	; 0x13
     160:	68 89       	ldd	r22, Y+16	; 0x10
     162:	79 89       	ldd	r23, Y+17	; 0x11
     164:	8a 89       	ldd	r24, Y+18	; 0x12
     166:	9b 89       	ldd	r25, Y+19	; 0x13
     168:	0e 94 bf 13 	call	0x277e	; 0x277e <__fixunssfsi>
     16c:	6c 8f       	std	Y+28, r22	; 0x1c
     16e:	7d 8f       	std	Y+29, r23	; 0x1d
     170:	8e 8f       	std	Y+30, r24	; 0x1e
     172:	9f 8f       	std	Y+31, r25	; 0x1f
     174:	ac 8d       	ldd	r26, Y+28	; 0x1c
     176:	bd 8d       	ldd	r27, Y+29	; 0x1d
     178:	ba 87       	std	Y+10, r27	; 0x0a
     17a:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
     17c:	10 c0       	rjmp	.+32     	; 0x19e <CLCD_voidSendCommand+0x11c>
     17e:	88 ec       	ldi	r24, 0xC8	; 200
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	9c 87       	std	Y+12, r25	; 0x0c
     184:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     186:	8b 85       	ldd	r24, Y+11	; 0x0b
     188:	9c 85       	ldd	r25, Y+12	; 0x0c
     18a:	01 97       	sbiw	r24, 0x01	; 1
     18c:	f1 f7       	brne	.-4      	; 0x18a <CLCD_voidSendCommand+0x108>
     18e:	9c 87       	std	Y+12, r25	; 0x0c
     190:	8b 87       	std	Y+11, r24	; 0x0b
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
     192:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     194:	89 85       	ldd	r24, Y+9	; 0x09
     196:	9a 85       	ldd	r25, Y+10	; 0x0a
     198:	01 97       	sbiw	r24, 0x01	; 1
     19a:	9a 87       	std	Y+10, r25	; 0x0a
     19c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     19e:	89 85       	ldd	r24, Y+9	; 0x09
     1a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     1a2:	89 2b       	or	r24, r25
     1a4:	61 f7       	brne	.-40     	; 0x17e <CLCD_voidSendCommand+0xfc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
     1a6:	19 c0       	rjmp	.+50     	; 0x1da <CLCD_voidSendCommand+0x158>
	}
	else
		__ticks = (uint16_t)__tmp;
     1a8:	6d 81       	ldd	r22, Y+5	; 0x05
     1aa:	7e 81       	ldd	r23, Y+6	; 0x06
     1ac:	8f 81       	ldd	r24, Y+7	; 0x07
     1ae:	98 85       	ldd	r25, Y+8	; 0x08
     1b0:	0e 94 bf 13 	call	0x277e	; 0x277e <__fixunssfsi>
     1b4:	68 a3       	std	Y+32, r22	; 0x20
     1b6:	79 a3       	std	Y+33, r23	; 0x21
     1b8:	8a a3       	std	Y+34, r24	; 0x22
     1ba:	9b a3       	std	Y+35, r25	; 0x23
     1bc:	88 a1       	ldd	r24, Y+32	; 0x20
     1be:	99 a1       	ldd	r25, Y+33	; 0x21
     1c0:	9a 87       	std	Y+10, r25	; 0x0a
     1c2:	89 87       	std	Y+9, r24	; 0x09
     1c4:	89 85       	ldd	r24, Y+9	; 0x09
     1c6:	9a 85       	ldd	r25, Y+10	; 0x0a
     1c8:	9e 87       	std	Y+14, r25	; 0x0e
     1ca:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1cc:	8d 85       	ldd	r24, Y+13	; 0x0d
     1ce:	9e 85       	ldd	r25, Y+14	; 0x0e
     1d0:	01 97       	sbiw	r24, 0x01	; 1
     1d2:	f1 f7       	brne	.-4      	; 0x1d0 <CLCD_voidSendCommand+0x14e>
     1d4:	9e 87       	std	Y+14, r25	; 0x0e
     1d6:	8d 87       	std	Y+13, r24	; 0x0d
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
     1d8:	00 00       	nop
		_delay_ms(2);
		DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     1da:	40 e0       	ldi	r20, 0x00	; 0
     1dc:	62 e0       	ldi	r22, 0x02	; 2
     1de:	83 e0       	ldi	r24, 0x03	; 3
     1e0:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <DIO_u8SetPinValue>
				DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);

#else
#error "Wrong CLCD Mode Configurations"
#endif
}
     1e4:	00 00       	nop
     1e6:	a3 96       	adiw	r28, 0x23	; 35
     1e8:	0f b6       	in	r0, 0x3f	; 63
     1ea:	f8 94       	cli
     1ec:	de bf       	out	0x3e, r29	; 62
     1ee:	0f be       	out	0x3f, r0	; 63
     1f0:	cd bf       	out	0x3d, r28	; 61
     1f2:	df 91       	pop	r29
     1f4:	cf 91       	pop	r28
     1f6:	08 95       	ret

000001f8 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
     1f8:	cf 93       	push	r28
     1fa:	df 93       	push	r29
     1fc:	cd b7       	in	r28, 0x3d	; 61
     1fe:	de b7       	in	r29, 0x3e	; 62
     200:	a3 97       	sbiw	r28, 0x23	; 35
     202:	0f b6       	in	r0, 0x3f	; 63
     204:	f8 94       	cli
     206:	de bf       	out	0x3e, r29	; 62
     208:	0f be       	out	0x3f, r0	; 63
     20a:	cd bf       	out	0x3d, r28	; 61
     20c:	8f 87       	std	Y+15, r24	; 0x0f

#if CLCD_Mode==Eight_Bit_Mode

	/*set RS pin to LOW for Data*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
     20e:	41 e0       	ldi	r20, 0x01	; 1
     210:	60 e0       	ldi	r22, 0x00	; 0
     212:	83 e0       	ldi	r24, 0x03	; 3
     214:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <DIO_u8SetPinValue>

	/*set RW pin to HIGH for write*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     218:	40 e0       	ldi	r20, 0x00	; 0
     21a:	61 e0       	ldi	r22, 0x01	; 1
     21c:	83 e0       	ldi	r24, 0x03	; 3
     21e:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <DIO_u8SetPinValue>

	/*set data  to Data pins*/
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Data);
     222:	6f 85       	ldd	r22, Y+15	; 0x0f
     224:	80 e0       	ldi	r24, 0x00	; 0
     226:	0e 94 04 04 	call	0x808	; 0x808 <DIO_u8SetPortValue>

	/*Send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     22a:	41 e0       	ldi	r20, 0x01	; 1
     22c:	62 e0       	ldi	r22, 0x02	; 2
     22e:	83 e0       	ldi	r24, 0x03	; 3
     230:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <DIO_u8SetPinValue>
     234:	80 e0       	ldi	r24, 0x00	; 0
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	a0 e0       	ldi	r26, 0x00	; 0
     23a:	b0 e4       	ldi	r27, 0x40	; 64
     23c:	89 83       	std	Y+1, r24	; 0x01
     23e:	9a 83       	std	Y+2, r25	; 0x02
     240:	ab 83       	std	Y+3, r26	; 0x03
     242:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     244:	20 e0       	ldi	r18, 0x00	; 0
     246:	30 e0       	ldi	r19, 0x00	; 0
     248:	4a ef       	ldi	r20, 0xFA	; 250
     24a:	54 e4       	ldi	r21, 0x44	; 68
     24c:	69 81       	ldd	r22, Y+1	; 0x01
     24e:	7a 81       	ldd	r23, Y+2	; 0x02
     250:	8b 81       	ldd	r24, Y+3	; 0x03
     252:	9c 81       	ldd	r25, Y+4	; 0x04
     254:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
     258:	6c 8b       	std	Y+20, r22	; 0x14
     25a:	7d 8b       	std	Y+21, r23	; 0x15
     25c:	8e 8b       	std	Y+22, r24	; 0x16
     25e:	9f 8b       	std	Y+23, r25	; 0x17
     260:	8c 89       	ldd	r24, Y+20	; 0x14
     262:	9d 89       	ldd	r25, Y+21	; 0x15
     264:	ae 89       	ldd	r26, Y+22	; 0x16
     266:	bf 89       	ldd	r27, Y+23	; 0x17
     268:	8d 83       	std	Y+5, r24	; 0x05
     26a:	9e 83       	std	Y+6, r25	; 0x06
     26c:	af 83       	std	Y+7, r26	; 0x07
     26e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     270:	20 e0       	ldi	r18, 0x00	; 0
     272:	30 e0       	ldi	r19, 0x00	; 0
     274:	40 e8       	ldi	r20, 0x80	; 128
     276:	5f e3       	ldi	r21, 0x3F	; 63
     278:	6d 81       	ldd	r22, Y+5	; 0x05
     27a:	7e 81       	ldd	r23, Y+6	; 0x06
     27c:	8f 81       	ldd	r24, Y+7	; 0x07
     27e:	98 85       	ldd	r25, Y+8	; 0x08
     280:	0e 94 ba 13 	call	0x2774	; 0x2774 <__cmpsf2>
     284:	88 23       	and	r24, r24
     286:	2c f4       	brge	.+10     	; 0x292 <CLCD_voidSendData+0x9a>
		__ticks = 1;
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	9a 87       	std	Y+10, r25	; 0x0a
     28e:	89 87       	std	Y+9, r24	; 0x09
     290:	54 c0       	rjmp	.+168    	; 0x33a <CLCD_voidSendData+0x142>
	else if (__tmp > 65535)
     292:	20 e0       	ldi	r18, 0x00	; 0
     294:	3f ef       	ldi	r19, 0xFF	; 255
     296:	4f e7       	ldi	r20, 0x7F	; 127
     298:	57 e4       	ldi	r21, 0x47	; 71
     29a:	6d 81       	ldd	r22, Y+5	; 0x05
     29c:	7e 81       	ldd	r23, Y+6	; 0x06
     29e:	8f 81       	ldd	r24, Y+7	; 0x07
     2a0:	98 85       	ldd	r25, Y+8	; 0x08
     2a2:	0e 94 3b 14 	call	0x2876	; 0x2876 <__gesf2>
     2a6:	18 16       	cp	r1, r24
     2a8:	d4 f5       	brge	.+116    	; 0x31e <CLCD_voidSendData+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     2aa:	20 e0       	ldi	r18, 0x00	; 0
     2ac:	30 e0       	ldi	r19, 0x00	; 0
     2ae:	40 e2       	ldi	r20, 0x20	; 32
     2b0:	51 e4       	ldi	r21, 0x41	; 65
     2b2:	69 81       	ldd	r22, Y+1	; 0x01
     2b4:	7a 81       	ldd	r23, Y+2	; 0x02
     2b6:	8b 81       	ldd	r24, Y+3	; 0x03
     2b8:	9c 81       	ldd	r25, Y+4	; 0x04
     2ba:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
     2be:	68 8f       	std	Y+24, r22	; 0x18
     2c0:	79 8f       	std	Y+25, r23	; 0x19
     2c2:	8a 8f       	std	Y+26, r24	; 0x1a
     2c4:	9b 8f       	std	Y+27, r25	; 0x1b
     2c6:	88 8d       	ldd	r24, Y+24	; 0x18
     2c8:	99 8d       	ldd	r25, Y+25	; 0x19
     2ca:	aa 8d       	ldd	r26, Y+26	; 0x1a
     2cc:	bb 8d       	ldd	r27, Y+27	; 0x1b
     2ce:	88 8b       	std	Y+16, r24	; 0x10
     2d0:	99 8b       	std	Y+17, r25	; 0x11
     2d2:	aa 8b       	std	Y+18, r26	; 0x12
     2d4:	bb 8b       	std	Y+19, r27	; 0x13
     2d6:	68 89       	ldd	r22, Y+16	; 0x10
     2d8:	79 89       	ldd	r23, Y+17	; 0x11
     2da:	8a 89       	ldd	r24, Y+18	; 0x12
     2dc:	9b 89       	ldd	r25, Y+19	; 0x13
     2de:	0e 94 bf 13 	call	0x277e	; 0x277e <__fixunssfsi>
     2e2:	6c 8f       	std	Y+28, r22	; 0x1c
     2e4:	7d 8f       	std	Y+29, r23	; 0x1d
     2e6:	8e 8f       	std	Y+30, r24	; 0x1e
     2e8:	9f 8f       	std	Y+31, r25	; 0x1f
     2ea:	ac 8d       	ldd	r26, Y+28	; 0x1c
     2ec:	bd 8d       	ldd	r27, Y+29	; 0x1d
     2ee:	ba 87       	std	Y+10, r27	; 0x0a
     2f0:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
     2f2:	10 c0       	rjmp	.+32     	; 0x314 <CLCD_voidSendData+0x11c>
     2f4:	88 ec       	ldi	r24, 0xC8	; 200
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	9c 87       	std	Y+12, r25	; 0x0c
     2fa:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2fc:	8b 85       	ldd	r24, Y+11	; 0x0b
     2fe:	9c 85       	ldd	r25, Y+12	; 0x0c
     300:	01 97       	sbiw	r24, 0x01	; 1
     302:	f1 f7       	brne	.-4      	; 0x300 <CLCD_voidSendData+0x108>
     304:	9c 87       	std	Y+12, r25	; 0x0c
     306:	8b 87       	std	Y+11, r24	; 0x0b
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
     308:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     30a:	89 85       	ldd	r24, Y+9	; 0x09
     30c:	9a 85       	ldd	r25, Y+10	; 0x0a
     30e:	01 97       	sbiw	r24, 0x01	; 1
     310:	9a 87       	std	Y+10, r25	; 0x0a
     312:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     314:	89 85       	ldd	r24, Y+9	; 0x09
     316:	9a 85       	ldd	r25, Y+10	; 0x0a
     318:	89 2b       	or	r24, r25
     31a:	61 f7       	brne	.-40     	; 0x2f4 <CLCD_voidSendData+0xfc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
     31c:	19 c0       	rjmp	.+50     	; 0x350 <CLCD_voidSendData+0x158>
	}
	else
		__ticks = (uint16_t)__tmp;
     31e:	6d 81       	ldd	r22, Y+5	; 0x05
     320:	7e 81       	ldd	r23, Y+6	; 0x06
     322:	8f 81       	ldd	r24, Y+7	; 0x07
     324:	98 85       	ldd	r25, Y+8	; 0x08
     326:	0e 94 bf 13 	call	0x277e	; 0x277e <__fixunssfsi>
     32a:	68 a3       	std	Y+32, r22	; 0x20
     32c:	79 a3       	std	Y+33, r23	; 0x21
     32e:	8a a3       	std	Y+34, r24	; 0x22
     330:	9b a3       	std	Y+35, r25	; 0x23
     332:	88 a1       	ldd	r24, Y+32	; 0x20
     334:	99 a1       	ldd	r25, Y+33	; 0x21
     336:	9a 87       	std	Y+10, r25	; 0x0a
     338:	89 87       	std	Y+9, r24	; 0x09
     33a:	89 85       	ldd	r24, Y+9	; 0x09
     33c:	9a 85       	ldd	r25, Y+10	; 0x0a
     33e:	9e 87       	std	Y+14, r25	; 0x0e
     340:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     342:	8d 85       	ldd	r24, Y+13	; 0x0d
     344:	9e 85       	ldd	r25, Y+14	; 0x0e
     346:	01 97       	sbiw	r24, 0x01	; 1
     348:	f1 f7       	brne	.-4      	; 0x346 <CLCD_voidSendData+0x14e>
     34a:	9e 87       	std	Y+14, r25	; 0x0e
     34c:	8d 87       	std	Y+13, r24	; 0x0d
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
     34e:	00 00       	nop
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     350:	40 e0       	ldi	r20, 0x00	; 0
     352:	62 e0       	ldi	r22, 0x02	; 2
     354:	83 e0       	ldi	r24, 0x03	; 3
     356:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <DIO_u8SetPinValue>
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);

#endif

}
     35a:	00 00       	nop
     35c:	a3 96       	adiw	r28, 0x23	; 35
     35e:	0f b6       	in	r0, 0x3f	; 63
     360:	f8 94       	cli
     362:	de bf       	out	0x3e, r29	; 62
     364:	0f be       	out	0x3f, r0	; 63
     366:	cd bf       	out	0x3d, r28	; 61
     368:	df 91       	pop	r29
     36a:	cf 91       	pop	r28
     36c:	08 95       	ret

0000036e <CLCD_voidInit>:
void CLCD_voidInit(void)
{
     36e:	cf 93       	push	r28
     370:	df 93       	push	r29
     372:	cd b7       	in	r28, 0x3d	; 61
     374:	de b7       	in	r29, 0x3e	; 62
     376:	a2 97       	sbiw	r28, 0x22	; 34
     378:	0f b6       	in	r0, 0x3f	; 63
     37a:	f8 94       	cli
     37c:	de bf       	out	0x3e, r29	; 62
     37e:	0f be       	out	0x3f, r0	; 63
     380:	cd bf       	out	0x3d, r28	; 61
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	a0 e2       	ldi	r26, 0x20	; 32
     388:	b2 e4       	ldi	r27, 0x42	; 66
     38a:	89 83       	std	Y+1, r24	; 0x01
     38c:	9a 83       	std	Y+2, r25	; 0x02
     38e:	ab 83       	std	Y+3, r26	; 0x03
     390:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     392:	20 e0       	ldi	r18, 0x00	; 0
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	4a ef       	ldi	r20, 0xFA	; 250
     398:	54 e4       	ldi	r21, 0x44	; 68
     39a:	69 81       	ldd	r22, Y+1	; 0x01
     39c:	7a 81       	ldd	r23, Y+2	; 0x02
     39e:	8b 81       	ldd	r24, Y+3	; 0x03
     3a0:	9c 81       	ldd	r25, Y+4	; 0x04
     3a2:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
     3a6:	6b 8b       	std	Y+19, r22	; 0x13
     3a8:	7c 8b       	std	Y+20, r23	; 0x14
     3aa:	8d 8b       	std	Y+21, r24	; 0x15
     3ac:	9e 8b       	std	Y+22, r25	; 0x16
     3ae:	8b 89       	ldd	r24, Y+19	; 0x13
     3b0:	9c 89       	ldd	r25, Y+20	; 0x14
     3b2:	ad 89       	ldd	r26, Y+21	; 0x15
     3b4:	be 89       	ldd	r27, Y+22	; 0x16
     3b6:	8d 83       	std	Y+5, r24	; 0x05
     3b8:	9e 83       	std	Y+6, r25	; 0x06
     3ba:	af 83       	std	Y+7, r26	; 0x07
     3bc:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     3be:	20 e0       	ldi	r18, 0x00	; 0
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	40 e8       	ldi	r20, 0x80	; 128
     3c4:	5f e3       	ldi	r21, 0x3F	; 63
     3c6:	6d 81       	ldd	r22, Y+5	; 0x05
     3c8:	7e 81       	ldd	r23, Y+6	; 0x06
     3ca:	8f 81       	ldd	r24, Y+7	; 0x07
     3cc:	98 85       	ldd	r25, Y+8	; 0x08
     3ce:	0e 94 ba 13 	call	0x2774	; 0x2774 <__cmpsf2>
     3d2:	88 23       	and	r24, r24
     3d4:	2c f4       	brge	.+10     	; 0x3e0 <CLCD_voidInit+0x72>
		__ticks = 1;
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	9a 87       	std	Y+10, r25	; 0x0a
     3dc:	89 87       	std	Y+9, r24	; 0x09
     3de:	54 c0       	rjmp	.+168    	; 0x488 <__FUSE_REGION_LENGTH__+0x88>
	else if (__tmp > 65535)
     3e0:	20 e0       	ldi	r18, 0x00	; 0
     3e2:	3f ef       	ldi	r19, 0xFF	; 255
     3e4:	4f e7       	ldi	r20, 0x7F	; 127
     3e6:	57 e4       	ldi	r21, 0x47	; 71
     3e8:	6d 81       	ldd	r22, Y+5	; 0x05
     3ea:	7e 81       	ldd	r23, Y+6	; 0x06
     3ec:	8f 81       	ldd	r24, Y+7	; 0x07
     3ee:	98 85       	ldd	r25, Y+8	; 0x08
     3f0:	0e 94 3b 14 	call	0x2876	; 0x2876 <__gesf2>
     3f4:	18 16       	cp	r1, r24
     3f6:	d4 f5       	brge	.+116    	; 0x46c <__FUSE_REGION_LENGTH__+0x6c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3f8:	20 e0       	ldi	r18, 0x00	; 0
     3fa:	30 e0       	ldi	r19, 0x00	; 0
     3fc:	40 e2       	ldi	r20, 0x20	; 32
     3fe:	51 e4       	ldi	r21, 0x41	; 65
     400:	69 81       	ldd	r22, Y+1	; 0x01
     402:	7a 81       	ldd	r23, Y+2	; 0x02
     404:	8b 81       	ldd	r24, Y+3	; 0x03
     406:	9c 81       	ldd	r25, Y+4	; 0x04
     408:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
     40c:	6f 8b       	std	Y+23, r22	; 0x17
     40e:	78 8f       	std	Y+24, r23	; 0x18
     410:	89 8f       	std	Y+25, r24	; 0x19
     412:	9a 8f       	std	Y+26, r25	; 0x1a
     414:	8f 89       	ldd	r24, Y+23	; 0x17
     416:	98 8d       	ldd	r25, Y+24	; 0x18
     418:	a9 8d       	ldd	r26, Y+25	; 0x19
     41a:	ba 8d       	ldd	r27, Y+26	; 0x1a
     41c:	8f 87       	std	Y+15, r24	; 0x0f
     41e:	98 8b       	std	Y+16, r25	; 0x10
     420:	a9 8b       	std	Y+17, r26	; 0x11
     422:	ba 8b       	std	Y+18, r27	; 0x12
     424:	6f 85       	ldd	r22, Y+15	; 0x0f
     426:	78 89       	ldd	r23, Y+16	; 0x10
     428:	89 89       	ldd	r24, Y+17	; 0x11
     42a:	9a 89       	ldd	r25, Y+18	; 0x12
     42c:	0e 94 bf 13 	call	0x277e	; 0x277e <__fixunssfsi>
     430:	6b 8f       	std	Y+27, r22	; 0x1b
     432:	7c 8f       	std	Y+28, r23	; 0x1c
     434:	8d 8f       	std	Y+29, r24	; 0x1d
     436:	9e 8f       	std	Y+30, r25	; 0x1e
     438:	ab 8d       	ldd	r26, Y+27	; 0x1b
     43a:	bc 8d       	ldd	r27, Y+28	; 0x1c
     43c:	ba 87       	std	Y+10, r27	; 0x0a
     43e:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
     440:	10 c0       	rjmp	.+32     	; 0x462 <__FUSE_REGION_LENGTH__+0x62>
     442:	88 ec       	ldi	r24, 0xC8	; 200
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	9c 87       	std	Y+12, r25	; 0x0c
     448:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     44a:	8b 85       	ldd	r24, Y+11	; 0x0b
     44c:	9c 85       	ldd	r25, Y+12	; 0x0c
     44e:	01 97       	sbiw	r24, 0x01	; 1
     450:	f1 f7       	brne	.-4      	; 0x44e <__FUSE_REGION_LENGTH__+0x4e>
     452:	9c 87       	std	Y+12, r25	; 0x0c
     454:	8b 87       	std	Y+11, r24	; 0x0b
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
     456:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     458:	89 85       	ldd	r24, Y+9	; 0x09
     45a:	9a 85       	ldd	r25, Y+10	; 0x0a
     45c:	01 97       	sbiw	r24, 0x01	; 1
     45e:	9a 87       	std	Y+10, r25	; 0x0a
     460:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     462:	89 85       	ldd	r24, Y+9	; 0x09
     464:	9a 85       	ldd	r25, Y+10	; 0x0a
     466:	89 2b       	or	r24, r25
     468:	61 f7       	brne	.-40     	; 0x442 <__FUSE_REGION_LENGTH__+0x42>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
     46a:	19 c0       	rjmp	.+50     	; 0x49e <__FUSE_REGION_LENGTH__+0x9e>
	}
	else
		__ticks = (uint16_t)__tmp;
     46c:	6d 81       	ldd	r22, Y+5	; 0x05
     46e:	7e 81       	ldd	r23, Y+6	; 0x06
     470:	8f 81       	ldd	r24, Y+7	; 0x07
     472:	98 85       	ldd	r25, Y+8	; 0x08
     474:	0e 94 bf 13 	call	0x277e	; 0x277e <__fixunssfsi>
     478:	6f 8f       	std	Y+31, r22	; 0x1f
     47a:	78 a3       	std	Y+32, r23	; 0x20
     47c:	89 a3       	std	Y+33, r24	; 0x21
     47e:	9a a3       	std	Y+34, r25	; 0x22
     480:	8f 8d       	ldd	r24, Y+31	; 0x1f
     482:	98 a1       	ldd	r25, Y+32	; 0x20
     484:	9a 87       	std	Y+10, r25	; 0x0a
     486:	89 87       	std	Y+9, r24	; 0x09
     488:	89 85       	ldd	r24, Y+9	; 0x09
     48a:	9a 85       	ldd	r25, Y+10	; 0x0a
     48c:	9e 87       	std	Y+14, r25	; 0x0e
     48e:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     490:	8d 85       	ldd	r24, Y+13	; 0x0d
     492:	9e 85       	ldd	r25, Y+14	; 0x0e
     494:	01 97       	sbiw	r24, 0x01	; 1
     496:	f1 f7       	brne	.-4      	; 0x494 <__FUSE_REGION_LENGTH__+0x94>
     498:	9e 87       	std	Y+14, r25	; 0x0e
     49a:	8d 87       	std	Y+13, r24	; 0x0d
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
     49c:	00 00       	nop

	/*wait for more than 30ms*/
	_delay_ms(40);

	/*function set command: 2 lines"1", 5*8 Font Size"0"*/
	CLCD_voidSendCommand(0b00111000);
     49e:	88 e3       	ldi	r24, 0x38	; 56
     4a0:	0e 94 41 00 	call	0x82	; 0x82 <CLCD_voidSendCommand>

	/*Display ON/OFF control: display enable, disable cursor, no blink cursor*/
	CLCD_voidSendCommand(0b00001100);
     4a4:	8c e0       	ldi	r24, 0x0C	; 12
     4a6:	0e 94 41 00 	call	0x82	; 0x82 <CLCD_voidSendCommand>

 	/*Display clear*/
	CLCD_voidSendCommand(1);
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	0e 94 41 00 	call	0x82	; 0x82 <CLCD_voidSendCommand>
		CLCD_voidSendCommand(0b00010000);



#endif
}
     4b0:	00 00       	nop
     4b2:	a2 96       	adiw	r28, 0x22	; 34
     4b4:	0f b6       	in	r0, 0x3f	; 63
     4b6:	f8 94       	cli
     4b8:	de bf       	out	0x3e, r29	; 62
     4ba:	0f be       	out	0x3f, r0	; 63
     4bc:	cd bf       	out	0x3d, r28	; 61
     4be:	df 91       	pop	r29
     4c0:	cf 91       	pop	r28
     4c2:	08 95       	ret

000004c4 <CLCD_voidSendString>:

void CLCD_voidSendString(const char*Copy_pcString )
{
     4c4:	cf 93       	push	r28
     4c6:	df 93       	push	r29
     4c8:	00 d0       	rcall	.+0      	; 0x4ca <CLCD_voidSendString+0x6>
     4ca:	0f 92       	push	r0
     4cc:	cd b7       	in	r28, 0x3d	; 61
     4ce:	de b7       	in	r29, 0x3e	; 62
     4d0:	9b 83       	std	Y+3, r25	; 0x03
     4d2:	8a 83       	std	Y+2, r24	; 0x02
	//any variable carry ASCII value should be char not unsigned or signed
	u8 Local_u8Counter=0;
     4d4:	19 82       	std	Y+1, r1	; 0x01
	while(Copy_pcString[Local_u8Counter]!='\0')
     4d6:	0e c0       	rjmp	.+28     	; 0x4f4 <CLCD_voidSendString+0x30>
	{
	CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
     4d8:	89 81       	ldd	r24, Y+1	; 0x01
     4da:	88 2f       	mov	r24, r24
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	2a 81       	ldd	r18, Y+2	; 0x02
     4e0:	3b 81       	ldd	r19, Y+3	; 0x03
     4e2:	82 0f       	add	r24, r18
     4e4:	93 1f       	adc	r25, r19
     4e6:	fc 01       	movw	r30, r24
     4e8:	80 81       	ld	r24, Z
     4ea:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <CLCD_voidSendData>
	Local_u8Counter++;
     4ee:	89 81       	ldd	r24, Y+1	; 0x01
     4f0:	8f 5f       	subi	r24, 0xFF	; 255
     4f2:	89 83       	std	Y+1, r24	; 0x01

void CLCD_voidSendString(const char*Copy_pcString )
{
	//any variable carry ASCII value should be char not unsigned or signed
	u8 Local_u8Counter=0;
	while(Copy_pcString[Local_u8Counter]!='\0')
     4f4:	89 81       	ldd	r24, Y+1	; 0x01
     4f6:	88 2f       	mov	r24, r24
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	2a 81       	ldd	r18, Y+2	; 0x02
     4fc:	3b 81       	ldd	r19, Y+3	; 0x03
     4fe:	82 0f       	add	r24, r18
     500:	93 1f       	adc	r25, r19
     502:	fc 01       	movw	r30, r24
     504:	80 81       	ld	r24, Z
     506:	88 23       	and	r24, r24
     508:	39 f7       	brne	.-50     	; 0x4d8 <CLCD_voidSendString+0x14>
	{
	CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
	Local_u8Counter++;
	}

}
     50a:	00 00       	nop
     50c:	00 00       	nop
     50e:	0f 90       	pop	r0
     510:	0f 90       	pop	r0
     512:	0f 90       	pop	r0
     514:	df 91       	pop	r29
     516:	cf 91       	pop	r28
     518:	08 95       	ret

0000051a <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos)
{
     51a:	cf 93       	push	r28
     51c:	df 93       	push	r29
     51e:	00 d0       	rcall	.+0      	; 0x520 <CLCD_voidGoToXY+0x6>
     520:	00 d0       	rcall	.+0      	; 0x522 <CLCD_voidGoToXY+0x8>
     522:	cd b7       	in	r28, 0x3d	; 61
     524:	de b7       	in	r29, 0x3e	; 62
     526:	8b 83       	std	Y+3, r24	; 0x03
     528:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState=0;
     52a:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Address;
	if(Copy_u8XPos==0)
     52c:	8b 81       	ldd	r24, Y+3	; 0x03
     52e:	88 23       	and	r24, r24
     530:	19 f4       	brne	.+6      	; 0x538 <CLCD_voidGoToXY+0x1e>
	{
		/*Location is at first line in CLCD 16*2*/
		Local_u8Address=Copy_u8YPos;
     532:	8c 81       	ldd	r24, Y+4	; 0x04
     534:	89 83       	std	Y+1, r24	; 0x01
     536:	06 c0       	rjmp	.+12     	; 0x544 <CLCD_voidGoToXY+0x2a>
	}
	else if(Copy_u8XPos==1)
     538:	8b 81       	ldd	r24, Y+3	; 0x03
     53a:	81 30       	cpi	r24, 0x01	; 1
     53c:	19 f4       	brne	.+6      	; 0x544 <CLCD_voidGoToXY+0x2a>
	{
		/*Location is at Second line in CLCD 16*2*/
		Local_u8Address=Copy_u8YPos+0x40;
     53e:	8c 81       	ldd	r24, Y+4	; 0x04
     540:	80 5c       	subi	r24, 0xC0	; 192
     542:	89 83       	std	Y+1, r24	; 0x01
	}
	/*set bit number 7 for set DDRAM Address command then send the command*/
	CLCD_voidSendCommand(Local_u8Address+128);
     544:	89 81       	ldd	r24, Y+1	; 0x01
     546:	80 58       	subi	r24, 0x80	; 128
     548:	0e 94 41 00 	call	0x82	; 0x82 <CLCD_voidSendCommand>
}
     54c:	00 00       	nop
     54e:	0f 90       	pop	r0
     550:	0f 90       	pop	r0
     552:	0f 90       	pop	r0
     554:	0f 90       	pop	r0
     556:	df 91       	pop	r29
     558:	cf 91       	pop	r28
     55a:	08 95       	ret

0000055c <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8*Copy_pu8Pattern,u8 Copy_u8PatternNumber,u8 Copy_u8XPos,u8 Copy_u8YPos)
{
     55c:	cf 93       	push	r28
     55e:	df 93       	push	r29
     560:	00 d0       	rcall	.+0      	; 0x562 <CLCD_voidWriteSpecialCharacter+0x6>
     562:	00 d0       	rcall	.+0      	; 0x564 <CLCD_voidWriteSpecialCharacter+0x8>
     564:	00 d0       	rcall	.+0      	; 0x566 <CLCD_voidWriteSpecialCharacter+0xa>
     566:	0f 92       	push	r0
     568:	cd b7       	in	r28, 0x3d	; 61
     56a:	de b7       	in	r29, 0x3e	; 62
     56c:	9c 83       	std	Y+4, r25	; 0x04
     56e:	8b 83       	std	Y+3, r24	; 0x03
     570:	6d 83       	std	Y+5, r22	; 0x05
     572:	4e 83       	std	Y+6, r20	; 0x06
     574:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress=0,Local_u8Iterator;
     576:	1a 82       	std	Y+2, r1	; 0x02

	/*calculate the CGRAM Address whose each block is 8 bytes */
	Local_u8CGRAMAddress=Copy_u8PatternNumber*8;
     578:	8d 81       	ldd	r24, Y+5	; 0x05
     57a:	88 0f       	add	r24, r24
     57c:	88 0f       	add	r24, r24
     57e:	88 0f       	add	r24, r24
     580:	8a 83       	std	Y+2, r24	; 0x02

	/*send CGRAM Address command to LCD, with setting bit 6,clearing bit 7*/
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);
     582:	8a 81       	ldd	r24, Y+2	; 0x02
     584:	80 5c       	subi	r24, 0xC0	; 192
     586:	0e 94 41 00 	call	0x82	; 0x82 <CLCD_voidSendCommand>

	/*write pattern into CGRAM*/
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
     58a:	19 82       	std	Y+1, r1	; 0x01
     58c:	0e c0       	rjmp	.+28     	; 0x5aa <CLCD_voidWriteSpecialCharacter+0x4e>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
     58e:	89 81       	ldd	r24, Y+1	; 0x01
     590:	88 2f       	mov	r24, r24
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	2b 81       	ldd	r18, Y+3	; 0x03
     596:	3c 81       	ldd	r19, Y+4	; 0x04
     598:	82 0f       	add	r24, r18
     59a:	93 1f       	adc	r25, r19
     59c:	fc 01       	movw	r30, r24
     59e:	80 81       	ld	r24, Z
     5a0:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <CLCD_voidSendData>

	/*send CGRAM Address command to LCD, with setting bit 6,clearing bit 7*/
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);

	/*write pattern into CGRAM*/
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
     5a4:	89 81       	ldd	r24, Y+1	; 0x01
     5a6:	8f 5f       	subi	r24, 0xFF	; 255
     5a8:	89 83       	std	Y+1, r24	; 0x01
     5aa:	89 81       	ldd	r24, Y+1	; 0x01
     5ac:	88 30       	cpi	r24, 0x08	; 8
     5ae:	78 f3       	brcs	.-34     	; 0x58e <CLCD_voidWriteSpecialCharacter+0x32>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
	}

	/*Go back to the DDRAM to display the pattern*/
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
     5b0:	6f 81       	ldd	r22, Y+7	; 0x07
     5b2:	8e 81       	ldd	r24, Y+6	; 0x06
     5b4:	0e 94 8d 02 	call	0x51a	; 0x51a <CLCD_voidGoToXY>

	/*Display the pattern written in the CG RAM
	 * DDRAM treat with the CGRAM with location(block) number from 0 to 7*/
	CLCD_voidSendData(Copy_u8PatternNumber);
     5b8:	8d 81       	ldd	r24, Y+5	; 0x05
     5ba:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <CLCD_voidSendData>

}
     5be:	00 00       	nop
     5c0:	27 96       	adiw	r28, 0x07	; 7
     5c2:	0f b6       	in	r0, 0x3f	; 63
     5c4:	f8 94       	cli
     5c6:	de bf       	out	0x3e, r29	; 62
     5c8:	0f be       	out	0x3f, r0	; 63
     5ca:	cd bf       	out	0x3d, r28	; 61
     5cc:	df 91       	pop	r29
     5ce:	cf 91       	pop	r28
     5d0:	08 95       	ret

000005d2 <CLCD_voidWriteNumber>:


void CLCD_voidWriteNumber(u32 Copy_u32Number)
{
     5d2:	cf 93       	push	r28
     5d4:	df 93       	push	r29
     5d6:	00 d0       	rcall	.+0      	; 0x5d8 <CLCD_voidWriteNumber+0x6>
     5d8:	00 d0       	rcall	.+0      	; 0x5da <CLCD_voidWriteNumber+0x8>
     5da:	cd b7       	in	r28, 0x3d	; 61
     5dc:	de b7       	in	r29, 0x3e	; 62
     5de:	69 83       	std	Y+1, r22	; 0x01
     5e0:	7a 83       	std	Y+2, r23	; 0x02
     5e2:	8b 83       	std	Y+3, r24	; 0x03
     5e4:	9c 83       	std	Y+4, r25	; 0x04

}
     5e6:	00 00       	nop
     5e8:	0f 90       	pop	r0
     5ea:	0f 90       	pop	r0
     5ec:	0f 90       	pop	r0
     5ee:	0f 90       	pop	r0
     5f0:	df 91       	pop	r29
     5f2:	cf 91       	pop	r28
     5f4:	08 95       	ret

000005f6 <DIO_u8SetPinValue>:
#include"DIO_private.h"



u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
     5f6:	cf 93       	push	r28
     5f8:	df 93       	push	r29
     5fa:	00 d0       	rcall	.+0      	; 0x5fc <DIO_u8SetPinValue+0x6>
     5fc:	00 d0       	rcall	.+0      	; 0x5fe <DIO_u8SetPinValue+0x8>
     5fe:	cd b7       	in	r28, 0x3d	; 61
     600:	de b7       	in	r29, 0x3e	; 62
     602:	8a 83       	std	Y+2, r24	; 0x02
     604:	6b 83       	std	Y+3, r22	; 0x03
     606:	4c 83       	std	Y+4, r20	; 0x04

u8 Local_u8ErrorState=0;
     608:	19 82       	std	Y+1, r1	; 0x01

if(Copy_u8Pin<=DIO_u8PIN7)
     60a:	8b 81       	ldd	r24, Y+3	; 0x03
     60c:	88 30       	cpi	r24, 0x08	; 8
     60e:	08 f0       	brcs	.+2      	; 0x612 <DIO_u8SetPinValue+0x1c>
     610:	f1 c0       	rjmp	.+482    	; 0x7f4 <DIO_u8SetPinValue+0x1fe>
{
	if(Copy_u8Value==DIO_u8PIN_HIGH)
     612:	8c 81       	ldd	r24, Y+4	; 0x04
     614:	81 30       	cpi	r24, 0x01	; 1
     616:	09 f0       	breq	.+2      	; 0x61a <DIO_u8SetPinValue+0x24>
     618:	71 c0       	rjmp	.+226    	; 0x6fc <DIO_u8SetPinValue+0x106>
		{
		switch(Copy_u8Port)
     61a:	8a 81       	ldd	r24, Y+2	; 0x02
     61c:	88 2f       	mov	r24, r24
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	84 30       	cpi	r24, 0x04	; 4
     622:	91 05       	cpc	r25, r1
     624:	09 f4       	brne	.+2      	; 0x628 <DIO_u8SetPinValue+0x32>
     626:	52 c0       	rjmp	.+164    	; 0x6cc <DIO_u8SetPinValue+0xd6>
     628:	85 30       	cpi	r24, 0x05	; 5
     62a:	91 05       	cpc	r25, r1
     62c:	0c f0       	brlt	.+2      	; 0x630 <DIO_u8SetPinValue+0x3a>
     62e:	64 c0       	rjmp	.+200    	; 0x6f8 <DIO_u8SetPinValue+0x102>
     630:	83 30       	cpi	r24, 0x03	; 3
     632:	91 05       	cpc	r25, r1
     634:	a9 f1       	breq	.+106    	; 0x6a0 <DIO_u8SetPinValue+0xaa>
     636:	84 30       	cpi	r24, 0x04	; 4
     638:	91 05       	cpc	r25, r1
     63a:	0c f0       	brlt	.+2      	; 0x63e <DIO_u8SetPinValue+0x48>
     63c:	5d c0       	rjmp	.+186    	; 0x6f8 <DIO_u8SetPinValue+0x102>
     63e:	00 97       	sbiw	r24, 0x00	; 0
     640:	19 f0       	breq	.+6      	; 0x648 <DIO_u8SetPinValue+0x52>
     642:	01 97       	sbiw	r24, 0x01	; 1
     644:	b9 f0       	breq	.+46     	; 0x674 <DIO_u8SetPinValue+0x7e>
     646:	58 c0       	rjmp	.+176    	; 0x6f8 <DIO_u8SetPinValue+0x102>
		{
			case DIO_u8PORTA:SET_BIT(PORTA,Copy_u8Pin);break;
     648:	8b e3       	ldi	r24, 0x3B	; 59
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	fc 01       	movw	r30, r24
     64e:	80 81       	ld	r24, Z
     650:	48 2f       	mov	r20, r24
     652:	8b 81       	ldd	r24, Y+3	; 0x03
     654:	28 2f       	mov	r18, r24
     656:	30 e0       	ldi	r19, 0x00	; 0
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	02 c0       	rjmp	.+4      	; 0x662 <DIO_u8SetPinValue+0x6c>
     65e:	88 0f       	add	r24, r24
     660:	99 1f       	adc	r25, r25
     662:	2a 95       	dec	r18
     664:	e2 f7       	brpl	.-8      	; 0x65e <DIO_u8SetPinValue+0x68>
     666:	24 2f       	mov	r18, r20
     668:	28 2b       	or	r18, r24
     66a:	8b e3       	ldi	r24, 0x3B	; 59
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	fc 01       	movw	r30, r24
     670:	20 83       	st	Z, r18
     672:	c2 c0       	rjmp	.+388    	; 0x7f8 <DIO_u8SetPinValue+0x202>
			case DIO_u8PORTB:SET_BIT(PORTB,Copy_u8Pin);break;
     674:	88 e3       	ldi	r24, 0x38	; 56
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	fc 01       	movw	r30, r24
     67a:	80 81       	ld	r24, Z
     67c:	48 2f       	mov	r20, r24
     67e:	8b 81       	ldd	r24, Y+3	; 0x03
     680:	28 2f       	mov	r18, r24
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	02 c0       	rjmp	.+4      	; 0x68e <DIO_u8SetPinValue+0x98>
     68a:	88 0f       	add	r24, r24
     68c:	99 1f       	adc	r25, r25
     68e:	2a 95       	dec	r18
     690:	e2 f7       	brpl	.-8      	; 0x68a <DIO_u8SetPinValue+0x94>
     692:	24 2f       	mov	r18, r20
     694:	28 2b       	or	r18, r24
     696:	88 e3       	ldi	r24, 0x38	; 56
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	fc 01       	movw	r30, r24
     69c:	20 83       	st	Z, r18
     69e:	ac c0       	rjmp	.+344    	; 0x7f8 <DIO_u8SetPinValue+0x202>
			case DIO_u8PORTC:SET_BIT(PORTC,Copy_u8Pin);break;
     6a0:	85 e3       	ldi	r24, 0x35	; 53
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	fc 01       	movw	r30, r24
     6a6:	80 81       	ld	r24, Z
     6a8:	48 2f       	mov	r20, r24
     6aa:	8b 81       	ldd	r24, Y+3	; 0x03
     6ac:	28 2f       	mov	r18, r24
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	02 c0       	rjmp	.+4      	; 0x6ba <DIO_u8SetPinValue+0xc4>
     6b6:	88 0f       	add	r24, r24
     6b8:	99 1f       	adc	r25, r25
     6ba:	2a 95       	dec	r18
     6bc:	e2 f7       	brpl	.-8      	; 0x6b6 <DIO_u8SetPinValue+0xc0>
     6be:	24 2f       	mov	r18, r20
     6c0:	28 2b       	or	r18, r24
     6c2:	85 e3       	ldi	r24, 0x35	; 53
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	fc 01       	movw	r30, r24
     6c8:	20 83       	st	Z, r18
     6ca:	96 c0       	rjmp	.+300    	; 0x7f8 <DIO_u8SetPinValue+0x202>
			case DIO_u8PORTD:SET_BIT(PORTD,Copy_u8Pin);break;
     6cc:	82 e3       	ldi	r24, 0x32	; 50
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	fc 01       	movw	r30, r24
     6d2:	80 81       	ld	r24, Z
     6d4:	48 2f       	mov	r20, r24
     6d6:	8b 81       	ldd	r24, Y+3	; 0x03
     6d8:	28 2f       	mov	r18, r24
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <DIO_u8SetPinValue+0xf0>
     6e2:	88 0f       	add	r24, r24
     6e4:	99 1f       	adc	r25, r25
     6e6:	2a 95       	dec	r18
     6e8:	e2 f7       	brpl	.-8      	; 0x6e2 <DIO_u8SetPinValue+0xec>
     6ea:	24 2f       	mov	r18, r20
     6ec:	28 2b       	or	r18, r24
     6ee:	82 e3       	ldi	r24, 0x32	; 50
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	fc 01       	movw	r30, r24
     6f4:	20 83       	st	Z, r18
     6f6:	80 c0       	rjmp	.+256    	; 0x7f8 <DIO_u8SetPinValue+0x202>
			default :Local_u8ErrorState=0;;break;
     6f8:	19 82       	std	Y+1, r1	; 0x01
     6fa:	7e c0       	rjmp	.+252    	; 0x7f8 <DIO_u8SetPinValue+0x202>
		}



		}
		else if(Copy_u8Value==DIO_u8PIN_LOW)
     6fc:	8c 81       	ldd	r24, Y+4	; 0x04
     6fe:	88 23       	and	r24, r24
     700:	09 f0       	breq	.+2      	; 0x704 <DIO_u8SetPinValue+0x10e>
     702:	75 c0       	rjmp	.+234    	; 0x7ee <DIO_u8SetPinValue+0x1f8>
		{
			switch(Copy_u8Port)
     704:	8a 81       	ldd	r24, Y+2	; 0x02
     706:	88 2f       	mov	r24, r24
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	84 30       	cpi	r24, 0x04	; 4
     70c:	91 05       	cpc	r25, r1
     70e:	09 f4       	brne	.+2      	; 0x712 <DIO_u8SetPinValue+0x11c>
     710:	55 c0       	rjmp	.+170    	; 0x7bc <DIO_u8SetPinValue+0x1c6>
     712:	85 30       	cpi	r24, 0x05	; 5
     714:	91 05       	cpc	r25, r1
     716:	0c f0       	brlt	.+2      	; 0x71a <DIO_u8SetPinValue+0x124>
     718:	68 c0       	rjmp	.+208    	; 0x7ea <DIO_u8SetPinValue+0x1f4>
     71a:	83 30       	cpi	r24, 0x03	; 3
     71c:	91 05       	cpc	r25, r1
     71e:	b9 f1       	breq	.+110    	; 0x78e <DIO_u8SetPinValue+0x198>
     720:	84 30       	cpi	r24, 0x04	; 4
     722:	91 05       	cpc	r25, r1
     724:	0c f0       	brlt	.+2      	; 0x728 <DIO_u8SetPinValue+0x132>
     726:	61 c0       	rjmp	.+194    	; 0x7ea <DIO_u8SetPinValue+0x1f4>
     728:	00 97       	sbiw	r24, 0x00	; 0
     72a:	19 f0       	breq	.+6      	; 0x732 <DIO_u8SetPinValue+0x13c>
     72c:	01 97       	sbiw	r24, 0x01	; 1
     72e:	c1 f0       	breq	.+48     	; 0x760 <DIO_u8SetPinValue+0x16a>
     730:	5c c0       	rjmp	.+184    	; 0x7ea <DIO_u8SetPinValue+0x1f4>
		{
			case DIO_u8PORTA:CLR_BIT(PORTA,Copy_u8Pin);break;
     732:	8b e3       	ldi	r24, 0x3B	; 59
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	fc 01       	movw	r30, r24
     738:	80 81       	ld	r24, Z
     73a:	48 2f       	mov	r20, r24
     73c:	8b 81       	ldd	r24, Y+3	; 0x03
     73e:	28 2f       	mov	r18, r24
     740:	30 e0       	ldi	r19, 0x00	; 0
     742:	81 e0       	ldi	r24, 0x01	; 1
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	02 c0       	rjmp	.+4      	; 0x74c <DIO_u8SetPinValue+0x156>
     748:	88 0f       	add	r24, r24
     74a:	99 1f       	adc	r25, r25
     74c:	2a 95       	dec	r18
     74e:	e2 f7       	brpl	.-8      	; 0x748 <DIO_u8SetPinValue+0x152>
     750:	80 95       	com	r24
     752:	24 2f       	mov	r18, r20
     754:	28 23       	and	r18, r24
     756:	8b e3       	ldi	r24, 0x3B	; 59
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	fc 01       	movw	r30, r24
     75c:	20 83       	st	Z, r18
     75e:	4c c0       	rjmp	.+152    	; 0x7f8 <DIO_u8SetPinValue+0x202>
			case DIO_u8PORTB:CLR_BIT(PORTB,Copy_u8Pin);break;
     760:	88 e3       	ldi	r24, 0x38	; 56
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	fc 01       	movw	r30, r24
     766:	80 81       	ld	r24, Z
     768:	48 2f       	mov	r20, r24
     76a:	8b 81       	ldd	r24, Y+3	; 0x03
     76c:	28 2f       	mov	r18, r24
     76e:	30 e0       	ldi	r19, 0x00	; 0
     770:	81 e0       	ldi	r24, 0x01	; 1
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	02 c0       	rjmp	.+4      	; 0x77a <DIO_u8SetPinValue+0x184>
     776:	88 0f       	add	r24, r24
     778:	99 1f       	adc	r25, r25
     77a:	2a 95       	dec	r18
     77c:	e2 f7       	brpl	.-8      	; 0x776 <DIO_u8SetPinValue+0x180>
     77e:	80 95       	com	r24
     780:	24 2f       	mov	r18, r20
     782:	28 23       	and	r18, r24
     784:	88 e3       	ldi	r24, 0x38	; 56
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	fc 01       	movw	r30, r24
     78a:	20 83       	st	Z, r18
     78c:	35 c0       	rjmp	.+106    	; 0x7f8 <DIO_u8SetPinValue+0x202>
			case DIO_u8PORTC:CLR_BIT(PORTC,Copy_u8Pin);break;
     78e:	85 e3       	ldi	r24, 0x35	; 53
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	fc 01       	movw	r30, r24
     794:	80 81       	ld	r24, Z
     796:	48 2f       	mov	r20, r24
     798:	8b 81       	ldd	r24, Y+3	; 0x03
     79a:	28 2f       	mov	r18, r24
     79c:	30 e0       	ldi	r19, 0x00	; 0
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	02 c0       	rjmp	.+4      	; 0x7a8 <DIO_u8SetPinValue+0x1b2>
     7a4:	88 0f       	add	r24, r24
     7a6:	99 1f       	adc	r25, r25
     7a8:	2a 95       	dec	r18
     7aa:	e2 f7       	brpl	.-8      	; 0x7a4 <DIO_u8SetPinValue+0x1ae>
     7ac:	80 95       	com	r24
     7ae:	24 2f       	mov	r18, r20
     7b0:	28 23       	and	r18, r24
     7b2:	85 e3       	ldi	r24, 0x35	; 53
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	fc 01       	movw	r30, r24
     7b8:	20 83       	st	Z, r18
     7ba:	1e c0       	rjmp	.+60     	; 0x7f8 <DIO_u8SetPinValue+0x202>
			case DIO_u8PORTD:CLR_BIT(PORTD,Copy_u8Pin);break;
     7bc:	82 e3       	ldi	r24, 0x32	; 50
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	fc 01       	movw	r30, r24
     7c2:	80 81       	ld	r24, Z
     7c4:	48 2f       	mov	r20, r24
     7c6:	8b 81       	ldd	r24, Y+3	; 0x03
     7c8:	28 2f       	mov	r18, r24
     7ca:	30 e0       	ldi	r19, 0x00	; 0
     7cc:	81 e0       	ldi	r24, 0x01	; 1
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <DIO_u8SetPinValue+0x1e0>
     7d2:	88 0f       	add	r24, r24
     7d4:	99 1f       	adc	r25, r25
     7d6:	2a 95       	dec	r18
     7d8:	e2 f7       	brpl	.-8      	; 0x7d2 <DIO_u8SetPinValue+0x1dc>
     7da:	80 95       	com	r24
     7dc:	24 2f       	mov	r18, r20
     7de:	28 23       	and	r18, r24
     7e0:	82 e3       	ldi	r24, 0x32	; 50
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	fc 01       	movw	r30, r24
     7e6:	20 83       	st	Z, r18
     7e8:	07 c0       	rjmp	.+14     	; 0x7f8 <DIO_u8SetPinValue+0x202>
			default :Local_u8ErrorState=0;;break;
     7ea:	19 82       	std	Y+1, r1	; 0x01
     7ec:	05 c0       	rjmp	.+10     	; 0x7f8 <DIO_u8SetPinValue+0x202>


		}
		else
		{
		Local_u8ErrorState=1;
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	89 83       	std	Y+1, r24	; 0x01
     7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <DIO_u8SetPinValue+0x202>
		}


}
else{
	 Local_u8ErrorState=1;
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	89 83       	std	Y+1, r24	; 0x01

}
return Local_u8ErrorState;
     7f8:	89 81       	ldd	r24, Y+1	; 0x01

}
     7fa:	0f 90       	pop	r0
     7fc:	0f 90       	pop	r0
     7fe:	0f 90       	pop	r0
     800:	0f 90       	pop	r0
     802:	df 91       	pop	r29
     804:	cf 91       	pop	r28
     806:	08 95       	ret

00000808 <DIO_u8SetPortValue>:


u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
     808:	cf 93       	push	r28
     80a:	df 93       	push	r29
     80c:	00 d0       	rcall	.+0      	; 0x80e <DIO_u8SetPortValue+0x6>
     80e:	0f 92       	push	r0
     810:	cd b7       	in	r28, 0x3d	; 61
     812:	de b7       	in	r29, 0x3e	; 62
     814:	8a 83       	std	Y+2, r24	; 0x02
     816:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
     818:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
     81a:	8a 81       	ldd	r24, Y+2	; 0x02
     81c:	88 2f       	mov	r24, r24
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	84 30       	cpi	r24, 0x04	; 4
     822:	91 05       	cpc	r25, r1
     824:	01 f1       	breq	.+64     	; 0x866 <__stack+0x7>
     826:	85 30       	cpi	r24, 0x05	; 5
     828:	91 05       	cpc	r25, r1
     82a:	1c f5       	brge	.+70     	; 0x872 <__stack+0x13>
     82c:	83 30       	cpi	r24, 0x03	; 3
     82e:	91 05       	cpc	r25, r1
     830:	a1 f0       	breq	.+40     	; 0x85a <DIO_u8SetPortValue+0x52>
     832:	84 30       	cpi	r24, 0x04	; 4
     834:	91 05       	cpc	r25, r1
     836:	ec f4       	brge	.+58     	; 0x872 <__stack+0x13>
     838:	00 97       	sbiw	r24, 0x00	; 0
     83a:	19 f0       	breq	.+6      	; 0x842 <DIO_u8SetPortValue+0x3a>
     83c:	01 97       	sbiw	r24, 0x01	; 1
     83e:	39 f0       	breq	.+14     	; 0x84e <DIO_u8SetPortValue+0x46>
     840:	18 c0       	rjmp	.+48     	; 0x872 <__stack+0x13>
				{
					case DIO_u8PORTA: PORTA=Copy_u8Value; break;
     842:	8b e3       	ldi	r24, 0x3B	; 59
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	2b 81       	ldd	r18, Y+3	; 0x03
     848:	fc 01       	movw	r30, r24
     84a:	20 83       	st	Z, r18
     84c:	15 c0       	rjmp	.+42     	; 0x878 <__stack+0x19>
				    case DIO_u8PORTB: PORTB=Copy_u8Value; break;
     84e:	88 e3       	ldi	r24, 0x38	; 56
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	2b 81       	ldd	r18, Y+3	; 0x03
     854:	fc 01       	movw	r30, r24
     856:	20 83       	st	Z, r18
     858:	0f c0       	rjmp	.+30     	; 0x878 <__stack+0x19>
				    case DIO_u8PORTC: PORTC=Copy_u8Value; break;
     85a:	85 e3       	ldi	r24, 0x35	; 53
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	2b 81       	ldd	r18, Y+3	; 0x03
     860:	fc 01       	movw	r30, r24
     862:	20 83       	st	Z, r18
     864:	09 c0       	rjmp	.+18     	; 0x878 <__stack+0x19>
				    case DIO_u8PORTD: PORTD=Copy_u8Value; break;
     866:	82 e3       	ldi	r24, 0x32	; 50
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	2b 81       	ldd	r18, Y+3	; 0x03
     86c:	fc 01       	movw	r30, r24
     86e:	20 83       	st	Z, r18
     870:	03 c0       	rjmp	.+6      	; 0x878 <__stack+0x19>
				    default :Local_u8ErrorState=1; break;
     872:	81 e0       	ldi	r24, 0x01	; 1
     874:	89 83       	std	Y+1, r24	; 0x01
     876:	00 00       	nop
				}


	return Local_u8ErrorState;
     878:	89 81       	ldd	r24, Y+1	; 0x01

}
     87a:	0f 90       	pop	r0
     87c:	0f 90       	pop	r0
     87e:	0f 90       	pop	r0
     880:	df 91       	pop	r29
     882:	cf 91       	pop	r28
     884:	08 95       	ret

00000886 <DIO_u8GetPinValue>:



u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8* Copy_pu8Value)
{
     886:	cf 93       	push	r28
     888:	df 93       	push	r29
     88a:	00 d0       	rcall	.+0      	; 0x88c <DIO_u8GetPinValue+0x6>
     88c:	00 d0       	rcall	.+0      	; 0x88e <DIO_u8GetPinValue+0x8>
     88e:	0f 92       	push	r0
     890:	cd b7       	in	r28, 0x3d	; 61
     892:	de b7       	in	r29, 0x3e	; 62
     894:	8a 83       	std	Y+2, r24	; 0x02
     896:	6b 83       	std	Y+3, r22	; 0x03
     898:	5d 83       	std	Y+5, r21	; 0x05
     89a:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState=0;
     89c:	19 82       	std	Y+1, r1	; 0x01
	if( (Copy_pu8Value!=NULL) && (Copy_u8Pin<=DIO_u8PIN7) )
     89e:	8c 81       	ldd	r24, Y+4	; 0x04
     8a0:	9d 81       	ldd	r25, Y+5	; 0x05
     8a2:	89 2b       	or	r24, r25
     8a4:	09 f4       	brne	.+2      	; 0x8a8 <DIO_u8GetPinValue+0x22>
     8a6:	73 c0       	rjmp	.+230    	; 0x98e <DIO_u8GetPinValue+0x108>
     8a8:	8b 81       	ldd	r24, Y+3	; 0x03
     8aa:	88 30       	cpi	r24, 0x08	; 8
     8ac:	08 f0       	brcs	.+2      	; 0x8b0 <DIO_u8GetPinValue+0x2a>
     8ae:	6f c0       	rjmp	.+222    	; 0x98e <DIO_u8GetPinValue+0x108>
				{
					switch(Copy_u8Port)
     8b0:	8a 81       	ldd	r24, Y+2	; 0x02
     8b2:	88 2f       	mov	r24, r24
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	84 30       	cpi	r24, 0x04	; 4
     8b8:	91 05       	cpc	r25, r1
     8ba:	09 f4       	brne	.+2      	; 0x8be <DIO_u8GetPinValue+0x38>
     8bc:	4f c0       	rjmp	.+158    	; 0x95c <DIO_u8GetPinValue+0xd6>
     8be:	85 30       	cpi	r24, 0x05	; 5
     8c0:	91 05       	cpc	r25, r1
     8c2:	0c f0       	brlt	.+2      	; 0x8c6 <DIO_u8GetPinValue+0x40>
     8c4:	60 c0       	rjmp	.+192    	; 0x986 <DIO_u8GetPinValue+0x100>
     8c6:	83 30       	cpi	r24, 0x03	; 3
     8c8:	91 05       	cpc	r25, r1
     8ca:	99 f1       	breq	.+102    	; 0x932 <DIO_u8GetPinValue+0xac>
     8cc:	84 30       	cpi	r24, 0x04	; 4
     8ce:	91 05       	cpc	r25, r1
     8d0:	0c f0       	brlt	.+2      	; 0x8d4 <DIO_u8GetPinValue+0x4e>
     8d2:	59 c0       	rjmp	.+178    	; 0x986 <DIO_u8GetPinValue+0x100>
     8d4:	00 97       	sbiw	r24, 0x00	; 0
     8d6:	19 f0       	breq	.+6      	; 0x8de <DIO_u8GetPinValue+0x58>
     8d8:	01 97       	sbiw	r24, 0x01	; 1
     8da:	b1 f0       	breq	.+44     	; 0x908 <DIO_u8GetPinValue+0x82>
     8dc:	54 c0       	rjmp	.+168    	; 0x986 <DIO_u8GetPinValue+0x100>
					{
						 case DIO_u8PORTA: *Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin); break;
     8de:	89 e3       	ldi	r24, 0x39	; 57
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	fc 01       	movw	r30, r24
     8e4:	80 81       	ld	r24, Z
     8e6:	88 2f       	mov	r24, r24
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	2b 81       	ldd	r18, Y+3	; 0x03
     8ec:	22 2f       	mov	r18, r18
     8ee:	30 e0       	ldi	r19, 0x00	; 0
     8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <DIO_u8GetPinValue+0x70>
     8f2:	95 95       	asr	r25
     8f4:	87 95       	ror	r24
     8f6:	2a 95       	dec	r18
     8f8:	e2 f7       	brpl	.-8      	; 0x8f2 <DIO_u8GetPinValue+0x6c>
     8fa:	28 2f       	mov	r18, r24
     8fc:	21 70       	andi	r18, 0x01	; 1
     8fe:	8c 81       	ldd	r24, Y+4	; 0x04
     900:	9d 81       	ldd	r25, Y+5	; 0x05
     902:	fc 01       	movw	r30, r24
     904:	20 83       	st	Z, r18
     906:	42 c0       	rjmp	.+132    	; 0x98c <DIO_u8GetPinValue+0x106>
					     case DIO_u8PORTB: *Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin); break;
     908:	86 e3       	ldi	r24, 0x36	; 54
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	fc 01       	movw	r30, r24
     90e:	80 81       	ld	r24, Z
     910:	88 2f       	mov	r24, r24
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	2b 81       	ldd	r18, Y+3	; 0x03
     916:	22 2f       	mov	r18, r18
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	02 c0       	rjmp	.+4      	; 0x920 <DIO_u8GetPinValue+0x9a>
     91c:	95 95       	asr	r25
     91e:	87 95       	ror	r24
     920:	2a 95       	dec	r18
     922:	e2 f7       	brpl	.-8      	; 0x91c <DIO_u8GetPinValue+0x96>
     924:	28 2f       	mov	r18, r24
     926:	21 70       	andi	r18, 0x01	; 1
     928:	8c 81       	ldd	r24, Y+4	; 0x04
     92a:	9d 81       	ldd	r25, Y+5	; 0x05
     92c:	fc 01       	movw	r30, r24
     92e:	20 83       	st	Z, r18
     930:	2d c0       	rjmp	.+90     	; 0x98c <DIO_u8GetPinValue+0x106>
					     case DIO_u8PORTC: *Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin); break;
     932:	83 e3       	ldi	r24, 0x33	; 51
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	fc 01       	movw	r30, r24
     938:	80 81       	ld	r24, Z
     93a:	88 2f       	mov	r24, r24
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	2b 81       	ldd	r18, Y+3	; 0x03
     940:	22 2f       	mov	r18, r18
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	02 c0       	rjmp	.+4      	; 0x94a <DIO_u8GetPinValue+0xc4>
     946:	95 95       	asr	r25
     948:	87 95       	ror	r24
     94a:	2a 95       	dec	r18
     94c:	e2 f7       	brpl	.-8      	; 0x946 <DIO_u8GetPinValue+0xc0>
     94e:	28 2f       	mov	r18, r24
     950:	21 70       	andi	r18, 0x01	; 1
     952:	8c 81       	ldd	r24, Y+4	; 0x04
     954:	9d 81       	ldd	r25, Y+5	; 0x05
     956:	fc 01       	movw	r30, r24
     958:	20 83       	st	Z, r18
     95a:	18 c0       	rjmp	.+48     	; 0x98c <DIO_u8GetPinValue+0x106>
					     case DIO_u8PORTD: *Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin); break;
     95c:	80 e3       	ldi	r24, 0x30	; 48
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	fc 01       	movw	r30, r24
     962:	80 81       	ld	r24, Z
     964:	88 2f       	mov	r24, r24
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	2b 81       	ldd	r18, Y+3	; 0x03
     96a:	22 2f       	mov	r18, r18
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	02 c0       	rjmp	.+4      	; 0x974 <DIO_u8GetPinValue+0xee>
     970:	95 95       	asr	r25
     972:	87 95       	ror	r24
     974:	2a 95       	dec	r18
     976:	e2 f7       	brpl	.-8      	; 0x970 <DIO_u8GetPinValue+0xea>
     978:	28 2f       	mov	r18, r24
     97a:	21 70       	andi	r18, 0x01	; 1
     97c:	8c 81       	ldd	r24, Y+4	; 0x04
     97e:	9d 81       	ldd	r25, Y+5	; 0x05
     980:	fc 01       	movw	r30, r24
     982:	20 83       	st	Z, r18
     984:	03 c0       	rjmp	.+6      	; 0x98c <DIO_u8GetPinValue+0x106>
					     default : Local_u8ErrorState=1; break;
     986:	81 e0       	ldi	r24, 0x01	; 1
     988:	89 83       	std	Y+1, r24	; 0x01
     98a:	00 00       	nop
{

	u8 Local_u8ErrorState=0;
	if( (Copy_pu8Value!=NULL) && (Copy_u8Pin<=DIO_u8PIN7) )
				{
					switch(Copy_u8Port)
     98c:	02 c0       	rjmp	.+4      	; 0x992 <DIO_u8GetPinValue+0x10c>
					}

				}
				else
				{
				Local_u8ErrorState=1;
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	89 83       	std	Y+1, r24	; 0x01

				}


	return Local_u8ErrorState;
     992:	89 81       	ldd	r24, Y+1	; 0x01


}
     994:	0f 90       	pop	r0
     996:	0f 90       	pop	r0
     998:	0f 90       	pop	r0
     99a:	0f 90       	pop	r0
     99c:	0f 90       	pop	r0
     99e:	df 91       	pop	r29
     9a0:	cf 91       	pop	r28
     9a2:	08 95       	ret

000009a4 <PORT_voidInit>:
#include"PORT_interface.h"
#include"PORT_register.h"


void PORT_voidInit()
{
     9a4:	cf 93       	push	r28
     9a6:	df 93       	push	r29
     9a8:	cd b7       	in	r28, 0x3d	; 61
     9aa:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
     9ac:	8a e3       	ldi	r24, 0x3A	; 58
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	2f ef       	ldi	r18, 0xFF	; 255
     9b2:	fc 01       	movw	r30, r24
     9b4:	20 83       	st	Z, r18
	DDRB=PORTB_DIR;
     9b6:	87 e3       	ldi	r24, 0x37	; 55
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	fc 01       	movw	r30, r24
     9bc:	10 82       	st	Z, r1
	DDRC=PORTC_DIR;
     9be:	84 e3       	ldi	r24, 0x34	; 52
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	27 e0       	ldi	r18, 0x07	; 7
     9c4:	fc 01       	movw	r30, r24
     9c6:	20 83       	st	Z, r18
	DDRD=PORTD_DIR;
     9c8:	81 e3       	ldi	r24, 0x31	; 49
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	fc 01       	movw	r30, r24
     9ce:	10 82       	st	Z, r1

	PORTA=PORTA_InitVal;
     9d0:	8b e3       	ldi	r24, 0x3B	; 59
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	fc 01       	movw	r30, r24
     9d6:	10 82       	st	Z, r1
	PORTB=PORTB_InitVal;
     9d8:	88 e3       	ldi	r24, 0x38	; 56
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	fc 01       	movw	r30, r24
     9de:	10 82       	st	Z, r1
	PORTC=PORTC_InitVal;
     9e0:	85 e3       	ldi	r24, 0x35	; 53
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	fc 01       	movw	r30, r24
     9e6:	10 82       	st	Z, r1
	PORTD=PORTD_InitVal;
     9e8:	82 e3       	ldi	r24, 0x32	; 50
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	fc 01       	movw	r30, r24
     9ee:	10 82       	st	Z, r1
}
     9f0:	00 00       	nop
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	08 95       	ret

000009f8 <main>:

#define time	80


void main(void)
{
     9f8:	0f 93       	push	r16
     9fa:	1f 93       	push	r17
     9fc:	cf 93       	push	r28
     9fe:	df 93       	push	r29
     a00:	cd b7       	in	r28, 0x3d	; 61
     a02:	de b7       	in	r29, 0x3e	; 62
     a04:	ce 52       	subi	r28, 0x2E	; 46
     a06:	d2 40       	sbci	r29, 0x02	; 2
     a08:	0f b6       	in	r0, 0x3f	; 63
     a0a:	f8 94       	cli
     a0c:	de bf       	out	0x3e, r29	; 62
     a0e:	0f be       	out	0x3f, r0	; 63
     a10:	cd bf       	out	0x3d, r28	; 61
	PORT_voidInit();
     a12:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <PORT_voidInit>
	CLCD_voidInit();
     a16:	0e 94 b7 01 	call	0x36e	; 0x36e <CLCD_voidInit>
	u8 Local_u8Counter3;

	/*Location1 in CGRAM For Hamoksha
	 Location2 in CGRAM For BALL
	 */
	u8 Hamoksha[7]={
     a1a:	ce 01       	movw	r24, r28
     a1c:	87 53       	subi	r24, 0x37	; 55
     a1e:	9f 4f       	sbci	r25, 0xFF	; 255
     a20:	27 e0       	ldi	r18, 0x07	; 7
     a22:	e0 eb       	ldi	r30, 0xB0	; 176
     a24:	f0 e0       	ldi	r31, 0x00	; 0
     a26:	dc 01       	movw	r26, r24
     a28:	01 90       	ld	r0, Z+
     a2a:	0d 92       	st	X+, r0
     a2c:	2a 95       	dec	r18
     a2e:	e1 f7       	brne	.-8      	; 0xa28 <main+0x30>
					0b00000100,
					0b00011111,
					0b00000100,
					0b11111111
								};
	u8 Hamoksha_down[7]={
     a30:	ce 01       	movw	r24, r28
     a32:	80 53       	subi	r24, 0x30	; 48
     a34:	9f 4f       	sbci	r25, 0xFF	; 255
     a36:	27 e0       	ldi	r18, 0x07	; 7
     a38:	e7 eb       	ldi	r30, 0xB7	; 183
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	dc 01       	movw	r26, r24
     a3e:	01 90       	ld	r0, Z+
     a40:	0d 92       	st	X+, r0
     a42:	2a 95       	dec	r18
     a44:	e1 f7       	brne	.-8      	; 0xa3e <main+0x46>
			0b00000100,
			0b00011111,
			0b00000100,
			0b00011000
						};
	u8 Hamoksha_up[7]={
     a46:	ce 01       	movw	r24, r28
     a48:	89 52       	subi	r24, 0x29	; 41
     a4a:	9f 4f       	sbci	r25, 0xFF	; 255
     a4c:	27 e0       	ldi	r18, 0x07	; 7
     a4e:	ee eb       	ldi	r30, 0xBE	; 190
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	dc 01       	movw	r26, r24
     a54:	01 90       	ld	r0, Z+
     a56:	0d 92       	st	X+, r0
     a58:	2a 95       	dec	r18
     a5a:	e1 f7       	brne	.-8      	; 0xa54 <main+0x5c>
			0b00000100,
			0b00011111,
			0b00000100,
			0b00000011
						};
	u8 BALL[7]={
     a5c:	ce 01       	movw	r24, r28
     a5e:	82 52       	subi	r24, 0x22	; 34
     a60:	9f 4f       	sbci	r25, 0xFF	; 255
     a62:	27 e0       	ldi	r18, 0x07	; 7
     a64:	e5 ec       	ldi	r30, 0xC5	; 197
     a66:	f0 e0       	ldi	r31, 0x00	; 0
     a68:	dc 01       	movw	r26, r24
     a6a:	01 90       	ld	r0, Z+
     a6c:	0d 92       	st	X+, r0
     a6e:	2a 95       	dec	r18
     a70:	e1 f7       	brne	.-8      	; 0xa6a <main+0x72>
								0b00000110,
								0b00000000,
								0b00000000,
											};

	u8 BALL_dowm[7]={
     a72:	ce 01       	movw	r24, r28
     a74:	8b 51       	subi	r24, 0x1B	; 27
     a76:	9f 4f       	sbci	r25, 0xFF	; 255
     a78:	27 e0       	ldi	r18, 0x07	; 7
     a7a:	ec ec       	ldi	r30, 0xCC	; 204
     a7c:	f0 e0       	ldi	r31, 0x00	; 0
     a7e:	dc 01       	movw	r26, r24
     a80:	01 90       	ld	r0, Z+
     a82:	0d 92       	st	X+, r0
     a84:	2a 95       	dec	r18
     a86:	e1 f7       	brne	.-8      	; 0xa80 <main+0x88>
								0b00000000,
								0b00000110,
								0b00000110,
								0b00000000,
											};
	u8 BALL_up[8]={
     a88:	ce 01       	movw	r24, r28
     a8a:	84 51       	subi	r24, 0x14	; 20
     a8c:	9f 4f       	sbci	r25, 0xFF	; 255
     a8e:	28 e0       	ldi	r18, 0x08	; 8
     a90:	e3 ed       	ldi	r30, 0xD3	; 211
     a92:	f0 e0       	ldi	r31, 0x00	; 0
     a94:	dc 01       	movw	r26, r24
     a96:	01 90       	ld	r0, Z+
     a98:	0d 92       	st	X+, r0
     a9a:	2a 95       	dec	r18
     a9c:	e1 f7       	brne	.-8      	; 0xa96 <main+0x9e>
			0b00000000,
			0b00000000,
			0b00000000
						};

	u8 dance1[7]={
     a9e:	ce 01       	movw	r24, r28
     aa0:	8c 50       	subi	r24, 0x0C	; 12
     aa2:	9f 4f       	sbci	r25, 0xFF	; 255
     aa4:	27 e0       	ldi	r18, 0x07	; 7
     aa6:	eb ed       	ldi	r30, 0xDB	; 219
     aa8:	f0 e0       	ldi	r31, 0x00	; 0
     aaa:	dc 01       	movw	r26, r24
     aac:	01 90       	ld	r0, Z+
     aae:	0d 92       	st	X+, r0
     ab0:	2a 95       	dec	r18
     ab2:	e1 f7       	brne	.-8      	; 0xaac <main+0xb4>
					0b00001010,
					0b00001010,
					0b00010011,
					0b00001010
								};
	u8 dance2[7]={
     ab4:	ce 01       	movw	r24, r28
     ab6:	85 50       	subi	r24, 0x05	; 5
     ab8:	9f 4f       	sbci	r25, 0xFF	; 255
     aba:	27 e0       	ldi	r18, 0x07	; 7
     abc:	e2 ee       	ldi	r30, 0xE2	; 226
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	dc 01       	movw	r26, r24
     ac2:	01 90       	ld	r0, Z+
     ac4:	0d 92       	st	X+, r0
     ac6:	2a 95       	dec	r18
     ac8:	e1 f7       	brne	.-8      	; 0xac2 <main+0xca>
					0b00001110,
					0b00010101,
					0b00011011
								};

	u8 gun[7]={
     aca:	ce 01       	movw	r24, r28
     acc:	8e 5f       	subi	r24, 0xFE	; 254
     ace:	9e 4f       	sbci	r25, 0xFE	; 254
     ad0:	27 e0       	ldi	r18, 0x07	; 7
     ad2:	e9 ee       	ldi	r30, 0xE9	; 233
     ad4:	f0 e0       	ldi	r31, 0x00	; 0
     ad6:	dc 01       	movw	r26, r24
     ad8:	01 90       	ld	r0, Z+
     ada:	0d 92       	st	X+, r0
     adc:	2a 95       	dec	r18
     ade:	e1 f7       	brne	.-8      	; 0xad8 <main+0xe0>
					0b00011000,
					0b00011000,
					0b00011000,
					0b00011000
								};
	u8 bullet[7]={
     ae0:	ce 01       	movw	r24, r28
     ae2:	87 5f       	subi	r24, 0xF7	; 247
     ae4:	9e 4f       	sbci	r25, 0xFE	; 254
     ae6:	27 e0       	ldi	r18, 0x07	; 7
     ae8:	e0 ef       	ldi	r30, 0xF0	; 240
     aea:	f0 e0       	ldi	r31, 0x00	; 0
     aec:	dc 01       	movw	r26, r24
     aee:	01 90       	ld	r0, Z+
     af0:	0d 92       	st	X+, r0
     af2:	2a 95       	dec	r18
     af4:	e1 f7       	brne	.-8      	; 0xaee <main+0xf6>
					0b00000100,
					0b00000000,
					0b00000000
								};

	u8 Hamoksha_Died[7]={
     af6:	ce 01       	movw	r24, r28
     af8:	80 5f       	subi	r24, 0xF0	; 240
     afa:	9e 4f       	sbci	r25, 0xFE	; 254
     afc:	27 e0       	ldi	r18, 0x07	; 7
     afe:	e7 ef       	ldi	r30, 0xF7	; 247
     b00:	f0 e0       	ldi	r31, 0x00	; 0
     b02:	dc 01       	movw	r26, r24
     b04:	01 90       	ld	r0, Z+
     b06:	0d 92       	st	X+, r0
     b08:	2a 95       	dec	r18
     b0a:	e1 f7       	brne	.-8      	; 0xb04 <main+0x10c>
										};


	while(1)
	{
		CLCD_voidSendString("I am Hamoksha");
     b0c:	80 e6       	ldi	r24, 0x60	; 96
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	0e 94 62 02 	call	0x4c4	; 0x4c4 <CLCD_voidSendString>
				CLCD_voidWriteSpecialCharacter(&Hamoksha,0,0,15);
     b14:	ce 01       	movw	r24, r28
     b16:	87 53       	subi	r24, 0x37	; 55
     b18:	9f 4f       	sbci	r25, 0xFF	; 255
     b1a:	2f e0       	ldi	r18, 0x0F	; 15
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	60 e0       	ldi	r22, 0x00	; 0
     b20:	0e 94 ae 02 	call	0x55c	; 0x55c <CLCD_voidWriteSpecialCharacter>
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	aa e7       	ldi	r26, 0x7A	; 122
     b2a:	b4 e4       	ldi	r27, 0x44	; 68
     b2c:	8b 8b       	std	Y+19, r24	; 0x13
     b2e:	9c 8b       	std	Y+20, r25	; 0x14
     b30:	ad 8b       	std	Y+21, r26	; 0x15
     b32:	be 8b       	std	Y+22, r27	; 0x16

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b34:	20 e0       	ldi	r18, 0x00	; 0
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	4a ef       	ldi	r20, 0xFA	; 250
     b3a:	54 e4       	ldi	r21, 0x44	; 68
     b3c:	6b 89       	ldd	r22, Y+19	; 0x13
     b3e:	7c 89       	ldd	r23, Y+20	; 0x14
     b40:	8d 89       	ldd	r24, Y+21	; 0x15
     b42:	9e 89       	ldd	r25, Y+22	; 0x16
     b44:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
     b48:	c1 5b       	subi	r28, 0xB1	; 177
     b4a:	de 4f       	sbci	r29, 0xFE	; 254
     b4c:	68 83       	st	Y, r22
     b4e:	79 83       	std	Y+1, r23	; 0x01
     b50:	8a 83       	std	Y+2, r24	; 0x02
     b52:	9b 83       	std	Y+3, r25	; 0x03
     b54:	cf 54       	subi	r28, 0x4F	; 79
     b56:	d1 40       	sbci	r29, 0x01	; 1
     b58:	c1 5b       	subi	r28, 0xB1	; 177
     b5a:	de 4f       	sbci	r29, 0xFE	; 254
     b5c:	88 81       	ld	r24, Y
     b5e:	99 81       	ldd	r25, Y+1	; 0x01
     b60:	aa 81       	ldd	r26, Y+2	; 0x02
     b62:	bb 81       	ldd	r27, Y+3	; 0x03
     b64:	cf 54       	subi	r28, 0x4F	; 79
     b66:	d1 40       	sbci	r29, 0x01	; 1
     b68:	8f 8b       	std	Y+23, r24	; 0x17
     b6a:	98 8f       	std	Y+24, r25	; 0x18
     b6c:	a9 8f       	std	Y+25, r26	; 0x19
     b6e:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
     b70:	20 e0       	ldi	r18, 0x00	; 0
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	40 e8       	ldi	r20, 0x80	; 128
     b76:	5f e3       	ldi	r21, 0x3F	; 63
     b78:	6f 89       	ldd	r22, Y+23	; 0x17
     b7a:	78 8d       	ldd	r23, Y+24	; 0x18
     b7c:	89 8d       	ldd	r24, Y+25	; 0x19
     b7e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b80:	0e 94 ba 13 	call	0x2774	; 0x2774 <__cmpsf2>
     b84:	88 23       	and	r24, r24
     b86:	2c f4       	brge	.+10     	; 0xb92 <main+0x19a>
		__ticks = 1;
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	9c 8f       	std	Y+28, r25	; 0x1c
     b8e:	8b 8f       	std	Y+27, r24	; 0x1b
     b90:	75 c0       	rjmp	.+234    	; 0xc7c <main+0x284>
	else if (__tmp > 65535)
     b92:	20 e0       	ldi	r18, 0x00	; 0
     b94:	3f ef       	ldi	r19, 0xFF	; 255
     b96:	4f e7       	ldi	r20, 0x7F	; 127
     b98:	57 e4       	ldi	r21, 0x47	; 71
     b9a:	6f 89       	ldd	r22, Y+23	; 0x17
     b9c:	78 8d       	ldd	r23, Y+24	; 0x18
     b9e:	89 8d       	ldd	r24, Y+25	; 0x19
     ba0:	9a 8d       	ldd	r25, Y+26	; 0x1a
     ba2:	0e 94 3b 14 	call	0x2876	; 0x2876 <__gesf2>
     ba6:	18 16       	cp	r1, r24
     ba8:	0c f0       	brlt	.+2      	; 0xbac <main+0x1b4>
     baa:	52 c0       	rjmp	.+164    	; 0xc50 <main+0x258>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bac:	20 e0       	ldi	r18, 0x00	; 0
     bae:	30 e0       	ldi	r19, 0x00	; 0
     bb0:	40 e2       	ldi	r20, 0x20	; 32
     bb2:	51 e4       	ldi	r21, 0x41	; 65
     bb4:	6b 89       	ldd	r22, Y+19	; 0x13
     bb6:	7c 89       	ldd	r23, Y+20	; 0x14
     bb8:	8d 89       	ldd	r24, Y+21	; 0x15
     bba:	9e 89       	ldd	r25, Y+22	; 0x16
     bbc:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
     bc0:	cd 5a       	subi	r28, 0xAD	; 173
     bc2:	de 4f       	sbci	r29, 0xFE	; 254
     bc4:	68 83       	st	Y, r22
     bc6:	79 83       	std	Y+1, r23	; 0x01
     bc8:	8a 83       	std	Y+2, r24	; 0x02
     bca:	9b 83       	std	Y+3, r25	; 0x03
     bcc:	c3 55       	subi	r28, 0x53	; 83
     bce:	d1 40       	sbci	r29, 0x01	; 1
     bd0:	cd 5a       	subi	r28, 0xAD	; 173
     bd2:	de 4f       	sbci	r29, 0xFE	; 254
     bd4:	88 81       	ld	r24, Y
     bd6:	99 81       	ldd	r25, Y+1	; 0x01
     bd8:	aa 81       	ldd	r26, Y+2	; 0x02
     bda:	bb 81       	ldd	r27, Y+3	; 0x03
     bdc:	c3 55       	subi	r28, 0x53	; 83
     bde:	d1 40       	sbci	r29, 0x01	; 1
     be0:	c5 5e       	subi	r28, 0xE5	; 229
     be2:	de 4f       	sbci	r29, 0xFE	; 254
     be4:	88 83       	st	Y, r24
     be6:	99 83       	std	Y+1, r25	; 0x01
     be8:	aa 83       	std	Y+2, r26	; 0x02
     bea:	bb 83       	std	Y+3, r27	; 0x03
     bec:	cb 51       	subi	r28, 0x1B	; 27
     bee:	d1 40       	sbci	r29, 0x01	; 1
     bf0:	c5 5e       	subi	r28, 0xE5	; 229
     bf2:	de 4f       	sbci	r29, 0xFE	; 254
     bf4:	68 81       	ld	r22, Y
     bf6:	79 81       	ldd	r23, Y+1	; 0x01
     bf8:	8a 81       	ldd	r24, Y+2	; 0x02
     bfa:	9b 81       	ldd	r25, Y+3	; 0x03
     bfc:	cb 51       	subi	r28, 0x1B	; 27
     bfe:	d1 40       	sbci	r29, 0x01	; 1
     c00:	0e 94 bf 13 	call	0x277e	; 0x277e <__fixunssfsi>
     c04:	c9 5a       	subi	r28, 0xA9	; 169
     c06:	de 4f       	sbci	r29, 0xFE	; 254
     c08:	68 83       	st	Y, r22
     c0a:	79 83       	std	Y+1, r23	; 0x01
     c0c:	8a 83       	std	Y+2, r24	; 0x02
     c0e:	9b 83       	std	Y+3, r25	; 0x03
     c10:	c7 55       	subi	r28, 0x57	; 87
     c12:	d1 40       	sbci	r29, 0x01	; 1
     c14:	c9 5a       	subi	r28, 0xA9	; 169
     c16:	de 4f       	sbci	r29, 0xFE	; 254
     c18:	a8 81       	ld	r26, Y
     c1a:	b9 81       	ldd	r27, Y+1	; 0x01
     c1c:	c7 55       	subi	r28, 0x57	; 87
     c1e:	d1 40       	sbci	r29, 0x01	; 1
     c20:	bc 8f       	std	Y+28, r27	; 0x1c
     c22:	ab 8f       	std	Y+27, r26	; 0x1b
		while(__ticks)
     c24:	10 c0       	rjmp	.+32     	; 0xc46 <main+0x24e>
     c26:	88 ec       	ldi	r24, 0xC8	; 200
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	9e 8f       	std	Y+30, r25	; 0x1e
     c2c:	8d 8f       	std	Y+29, r24	; 0x1d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c2e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c30:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c32:	01 97       	sbiw	r24, 0x01	; 1
     c34:	f1 f7       	brne	.-4      	; 0xc32 <main+0x23a>
     c36:	9e 8f       	std	Y+30, r25	; 0x1e
     c38:	8d 8f       	std	Y+29, r24	; 0x1d
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
     c3a:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c40:	01 97       	sbiw	r24, 0x01	; 1
     c42:	9c 8f       	std	Y+28, r25	; 0x1c
     c44:	8b 8f       	std	Y+27, r24	; 0x1b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c46:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c48:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c4a:	89 2b       	or	r24, r25
     c4c:	61 f7       	brne	.-40     	; 0xc26 <main+0x22e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
     c4e:	21 c0       	rjmp	.+66     	; 0xc92 <main+0x29a>
	}
	else
		__ticks = (uint16_t)__tmp;
     c50:	6f 89       	ldd	r22, Y+23	; 0x17
     c52:	78 8d       	ldd	r23, Y+24	; 0x18
     c54:	89 8d       	ldd	r24, Y+25	; 0x19
     c56:	9a 8d       	ldd	r25, Y+26	; 0x1a
     c58:	0e 94 bf 13 	call	0x277e	; 0x277e <__fixunssfsi>
     c5c:	c5 5a       	subi	r28, 0xA5	; 165
     c5e:	de 4f       	sbci	r29, 0xFE	; 254
     c60:	68 83       	st	Y, r22
     c62:	79 83       	std	Y+1, r23	; 0x01
     c64:	8a 83       	std	Y+2, r24	; 0x02
     c66:	9b 83       	std	Y+3, r25	; 0x03
     c68:	cb 55       	subi	r28, 0x5B	; 91
     c6a:	d1 40       	sbci	r29, 0x01	; 1
     c6c:	c5 5a       	subi	r28, 0xA5	; 165
     c6e:	de 4f       	sbci	r29, 0xFE	; 254
     c70:	e8 81       	ld	r30, Y
     c72:	f9 81       	ldd	r31, Y+1	; 0x01
     c74:	cb 55       	subi	r28, 0x5B	; 91
     c76:	d1 40       	sbci	r29, 0x01	; 1
     c78:	fc 8f       	std	Y+28, r31	; 0x1c
     c7a:	eb 8f       	std	Y+27, r30	; 0x1b
     c7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c80:	98 a3       	std	Y+32, r25	; 0x20
     c82:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c84:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c86:	98 a1       	ldd	r25, Y+32	; 0x20
     c88:	01 97       	sbiw	r24, 0x01	; 1
     c8a:	f1 f7       	brne	.-4      	; 0xc88 <main+0x290>
     c8c:	98 a3       	std	Y+32, r25	; 0x20
     c8e:	8f 8f       	std	Y+31, r24	; 0x1f
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
     c90:	00 00       	nop
				_delay_ms(1000);

					/*clear The screen*/
				CLCD_voidSendCommand(0b00000001);
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	0e 94 41 00 	call	0x82	; 0x82 <CLCD_voidSendCommand>

				CLCD_voidSendString("I PlayFootball");
     c98:	8e e6       	ldi	r24, 0x6E	; 110
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	0e 94 62 02 	call	0x4c4	; 0x4c4 <CLCD_voidSendString>
				CLCD_voidWriteSpecialCharacter(&Hamoksha,0,0,15);
     ca0:	ce 01       	movw	r24, r28
     ca2:	87 53       	subi	r24, 0x37	; 55
     ca4:	9f 4f       	sbci	r25, 0xFF	; 255
     ca6:	2f e0       	ldi	r18, 0x0F	; 15
     ca8:	40 e0       	ldi	r20, 0x00	; 0
     caa:	60 e0       	ldi	r22, 0x00	; 0
     cac:	0e 94 ae 02 	call	0x55c	; 0x55c <CLCD_voidWriteSpecialCharacter>
				CLCD_voidWriteSpecialCharacter(&BALL,1,0,14);
     cb0:	ce 01       	movw	r24, r28
     cb2:	82 52       	subi	r24, 0x22	; 34
     cb4:	9f 4f       	sbci	r25, 0xFF	; 255
     cb6:	2e e0       	ldi	r18, 0x0E	; 14
     cb8:	40 e0       	ldi	r20, 0x00	; 0
     cba:	61 e0       	ldi	r22, 0x01	; 1
     cbc:	0e 94 ae 02 	call	0x55c	; 0x55c <CLCD_voidWriteSpecialCharacter>
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	aa e7       	ldi	r26, 0x7A	; 122
     cc6:	b4 e4       	ldi	r27, 0x44	; 68
     cc8:	8d 83       	std	Y+5, r24	; 0x05
     cca:	9e 83       	std	Y+6, r25	; 0x06
     ccc:	af 83       	std	Y+7, r26	; 0x07
     cce:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     cd0:	20 e0       	ldi	r18, 0x00	; 0
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	4a ef       	ldi	r20, 0xFA	; 250
     cd6:	54 e4       	ldi	r21, 0x44	; 68
     cd8:	6d 81       	ldd	r22, Y+5	; 0x05
     cda:	7e 81       	ldd	r23, Y+6	; 0x06
     cdc:	8f 81       	ldd	r24, Y+7	; 0x07
     cde:	98 85       	ldd	r25, Y+8	; 0x08
     ce0:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
     ce4:	c1 5a       	subi	r28, 0xA1	; 161
     ce6:	de 4f       	sbci	r29, 0xFE	; 254
     ce8:	68 83       	st	Y, r22
     cea:	79 83       	std	Y+1, r23	; 0x01
     cec:	8a 83       	std	Y+2, r24	; 0x02
     cee:	9b 83       	std	Y+3, r25	; 0x03
     cf0:	cf 55       	subi	r28, 0x5F	; 95
     cf2:	d1 40       	sbci	r29, 0x01	; 1
     cf4:	c1 5a       	subi	r28, 0xA1	; 161
     cf6:	de 4f       	sbci	r29, 0xFE	; 254
     cf8:	88 81       	ld	r24, Y
     cfa:	99 81       	ldd	r25, Y+1	; 0x01
     cfc:	aa 81       	ldd	r26, Y+2	; 0x02
     cfe:	bb 81       	ldd	r27, Y+3	; 0x03
     d00:	cf 55       	subi	r28, 0x5F	; 95
     d02:	d1 40       	sbci	r29, 0x01	; 1
     d04:	89 87       	std	Y+9, r24	; 0x09
     d06:	9a 87       	std	Y+10, r25	; 0x0a
     d08:	ab 87       	std	Y+11, r26	; 0x0b
     d0a:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     d0c:	20 e0       	ldi	r18, 0x00	; 0
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	40 e8       	ldi	r20, 0x80	; 128
     d12:	5f e3       	ldi	r21, 0x3F	; 63
     d14:	69 85       	ldd	r22, Y+9	; 0x09
     d16:	7a 85       	ldd	r23, Y+10	; 0x0a
     d18:	8b 85       	ldd	r24, Y+11	; 0x0b
     d1a:	9c 85       	ldd	r25, Y+12	; 0x0c
     d1c:	0e 94 ba 13 	call	0x2774	; 0x2774 <__cmpsf2>
     d20:	88 23       	and	r24, r24
     d22:	2c f4       	brge	.+10     	; 0xd2e <main+0x336>
		__ticks = 1;
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	9e 87       	std	Y+14, r25	; 0x0e
     d2a:	8d 87       	std	Y+13, r24	; 0x0d
     d2c:	75 c0       	rjmp	.+234    	; 0xe18 <main+0x420>
	else if (__tmp > 65535)
     d2e:	20 e0       	ldi	r18, 0x00	; 0
     d30:	3f ef       	ldi	r19, 0xFF	; 255
     d32:	4f e7       	ldi	r20, 0x7F	; 127
     d34:	57 e4       	ldi	r21, 0x47	; 71
     d36:	69 85       	ldd	r22, Y+9	; 0x09
     d38:	7a 85       	ldd	r23, Y+10	; 0x0a
     d3a:	8b 85       	ldd	r24, Y+11	; 0x0b
     d3c:	9c 85       	ldd	r25, Y+12	; 0x0c
     d3e:	0e 94 3b 14 	call	0x2876	; 0x2876 <__gesf2>
     d42:	18 16       	cp	r1, r24
     d44:	0c f0       	brlt	.+2      	; 0xd48 <main+0x350>
     d46:	52 c0       	rjmp	.+164    	; 0xdec <main+0x3f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d48:	20 e0       	ldi	r18, 0x00	; 0
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	40 e2       	ldi	r20, 0x20	; 32
     d4e:	51 e4       	ldi	r21, 0x41	; 65
     d50:	6d 81       	ldd	r22, Y+5	; 0x05
     d52:	7e 81       	ldd	r23, Y+6	; 0x06
     d54:	8f 81       	ldd	r24, Y+7	; 0x07
     d56:	98 85       	ldd	r25, Y+8	; 0x08
     d58:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
     d5c:	cd 59       	subi	r28, 0x9D	; 157
     d5e:	de 4f       	sbci	r29, 0xFE	; 254
     d60:	68 83       	st	Y, r22
     d62:	79 83       	std	Y+1, r23	; 0x01
     d64:	8a 83       	std	Y+2, r24	; 0x02
     d66:	9b 83       	std	Y+3, r25	; 0x03
     d68:	c3 56       	subi	r28, 0x63	; 99
     d6a:	d1 40       	sbci	r29, 0x01	; 1
     d6c:	cd 59       	subi	r28, 0x9D	; 157
     d6e:	de 4f       	sbci	r29, 0xFE	; 254
     d70:	88 81       	ld	r24, Y
     d72:	99 81       	ldd	r25, Y+1	; 0x01
     d74:	aa 81       	ldd	r26, Y+2	; 0x02
     d76:	bb 81       	ldd	r27, Y+3	; 0x03
     d78:	c3 56       	subi	r28, 0x63	; 99
     d7a:	d1 40       	sbci	r29, 0x01	; 1
     d7c:	c9 5e       	subi	r28, 0xE9	; 233
     d7e:	de 4f       	sbci	r29, 0xFE	; 254
     d80:	88 83       	st	Y, r24
     d82:	99 83       	std	Y+1, r25	; 0x01
     d84:	aa 83       	std	Y+2, r26	; 0x02
     d86:	bb 83       	std	Y+3, r27	; 0x03
     d88:	c7 51       	subi	r28, 0x17	; 23
     d8a:	d1 40       	sbci	r29, 0x01	; 1
     d8c:	c9 5e       	subi	r28, 0xE9	; 233
     d8e:	de 4f       	sbci	r29, 0xFE	; 254
     d90:	68 81       	ld	r22, Y
     d92:	79 81       	ldd	r23, Y+1	; 0x01
     d94:	8a 81       	ldd	r24, Y+2	; 0x02
     d96:	9b 81       	ldd	r25, Y+3	; 0x03
     d98:	c7 51       	subi	r28, 0x17	; 23
     d9a:	d1 40       	sbci	r29, 0x01	; 1
     d9c:	0e 94 bf 13 	call	0x277e	; 0x277e <__fixunssfsi>
     da0:	c9 59       	subi	r28, 0x99	; 153
     da2:	de 4f       	sbci	r29, 0xFE	; 254
     da4:	68 83       	st	Y, r22
     da6:	79 83       	std	Y+1, r23	; 0x01
     da8:	8a 83       	std	Y+2, r24	; 0x02
     daa:	9b 83       	std	Y+3, r25	; 0x03
     dac:	c7 56       	subi	r28, 0x67	; 103
     dae:	d1 40       	sbci	r29, 0x01	; 1
     db0:	c9 59       	subi	r28, 0x99	; 153
     db2:	de 4f       	sbci	r29, 0xFE	; 254
     db4:	a8 81       	ld	r26, Y
     db6:	b9 81       	ldd	r27, Y+1	; 0x01
     db8:	c7 56       	subi	r28, 0x67	; 103
     dba:	d1 40       	sbci	r29, 0x01	; 1
     dbc:	be 87       	std	Y+14, r27	; 0x0e
     dbe:	ad 87       	std	Y+13, r26	; 0x0d
		while(__ticks)
     dc0:	10 c0       	rjmp	.+32     	; 0xde2 <main+0x3ea>
     dc2:	88 ec       	ldi	r24, 0xC8	; 200
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	98 8b       	std	Y+16, r25	; 0x10
     dc8:	8f 87       	std	Y+15, r24	; 0x0f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dca:	8f 85       	ldd	r24, Y+15	; 0x0f
     dcc:	98 89       	ldd	r25, Y+16	; 0x10
     dce:	01 97       	sbiw	r24, 0x01	; 1
     dd0:	f1 f7       	brne	.-4      	; 0xdce <main+0x3d6>
     dd2:	98 8b       	std	Y+16, r25	; 0x10
     dd4:	8f 87       	std	Y+15, r24	; 0x0f
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
     dd6:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dd8:	8d 85       	ldd	r24, Y+13	; 0x0d
     dda:	9e 85       	ldd	r25, Y+14	; 0x0e
     ddc:	01 97       	sbiw	r24, 0x01	; 1
     dde:	9e 87       	std	Y+14, r25	; 0x0e
     de0:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     de2:	8d 85       	ldd	r24, Y+13	; 0x0d
     de4:	9e 85       	ldd	r25, Y+14	; 0x0e
     de6:	89 2b       	or	r24, r25
     de8:	61 f7       	brne	.-40     	; 0xdc2 <main+0x3ca>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
     dea:	21 c0       	rjmp	.+66     	; 0xe2e <main+0x436>
	}
	else
		__ticks = (uint16_t)__tmp;
     dec:	69 85       	ldd	r22, Y+9	; 0x09
     dee:	7a 85       	ldd	r23, Y+10	; 0x0a
     df0:	8b 85       	ldd	r24, Y+11	; 0x0b
     df2:	9c 85       	ldd	r25, Y+12	; 0x0c
     df4:	0e 94 bf 13 	call	0x277e	; 0x277e <__fixunssfsi>
     df8:	c5 59       	subi	r28, 0x95	; 149
     dfa:	de 4f       	sbci	r29, 0xFE	; 254
     dfc:	68 83       	st	Y, r22
     dfe:	79 83       	std	Y+1, r23	; 0x01
     e00:	8a 83       	std	Y+2, r24	; 0x02
     e02:	9b 83       	std	Y+3, r25	; 0x03
     e04:	cb 56       	subi	r28, 0x6B	; 107
     e06:	d1 40       	sbci	r29, 0x01	; 1
     e08:	c5 59       	subi	r28, 0x95	; 149
     e0a:	de 4f       	sbci	r29, 0xFE	; 254
     e0c:	e8 81       	ld	r30, Y
     e0e:	f9 81       	ldd	r31, Y+1	; 0x01
     e10:	cb 56       	subi	r28, 0x6B	; 107
     e12:	d1 40       	sbci	r29, 0x01	; 1
     e14:	fe 87       	std	Y+14, r31	; 0x0e
     e16:	ed 87       	std	Y+13, r30	; 0x0d
     e18:	8d 85       	ldd	r24, Y+13	; 0x0d
     e1a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e1c:	9a 8b       	std	Y+18, r25	; 0x12
     e1e:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e20:	89 89       	ldd	r24, Y+17	; 0x11
     e22:	9a 89       	ldd	r25, Y+18	; 0x12
     e24:	01 97       	sbiw	r24, 0x01	; 1
     e26:	f1 f7       	brne	.-4      	; 0xe24 <main+0x42c>
     e28:	9a 8b       	std	Y+18, r25	; 0x12
     e2a:	89 8b       	std	Y+17, r24	; 0x11
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
     e2c:	00 00       	nop
				_delay_ms(1000);

		for(Local_u8Counter=0;Local_u8Counter<10;Local_u8Counter++)
     e2e:	19 82       	std	Y+1, r1	; 0x01
     e30:	91 c1       	rjmp	.+802    	; 0x1154 <main+0x75c>
		{
			CLCD_voidWriteSpecialCharacter(&Hamoksha_up,0,0,15);
     e32:	ce 01       	movw	r24, r28
     e34:	89 52       	subi	r24, 0x29	; 41
     e36:	9f 4f       	sbci	r25, 0xFF	; 255
     e38:	2f e0       	ldi	r18, 0x0F	; 15
     e3a:	40 e0       	ldi	r20, 0x00	; 0
     e3c:	60 e0       	ldi	r22, 0x00	; 0
     e3e:	0e 94 ae 02 	call	0x55c	; 0x55c <CLCD_voidWriteSpecialCharacter>
			CLCD_voidWriteSpecialCharacter(&BALL_up,1,0,14);
     e42:	ce 01       	movw	r24, r28
     e44:	84 51       	subi	r24, 0x14	; 20
     e46:	9f 4f       	sbci	r25, 0xFF	; 255
     e48:	2e e0       	ldi	r18, 0x0E	; 14
     e4a:	40 e0       	ldi	r20, 0x00	; 0
     e4c:	61 e0       	ldi	r22, 0x01	; 1
     e4e:	0e 94 ae 02 	call	0x55c	; 0x55c <CLCD_voidWriteSpecialCharacter>
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	a0 ea       	ldi	r26, 0xA0	; 160
     e58:	b2 e4       	ldi	r27, 0x42	; 66
     e5a:	8f a7       	std	Y+47, r24	; 0x2f
     e5c:	98 ab       	std	Y+48, r25	; 0x30
     e5e:	a9 ab       	std	Y+49, r26	; 0x31
     e60:	ba ab       	std	Y+50, r27	; 0x32

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     e62:	20 e0       	ldi	r18, 0x00	; 0
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	4a ef       	ldi	r20, 0xFA	; 250
     e68:	54 e4       	ldi	r21, 0x44	; 68
     e6a:	6f a5       	ldd	r22, Y+47	; 0x2f
     e6c:	78 a9       	ldd	r23, Y+48	; 0x30
     e6e:	89 a9       	ldd	r24, Y+49	; 0x31
     e70:	9a a9       	ldd	r25, Y+50	; 0x32
     e72:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
     e76:	c1 59       	subi	r28, 0x91	; 145
     e78:	de 4f       	sbci	r29, 0xFE	; 254
     e7a:	68 83       	st	Y, r22
     e7c:	79 83       	std	Y+1, r23	; 0x01
     e7e:	8a 83       	std	Y+2, r24	; 0x02
     e80:	9b 83       	std	Y+3, r25	; 0x03
     e82:	cf 56       	subi	r28, 0x6F	; 111
     e84:	d1 40       	sbci	r29, 0x01	; 1
     e86:	c1 59       	subi	r28, 0x91	; 145
     e88:	de 4f       	sbci	r29, 0xFE	; 254
     e8a:	88 81       	ld	r24, Y
     e8c:	99 81       	ldd	r25, Y+1	; 0x01
     e8e:	aa 81       	ldd	r26, Y+2	; 0x02
     e90:	bb 81       	ldd	r27, Y+3	; 0x03
     e92:	cf 56       	subi	r28, 0x6F	; 111
     e94:	d1 40       	sbci	r29, 0x01	; 1
     e96:	8b ab       	std	Y+51, r24	; 0x33
     e98:	9c ab       	std	Y+52, r25	; 0x34
     e9a:	ad ab       	std	Y+53, r26	; 0x35
     e9c:	be ab       	std	Y+54, r27	; 0x36
	if (__tmp < 1.0)
     e9e:	20 e0       	ldi	r18, 0x00	; 0
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	40 e8       	ldi	r20, 0x80	; 128
     ea4:	5f e3       	ldi	r21, 0x3F	; 63
     ea6:	6b a9       	ldd	r22, Y+51	; 0x33
     ea8:	7c a9       	ldd	r23, Y+52	; 0x34
     eaa:	8d a9       	ldd	r24, Y+53	; 0x35
     eac:	9e a9       	ldd	r25, Y+54	; 0x36
     eae:	0e 94 ba 13 	call	0x2774	; 0x2774 <__cmpsf2>
     eb2:	88 23       	and	r24, r24
     eb4:	2c f4       	brge	.+10     	; 0xec0 <main+0x4c8>
		__ticks = 1;
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	98 af       	std	Y+56, r25	; 0x38
     ebc:	8f ab       	std	Y+55, r24	; 0x37
     ebe:	75 c0       	rjmp	.+234    	; 0xfaa <main+0x5b2>
	else if (__tmp > 65535)
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	3f ef       	ldi	r19, 0xFF	; 255
     ec4:	4f e7       	ldi	r20, 0x7F	; 127
     ec6:	57 e4       	ldi	r21, 0x47	; 71
     ec8:	6b a9       	ldd	r22, Y+51	; 0x33
     eca:	7c a9       	ldd	r23, Y+52	; 0x34
     ecc:	8d a9       	ldd	r24, Y+53	; 0x35
     ece:	9e a9       	ldd	r25, Y+54	; 0x36
     ed0:	0e 94 3b 14 	call	0x2876	; 0x2876 <__gesf2>
     ed4:	18 16       	cp	r1, r24
     ed6:	0c f0       	brlt	.+2      	; 0xeda <main+0x4e2>
     ed8:	52 c0       	rjmp	.+164    	; 0xf7e <main+0x586>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eda:	20 e0       	ldi	r18, 0x00	; 0
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	40 e2       	ldi	r20, 0x20	; 32
     ee0:	51 e4       	ldi	r21, 0x41	; 65
     ee2:	6f a5       	ldd	r22, Y+47	; 0x2f
     ee4:	78 a9       	ldd	r23, Y+48	; 0x30
     ee6:	89 a9       	ldd	r24, Y+49	; 0x31
     ee8:	9a a9       	ldd	r25, Y+50	; 0x32
     eea:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
     eee:	cd 58       	subi	r28, 0x8D	; 141
     ef0:	de 4f       	sbci	r29, 0xFE	; 254
     ef2:	68 83       	st	Y, r22
     ef4:	79 83       	std	Y+1, r23	; 0x01
     ef6:	8a 83       	std	Y+2, r24	; 0x02
     ef8:	9b 83       	std	Y+3, r25	; 0x03
     efa:	c3 57       	subi	r28, 0x73	; 115
     efc:	d1 40       	sbci	r29, 0x01	; 1
     efe:	cd 58       	subi	r28, 0x8D	; 141
     f00:	de 4f       	sbci	r29, 0xFE	; 254
     f02:	88 81       	ld	r24, Y
     f04:	99 81       	ldd	r25, Y+1	; 0x01
     f06:	aa 81       	ldd	r26, Y+2	; 0x02
     f08:	bb 81       	ldd	r27, Y+3	; 0x03
     f0a:	c3 57       	subi	r28, 0x73	; 115
     f0c:	d1 40       	sbci	r29, 0x01	; 1
     f0e:	cd 5d       	subi	r28, 0xDD	; 221
     f10:	de 4f       	sbci	r29, 0xFE	; 254
     f12:	88 83       	st	Y, r24
     f14:	99 83       	std	Y+1, r25	; 0x01
     f16:	aa 83       	std	Y+2, r26	; 0x02
     f18:	bb 83       	std	Y+3, r27	; 0x03
     f1a:	c3 52       	subi	r28, 0x23	; 35
     f1c:	d1 40       	sbci	r29, 0x01	; 1
     f1e:	cd 5d       	subi	r28, 0xDD	; 221
     f20:	de 4f       	sbci	r29, 0xFE	; 254
     f22:	68 81       	ld	r22, Y
     f24:	79 81       	ldd	r23, Y+1	; 0x01
     f26:	8a 81       	ldd	r24, Y+2	; 0x02
     f28:	9b 81       	ldd	r25, Y+3	; 0x03
     f2a:	c3 52       	subi	r28, 0x23	; 35
     f2c:	d1 40       	sbci	r29, 0x01	; 1
     f2e:	0e 94 bf 13 	call	0x277e	; 0x277e <__fixunssfsi>
     f32:	c9 58       	subi	r28, 0x89	; 137
     f34:	de 4f       	sbci	r29, 0xFE	; 254
     f36:	68 83       	st	Y, r22
     f38:	79 83       	std	Y+1, r23	; 0x01
     f3a:	8a 83       	std	Y+2, r24	; 0x02
     f3c:	9b 83       	std	Y+3, r25	; 0x03
     f3e:	c7 57       	subi	r28, 0x77	; 119
     f40:	d1 40       	sbci	r29, 0x01	; 1
     f42:	c9 58       	subi	r28, 0x89	; 137
     f44:	de 4f       	sbci	r29, 0xFE	; 254
     f46:	a8 81       	ld	r26, Y
     f48:	b9 81       	ldd	r27, Y+1	; 0x01
     f4a:	c7 57       	subi	r28, 0x77	; 119
     f4c:	d1 40       	sbci	r29, 0x01	; 1
     f4e:	b8 af       	std	Y+56, r27	; 0x38
     f50:	af ab       	std	Y+55, r26	; 0x37
		while(__ticks)
     f52:	10 c0       	rjmp	.+32     	; 0xf74 <main+0x57c>
     f54:	88 ec       	ldi	r24, 0xC8	; 200
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	9a af       	std	Y+58, r25	; 0x3a
     f5a:	89 af       	std	Y+57, r24	; 0x39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f5c:	89 ad       	ldd	r24, Y+57	; 0x39
     f5e:	9a ad       	ldd	r25, Y+58	; 0x3a
     f60:	01 97       	sbiw	r24, 0x01	; 1
     f62:	f1 f7       	brne	.-4      	; 0xf60 <main+0x568>
     f64:	9a af       	std	Y+58, r25	; 0x3a
     f66:	89 af       	std	Y+57, r24	; 0x39
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
     f68:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f6a:	8f a9       	ldd	r24, Y+55	; 0x37
     f6c:	98 ad       	ldd	r25, Y+56	; 0x38
     f6e:	01 97       	sbiw	r24, 0x01	; 1
     f70:	98 af       	std	Y+56, r25	; 0x38
     f72:	8f ab       	std	Y+55, r24	; 0x37
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f74:	8f a9       	ldd	r24, Y+55	; 0x37
     f76:	98 ad       	ldd	r25, Y+56	; 0x38
     f78:	89 2b       	or	r24, r25
     f7a:	61 f7       	brne	.-40     	; 0xf54 <main+0x55c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
     f7c:	21 c0       	rjmp	.+66     	; 0xfc0 <main+0x5c8>
	}
	else
		__ticks = (uint16_t)__tmp;
     f7e:	6b a9       	ldd	r22, Y+51	; 0x33
     f80:	7c a9       	ldd	r23, Y+52	; 0x34
     f82:	8d a9       	ldd	r24, Y+53	; 0x35
     f84:	9e a9       	ldd	r25, Y+54	; 0x36
     f86:	0e 94 bf 13 	call	0x277e	; 0x277e <__fixunssfsi>
     f8a:	c5 58       	subi	r28, 0x85	; 133
     f8c:	de 4f       	sbci	r29, 0xFE	; 254
     f8e:	68 83       	st	Y, r22
     f90:	79 83       	std	Y+1, r23	; 0x01
     f92:	8a 83       	std	Y+2, r24	; 0x02
     f94:	9b 83       	std	Y+3, r25	; 0x03
     f96:	cb 57       	subi	r28, 0x7B	; 123
     f98:	d1 40       	sbci	r29, 0x01	; 1
     f9a:	c5 58       	subi	r28, 0x85	; 133
     f9c:	de 4f       	sbci	r29, 0xFE	; 254
     f9e:	e8 81       	ld	r30, Y
     fa0:	f9 81       	ldd	r31, Y+1	; 0x01
     fa2:	cb 57       	subi	r28, 0x7B	; 123
     fa4:	d1 40       	sbci	r29, 0x01	; 1
     fa6:	f8 af       	std	Y+56, r31	; 0x38
     fa8:	ef ab       	std	Y+55, r30	; 0x37
     faa:	8f a9       	ldd	r24, Y+55	; 0x37
     fac:	98 ad       	ldd	r25, Y+56	; 0x38
     fae:	9c af       	std	Y+60, r25	; 0x3c
     fb0:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fb2:	8b ad       	ldd	r24, Y+59	; 0x3b
     fb4:	9c ad       	ldd	r25, Y+60	; 0x3c
     fb6:	01 97       	sbiw	r24, 0x01	; 1
     fb8:	f1 f7       	brne	.-4      	; 0xfb6 <main+0x5be>
     fba:	9c af       	std	Y+60, r25	; 0x3c
     fbc:	8b af       	std	Y+59, r24	; 0x3b
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
     fbe:	00 00       	nop
				_delay_ms(time);
			CLCD_voidWriteSpecialCharacter(&Hamoksha_down,0,0,15);
     fc0:	ce 01       	movw	r24, r28
     fc2:	80 53       	subi	r24, 0x30	; 48
     fc4:	9f 4f       	sbci	r25, 0xFF	; 255
     fc6:	2f e0       	ldi	r18, 0x0F	; 15
     fc8:	40 e0       	ldi	r20, 0x00	; 0
     fca:	60 e0       	ldi	r22, 0x00	; 0
     fcc:	0e 94 ae 02 	call	0x55c	; 0x55c <CLCD_voidWriteSpecialCharacter>
			CLCD_voidWriteSpecialCharacter(&BALL_dowm,1,0,14);
     fd0:	ce 01       	movw	r24, r28
     fd2:	8b 51       	subi	r24, 0x1B	; 27
     fd4:	9f 4f       	sbci	r25, 0xFF	; 255
     fd6:	2e e0       	ldi	r18, 0x0E	; 14
     fd8:	40 e0       	ldi	r20, 0x00	; 0
     fda:	61 e0       	ldi	r22, 0x01	; 1
     fdc:	0e 94 ae 02 	call	0x55c	; 0x55c <CLCD_voidWriteSpecialCharacter>
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	a0 ea       	ldi	r26, 0xA0	; 160
     fe6:	b2 e4       	ldi	r27, 0x42	; 66
     fe8:	89 a3       	std	Y+33, r24	; 0x21
     fea:	9a a3       	std	Y+34, r25	; 0x22
     fec:	ab a3       	std	Y+35, r26	; 0x23
     fee:	bc a3       	std	Y+36, r27	; 0x24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     ff0:	20 e0       	ldi	r18, 0x00	; 0
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	4a ef       	ldi	r20, 0xFA	; 250
     ff6:	54 e4       	ldi	r21, 0x44	; 68
     ff8:	69 a1       	ldd	r22, Y+33	; 0x21
     ffa:	7a a1       	ldd	r23, Y+34	; 0x22
     ffc:	8b a1       	ldd	r24, Y+35	; 0x23
     ffe:	9c a1       	ldd	r25, Y+36	; 0x24
    1000:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
    1004:	c1 58       	subi	r28, 0x81	; 129
    1006:	de 4f       	sbci	r29, 0xFE	; 254
    1008:	68 83       	st	Y, r22
    100a:	79 83       	std	Y+1, r23	; 0x01
    100c:	8a 83       	std	Y+2, r24	; 0x02
    100e:	9b 83       	std	Y+3, r25	; 0x03
    1010:	cf 57       	subi	r28, 0x7F	; 127
    1012:	d1 40       	sbci	r29, 0x01	; 1
    1014:	c1 58       	subi	r28, 0x81	; 129
    1016:	de 4f       	sbci	r29, 0xFE	; 254
    1018:	88 81       	ld	r24, Y
    101a:	99 81       	ldd	r25, Y+1	; 0x01
    101c:	aa 81       	ldd	r26, Y+2	; 0x02
    101e:	bb 81       	ldd	r27, Y+3	; 0x03
    1020:	cf 57       	subi	r28, 0x7F	; 127
    1022:	d1 40       	sbci	r29, 0x01	; 1
    1024:	8d a3       	std	Y+37, r24	; 0x25
    1026:	9e a3       	std	Y+38, r25	; 0x26
    1028:	af a3       	std	Y+39, r26	; 0x27
    102a:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
    102c:	20 e0       	ldi	r18, 0x00	; 0
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	40 e8       	ldi	r20, 0x80	; 128
    1032:	5f e3       	ldi	r21, 0x3F	; 63
    1034:	6d a1       	ldd	r22, Y+37	; 0x25
    1036:	7e a1       	ldd	r23, Y+38	; 0x26
    1038:	8f a1       	ldd	r24, Y+39	; 0x27
    103a:	98 a5       	ldd	r25, Y+40	; 0x28
    103c:	0e 94 ba 13 	call	0x2774	; 0x2774 <__cmpsf2>
    1040:	88 23       	and	r24, r24
    1042:	2c f4       	brge	.+10     	; 0x104e <main+0x656>
		__ticks = 1;
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	9a a7       	std	Y+42, r25	; 0x2a
    104a:	89 a7       	std	Y+41, r24	; 0x29
    104c:	75 c0       	rjmp	.+234    	; 0x1138 <main+0x740>
	else if (__tmp > 65535)
    104e:	20 e0       	ldi	r18, 0x00	; 0
    1050:	3f ef       	ldi	r19, 0xFF	; 255
    1052:	4f e7       	ldi	r20, 0x7F	; 127
    1054:	57 e4       	ldi	r21, 0x47	; 71
    1056:	6d a1       	ldd	r22, Y+37	; 0x25
    1058:	7e a1       	ldd	r23, Y+38	; 0x26
    105a:	8f a1       	ldd	r24, Y+39	; 0x27
    105c:	98 a5       	ldd	r25, Y+40	; 0x28
    105e:	0e 94 3b 14 	call	0x2876	; 0x2876 <__gesf2>
    1062:	18 16       	cp	r1, r24
    1064:	0c f0       	brlt	.+2      	; 0x1068 <main+0x670>
    1066:	52 c0       	rjmp	.+164    	; 0x110c <main+0x714>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1068:	20 e0       	ldi	r18, 0x00	; 0
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	40 e2       	ldi	r20, 0x20	; 32
    106e:	51 e4       	ldi	r21, 0x41	; 65
    1070:	69 a1       	ldd	r22, Y+33	; 0x21
    1072:	7a a1       	ldd	r23, Y+34	; 0x22
    1074:	8b a1       	ldd	r24, Y+35	; 0x23
    1076:	9c a1       	ldd	r25, Y+36	; 0x24
    1078:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
    107c:	cd 57       	subi	r28, 0x7D	; 125
    107e:	de 4f       	sbci	r29, 0xFE	; 254
    1080:	68 83       	st	Y, r22
    1082:	79 83       	std	Y+1, r23	; 0x01
    1084:	8a 83       	std	Y+2, r24	; 0x02
    1086:	9b 83       	std	Y+3, r25	; 0x03
    1088:	c3 58       	subi	r28, 0x83	; 131
    108a:	d1 40       	sbci	r29, 0x01	; 1
    108c:	cd 57       	subi	r28, 0x7D	; 125
    108e:	de 4f       	sbci	r29, 0xFE	; 254
    1090:	88 81       	ld	r24, Y
    1092:	99 81       	ldd	r25, Y+1	; 0x01
    1094:	aa 81       	ldd	r26, Y+2	; 0x02
    1096:	bb 81       	ldd	r27, Y+3	; 0x03
    1098:	c3 58       	subi	r28, 0x83	; 131
    109a:	d1 40       	sbci	r29, 0x01	; 1
    109c:	c1 5e       	subi	r28, 0xE1	; 225
    109e:	de 4f       	sbci	r29, 0xFE	; 254
    10a0:	88 83       	st	Y, r24
    10a2:	99 83       	std	Y+1, r25	; 0x01
    10a4:	aa 83       	std	Y+2, r26	; 0x02
    10a6:	bb 83       	std	Y+3, r27	; 0x03
    10a8:	cf 51       	subi	r28, 0x1F	; 31
    10aa:	d1 40       	sbci	r29, 0x01	; 1
    10ac:	c1 5e       	subi	r28, 0xE1	; 225
    10ae:	de 4f       	sbci	r29, 0xFE	; 254
    10b0:	68 81       	ld	r22, Y
    10b2:	79 81       	ldd	r23, Y+1	; 0x01
    10b4:	8a 81       	ldd	r24, Y+2	; 0x02
    10b6:	9b 81       	ldd	r25, Y+3	; 0x03
    10b8:	cf 51       	subi	r28, 0x1F	; 31
    10ba:	d1 40       	sbci	r29, 0x01	; 1
    10bc:	0e 94 bf 13 	call	0x277e	; 0x277e <__fixunssfsi>
    10c0:	c9 57       	subi	r28, 0x79	; 121
    10c2:	de 4f       	sbci	r29, 0xFE	; 254
    10c4:	68 83       	st	Y, r22
    10c6:	79 83       	std	Y+1, r23	; 0x01
    10c8:	8a 83       	std	Y+2, r24	; 0x02
    10ca:	9b 83       	std	Y+3, r25	; 0x03
    10cc:	c7 58       	subi	r28, 0x87	; 135
    10ce:	d1 40       	sbci	r29, 0x01	; 1
    10d0:	c9 57       	subi	r28, 0x79	; 121
    10d2:	de 4f       	sbci	r29, 0xFE	; 254
    10d4:	a8 81       	ld	r26, Y
    10d6:	b9 81       	ldd	r27, Y+1	; 0x01
    10d8:	c7 58       	subi	r28, 0x87	; 135
    10da:	d1 40       	sbci	r29, 0x01	; 1
    10dc:	ba a7       	std	Y+42, r27	; 0x2a
    10de:	a9 a7       	std	Y+41, r26	; 0x29
		while(__ticks)
    10e0:	10 c0       	rjmp	.+32     	; 0x1102 <main+0x70a>
    10e2:	88 ec       	ldi	r24, 0xC8	; 200
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	9c a7       	std	Y+44, r25	; 0x2c
    10e8:	8b a7       	std	Y+43, r24	; 0x2b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    10ec:	9c a5       	ldd	r25, Y+44	; 0x2c
    10ee:	01 97       	sbiw	r24, 0x01	; 1
    10f0:	f1 f7       	brne	.-4      	; 0x10ee <main+0x6f6>
    10f2:	9c a7       	std	Y+44, r25	; 0x2c
    10f4:	8b a7       	std	Y+43, r24	; 0x2b
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
    10f6:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10f8:	89 a5       	ldd	r24, Y+41	; 0x29
    10fa:	9a a5       	ldd	r25, Y+42	; 0x2a
    10fc:	01 97       	sbiw	r24, 0x01	; 1
    10fe:	9a a7       	std	Y+42, r25	; 0x2a
    1100:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1102:	89 a5       	ldd	r24, Y+41	; 0x29
    1104:	9a a5       	ldd	r25, Y+42	; 0x2a
    1106:	89 2b       	or	r24, r25
    1108:	61 f7       	brne	.-40     	; 0x10e2 <main+0x6ea>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
    110a:	21 c0       	rjmp	.+66     	; 0x114e <main+0x756>
	}
	else
		__ticks = (uint16_t)__tmp;
    110c:	6d a1       	ldd	r22, Y+37	; 0x25
    110e:	7e a1       	ldd	r23, Y+38	; 0x26
    1110:	8f a1       	ldd	r24, Y+39	; 0x27
    1112:	98 a5       	ldd	r25, Y+40	; 0x28
    1114:	0e 94 bf 13 	call	0x277e	; 0x277e <__fixunssfsi>
    1118:	c5 57       	subi	r28, 0x75	; 117
    111a:	de 4f       	sbci	r29, 0xFE	; 254
    111c:	68 83       	st	Y, r22
    111e:	79 83       	std	Y+1, r23	; 0x01
    1120:	8a 83       	std	Y+2, r24	; 0x02
    1122:	9b 83       	std	Y+3, r25	; 0x03
    1124:	cb 58       	subi	r28, 0x8B	; 139
    1126:	d1 40       	sbci	r29, 0x01	; 1
    1128:	c5 57       	subi	r28, 0x75	; 117
    112a:	de 4f       	sbci	r29, 0xFE	; 254
    112c:	e8 81       	ld	r30, Y
    112e:	f9 81       	ldd	r31, Y+1	; 0x01
    1130:	cb 58       	subi	r28, 0x8B	; 139
    1132:	d1 40       	sbci	r29, 0x01	; 1
    1134:	fa a7       	std	Y+42, r31	; 0x2a
    1136:	e9 a7       	std	Y+41, r30	; 0x29
    1138:	89 a5       	ldd	r24, Y+41	; 0x29
    113a:	9a a5       	ldd	r25, Y+42	; 0x2a
    113c:	9e a7       	std	Y+46, r25	; 0x2e
    113e:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1140:	8d a5       	ldd	r24, Y+45	; 0x2d
    1142:	9e a5       	ldd	r25, Y+46	; 0x2e
    1144:	01 97       	sbiw	r24, 0x01	; 1
    1146:	f1 f7       	brne	.-4      	; 0x1144 <main+0x74c>
    1148:	9e a7       	std	Y+46, r25	; 0x2e
    114a:	8d a7       	std	Y+45, r24	; 0x2d
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
    114c:	00 00       	nop
				CLCD_voidSendString("I PlayFootball");
				CLCD_voidWriteSpecialCharacter(&Hamoksha,0,0,15);
				CLCD_voidWriteSpecialCharacter(&BALL,1,0,14);
				_delay_ms(1000);

		for(Local_u8Counter=0;Local_u8Counter<10;Local_u8Counter++)
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	8f 5f       	subi	r24, 0xFF	; 255
    1152:	89 83       	std	Y+1, r24	; 0x01
    1154:	89 81       	ldd	r24, Y+1	; 0x01
    1156:	8a 30       	cpi	r24, 0x0A	; 10
    1158:	08 f4       	brcc	.+2      	; 0x115c <main+0x764>
    115a:	6b ce       	rjmp	.-810    	; 0xe32 <main+0x43a>
			CLCD_voidWriteSpecialCharacter(&Hamoksha_down,0,0,15);
			CLCD_voidWriteSpecialCharacter(&BALL_dowm,1,0,14);
				_delay_ms(time);
		}

		CLCD_voidSendCommand(1);
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	0e 94 41 00 	call	0x82	; 0x82 <CLCD_voidSendCommand>
		CLCD_voidSendString("I can run");
    1162:	8d e7       	ldi	r24, 0x7D	; 125
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	0e 94 62 02 	call	0x4c4	; 0x4c4 <CLCD_voidSendString>
		CLCD_voidWriteSpecialCharacter(&Hamoksha,0,0,15);
    116a:	ce 01       	movw	r24, r28
    116c:	87 53       	subi	r24, 0x37	; 55
    116e:	9f 4f       	sbci	r25, 0xFF	; 255
    1170:	2f e0       	ldi	r18, 0x0F	; 15
    1172:	40 e0       	ldi	r20, 0x00	; 0
    1174:	60 e0       	ldi	r22, 0x00	; 0
    1176:	0e 94 ae 02 	call	0x55c	; 0x55c <CLCD_voidWriteSpecialCharacter>
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	aa e7       	ldi	r26, 0x7A	; 122
    1180:	b4 e4       	ldi	r27, 0x44	; 68
    1182:	9e 01       	movw	r18, r28
    1184:	23 5c       	subi	r18, 0xC3	; 195
    1186:	3f 4f       	sbci	r19, 0xFF	; 255
    1188:	f9 01       	movw	r30, r18
    118a:	80 83       	st	Z, r24
    118c:	91 83       	std	Z+1, r25	; 0x01
    118e:	a2 83       	std	Z+2, r26	; 0x02
    1190:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1192:	8e 01       	movw	r16, r28
    1194:	0f 5b       	subi	r16, 0xBF	; 191
    1196:	1f 4f       	sbci	r17, 0xFF	; 255
    1198:	20 e0       	ldi	r18, 0x00	; 0
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	4a ef       	ldi	r20, 0xFA	; 250
    119e:	54 e4       	ldi	r21, 0x44	; 68
    11a0:	ce 01       	movw	r24, r28
    11a2:	cd 96       	adiw	r24, 0x3d	; 61
    11a4:	dc 01       	movw	r26, r24
    11a6:	6d 91       	ld	r22, X+
    11a8:	7d 91       	ld	r23, X+
    11aa:	8d 91       	ld	r24, X+
    11ac:	9c 91       	ld	r25, X
    11ae:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
    11b2:	c1 57       	subi	r28, 0x71	; 113
    11b4:	de 4f       	sbci	r29, 0xFE	; 254
    11b6:	68 83       	st	Y, r22
    11b8:	79 83       	std	Y+1, r23	; 0x01
    11ba:	8a 83       	std	Y+2, r24	; 0x02
    11bc:	9b 83       	std	Y+3, r25	; 0x03
    11be:	cf 58       	subi	r28, 0x8F	; 143
    11c0:	d1 40       	sbci	r29, 0x01	; 1
    11c2:	c1 57       	subi	r28, 0x71	; 113
    11c4:	de 4f       	sbci	r29, 0xFE	; 254
    11c6:	88 81       	ld	r24, Y
    11c8:	99 81       	ldd	r25, Y+1	; 0x01
    11ca:	aa 81       	ldd	r26, Y+2	; 0x02
    11cc:	bb 81       	ldd	r27, Y+3	; 0x03
    11ce:	cf 58       	subi	r28, 0x8F	; 143
    11d0:	d1 40       	sbci	r29, 0x01	; 1
    11d2:	f8 01       	movw	r30, r16
    11d4:	80 83       	st	Z, r24
    11d6:	91 83       	std	Z+1, r25	; 0x01
    11d8:	a2 83       	std	Z+2, r26	; 0x02
    11da:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    11dc:	ce 01       	movw	r24, r28
    11de:	8f 5b       	subi	r24, 0xBF	; 191
    11e0:	9f 4f       	sbci	r25, 0xFF	; 255
    11e2:	20 e0       	ldi	r18, 0x00	; 0
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	40 e8       	ldi	r20, 0x80	; 128
    11e8:	5f e3       	ldi	r21, 0x3F	; 63
    11ea:	dc 01       	movw	r26, r24
    11ec:	6d 91       	ld	r22, X+
    11ee:	7d 91       	ld	r23, X+
    11f0:	8d 91       	ld	r24, X+
    11f2:	9c 91       	ld	r25, X
    11f4:	0e 94 ba 13 	call	0x2774	; 0x2774 <__cmpsf2>
    11f8:	88 23       	and	r24, r24
    11fa:	4c f4       	brge	.+18     	; 0x120e <main+0x816>
		__ticks = 1;
    11fc:	ce 01       	movw	r24, r28
    11fe:	8b 5b       	subi	r24, 0xBB	; 187
    1200:	9f 4f       	sbci	r25, 0xFF	; 255
    1202:	21 e0       	ldi	r18, 0x01	; 1
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	fc 01       	movw	r30, r24
    1208:	31 83       	std	Z+1, r19	; 0x01
    120a:	20 83       	st	Z, r18
    120c:	a1 c0       	rjmp	.+322    	; 0x1350 <main+0x958>
	else if (__tmp > 65535)
    120e:	ce 01       	movw	r24, r28
    1210:	8f 5b       	subi	r24, 0xBF	; 191
    1212:	9f 4f       	sbci	r25, 0xFF	; 255
    1214:	20 e0       	ldi	r18, 0x00	; 0
    1216:	3f ef       	ldi	r19, 0xFF	; 255
    1218:	4f e7       	ldi	r20, 0x7F	; 127
    121a:	57 e4       	ldi	r21, 0x47	; 71
    121c:	dc 01       	movw	r26, r24
    121e:	6d 91       	ld	r22, X+
    1220:	7d 91       	ld	r23, X+
    1222:	8d 91       	ld	r24, X+
    1224:	9c 91       	ld	r25, X
    1226:	0e 94 3b 14 	call	0x2876	; 0x2876 <__gesf2>
    122a:	18 16       	cp	r1, r24
    122c:	0c f0       	brlt	.+2      	; 0x1230 <main+0x838>
    122e:	72 c0       	rjmp	.+228    	; 0x1314 <main+0x91c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1230:	20 e0       	ldi	r18, 0x00	; 0
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	40 e2       	ldi	r20, 0x20	; 32
    1236:	51 e4       	ldi	r21, 0x41	; 65
    1238:	ce 01       	movw	r24, r28
    123a:	cd 96       	adiw	r24, 0x3d	; 61
    123c:	fc 01       	movw	r30, r24
    123e:	60 81       	ld	r22, Z
    1240:	71 81       	ldd	r23, Z+1	; 0x01
    1242:	82 81       	ldd	r24, Z+2	; 0x02
    1244:	93 81       	ldd	r25, Z+3	; 0x03
    1246:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
    124a:	cd 56       	subi	r28, 0x6D	; 109
    124c:	de 4f       	sbci	r29, 0xFE	; 254
    124e:	68 83       	st	Y, r22
    1250:	79 83       	std	Y+1, r23	; 0x01
    1252:	8a 83       	std	Y+2, r24	; 0x02
    1254:	9b 83       	std	Y+3, r25	; 0x03
    1256:	c3 59       	subi	r28, 0x93	; 147
    1258:	d1 40       	sbci	r29, 0x01	; 1
    125a:	cd 56       	subi	r28, 0x6D	; 109
    125c:	de 4f       	sbci	r29, 0xFE	; 254
    125e:	88 81       	ld	r24, Y
    1260:	99 81       	ldd	r25, Y+1	; 0x01
    1262:	aa 81       	ldd	r26, Y+2	; 0x02
    1264:	bb 81       	ldd	r27, Y+3	; 0x03
    1266:	c3 59       	subi	r28, 0x93	; 147
    1268:	d1 40       	sbci	r29, 0x01	; 1
    126a:	c9 5d       	subi	r28, 0xD9	; 217
    126c:	de 4f       	sbci	r29, 0xFE	; 254
    126e:	88 83       	st	Y, r24
    1270:	99 83       	std	Y+1, r25	; 0x01
    1272:	aa 83       	std	Y+2, r26	; 0x02
    1274:	bb 83       	std	Y+3, r27	; 0x03
    1276:	c7 52       	subi	r28, 0x27	; 39
    1278:	d1 40       	sbci	r29, 0x01	; 1
    127a:	8e 01       	movw	r16, r28
    127c:	0b 5b       	subi	r16, 0xBB	; 187
    127e:	1f 4f       	sbci	r17, 0xFF	; 255
    1280:	c9 5d       	subi	r28, 0xD9	; 217
    1282:	de 4f       	sbci	r29, 0xFE	; 254
    1284:	68 81       	ld	r22, Y
    1286:	79 81       	ldd	r23, Y+1	; 0x01
    1288:	8a 81       	ldd	r24, Y+2	; 0x02
    128a:	9b 81       	ldd	r25, Y+3	; 0x03
    128c:	c7 52       	subi	r28, 0x27	; 39
    128e:	d1 40       	sbci	r29, 0x01	; 1
    1290:	0e 94 bf 13 	call	0x277e	; 0x277e <__fixunssfsi>
    1294:	c9 56       	subi	r28, 0x69	; 105
    1296:	de 4f       	sbci	r29, 0xFE	; 254
    1298:	68 83       	st	Y, r22
    129a:	79 83       	std	Y+1, r23	; 0x01
    129c:	8a 83       	std	Y+2, r24	; 0x02
    129e:	9b 83       	std	Y+3, r25	; 0x03
    12a0:	c7 59       	subi	r28, 0x97	; 151
    12a2:	d1 40       	sbci	r29, 0x01	; 1
    12a4:	c9 56       	subi	r28, 0x69	; 105
    12a6:	de 4f       	sbci	r29, 0xFE	; 254
    12a8:	e8 81       	ld	r30, Y
    12aa:	f9 81       	ldd	r31, Y+1	; 0x01
    12ac:	c7 59       	subi	r28, 0x97	; 151
    12ae:	d1 40       	sbci	r29, 0x01	; 1
    12b0:	d8 01       	movw	r26, r16
    12b2:	ed 93       	st	X+, r30
    12b4:	fc 93       	st	X, r31
		while(__ticks)
    12b6:	25 c0       	rjmp	.+74     	; 0x1302 <main+0x90a>
    12b8:	ce 01       	movw	r24, r28
    12ba:	89 5b       	subi	r24, 0xB9	; 185
    12bc:	9f 4f       	sbci	r25, 0xFF	; 255
    12be:	28 ec       	ldi	r18, 0xC8	; 200
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	dc 01       	movw	r26, r24
    12c4:	2d 93       	st	X+, r18
    12c6:	3c 93       	st	X, r19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12c8:	ce 01       	movw	r24, r28
    12ca:	89 5b       	subi	r24, 0xB9	; 185
    12cc:	9f 4f       	sbci	r25, 0xFF	; 255
    12ce:	fc 01       	movw	r30, r24
    12d0:	80 81       	ld	r24, Z
    12d2:	91 81       	ldd	r25, Z+1	; 0x01
    12d4:	01 97       	sbiw	r24, 0x01	; 1
    12d6:	f1 f7       	brne	.-4      	; 0x12d4 <main+0x8dc>
    12d8:	9e 01       	movw	r18, r28
    12da:	29 5b       	subi	r18, 0xB9	; 185
    12dc:	3f 4f       	sbci	r19, 0xFF	; 255
    12de:	d9 01       	movw	r26, r18
    12e0:	8d 93       	st	X+, r24
    12e2:	9c 93       	st	X, r25
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
    12e4:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12e6:	ce 01       	movw	r24, r28
    12e8:	8b 5b       	subi	r24, 0xBB	; 187
    12ea:	9f 4f       	sbci	r25, 0xFF	; 255
    12ec:	9e 01       	movw	r18, r28
    12ee:	2b 5b       	subi	r18, 0xBB	; 187
    12f0:	3f 4f       	sbci	r19, 0xFF	; 255
    12f2:	f9 01       	movw	r30, r18
    12f4:	20 81       	ld	r18, Z
    12f6:	31 81       	ldd	r19, Z+1	; 0x01
    12f8:	21 50       	subi	r18, 0x01	; 1
    12fa:	31 09       	sbc	r19, r1
    12fc:	dc 01       	movw	r26, r24
    12fe:	2d 93       	st	X+, r18
    1300:	3c 93       	st	X, r19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1302:	ce 01       	movw	r24, r28
    1304:	8b 5b       	subi	r24, 0xBB	; 187
    1306:	9f 4f       	sbci	r25, 0xFF	; 255
    1308:	fc 01       	movw	r30, r24
    130a:	80 81       	ld	r24, Z
    130c:	91 81       	ldd	r25, Z+1	; 0x01
    130e:	89 2b       	or	r24, r25
    1310:	99 f6       	brne	.-90     	; 0x12b8 <main+0x8c0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
    1312:	39 c0       	rjmp	.+114    	; 0x1386 <main+0x98e>
	}
	else
		__ticks = (uint16_t)__tmp;
    1314:	8e 01       	movw	r16, r28
    1316:	0b 5b       	subi	r16, 0xBB	; 187
    1318:	1f 4f       	sbci	r17, 0xFF	; 255
    131a:	ce 01       	movw	r24, r28
    131c:	8f 5b       	subi	r24, 0xBF	; 191
    131e:	9f 4f       	sbci	r25, 0xFF	; 255
    1320:	dc 01       	movw	r26, r24
    1322:	6d 91       	ld	r22, X+
    1324:	7d 91       	ld	r23, X+
    1326:	8d 91       	ld	r24, X+
    1328:	9c 91       	ld	r25, X
    132a:	0e 94 bf 13 	call	0x277e	; 0x277e <__fixunssfsi>
    132e:	c5 56       	subi	r28, 0x65	; 101
    1330:	de 4f       	sbci	r29, 0xFE	; 254
    1332:	68 83       	st	Y, r22
    1334:	79 83       	std	Y+1, r23	; 0x01
    1336:	8a 83       	std	Y+2, r24	; 0x02
    1338:	9b 83       	std	Y+3, r25	; 0x03
    133a:	cb 59       	subi	r28, 0x9B	; 155
    133c:	d1 40       	sbci	r29, 0x01	; 1
    133e:	c5 56       	subi	r28, 0x65	; 101
    1340:	de 4f       	sbci	r29, 0xFE	; 254
    1342:	88 81       	ld	r24, Y
    1344:	99 81       	ldd	r25, Y+1	; 0x01
    1346:	cb 59       	subi	r28, 0x9B	; 155
    1348:	d1 40       	sbci	r29, 0x01	; 1
    134a:	f8 01       	movw	r30, r16
    134c:	91 83       	std	Z+1, r25	; 0x01
    134e:	80 83       	st	Z, r24
    1350:	ce 01       	movw	r24, r28
    1352:	87 5b       	subi	r24, 0xB7	; 183
    1354:	9f 4f       	sbci	r25, 0xFF	; 255
    1356:	9e 01       	movw	r18, r28
    1358:	2b 5b       	subi	r18, 0xBB	; 187
    135a:	3f 4f       	sbci	r19, 0xFF	; 255
    135c:	d9 01       	movw	r26, r18
    135e:	2d 91       	ld	r18, X+
    1360:	3c 91       	ld	r19, X
    1362:	fc 01       	movw	r30, r24
    1364:	31 83       	std	Z+1, r19	; 0x01
    1366:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1368:	ce 01       	movw	r24, r28
    136a:	87 5b       	subi	r24, 0xB7	; 183
    136c:	9f 4f       	sbci	r25, 0xFF	; 255
    136e:	dc 01       	movw	r26, r24
    1370:	8d 91       	ld	r24, X+
    1372:	9c 91       	ld	r25, X
    1374:	01 97       	sbiw	r24, 0x01	; 1
    1376:	f1 f7       	brne	.-4      	; 0x1374 <main+0x97c>
    1378:	9e 01       	movw	r18, r28
    137a:	27 5b       	subi	r18, 0xB7	; 183
    137c:	3f 4f       	sbci	r19, 0xFF	; 255
    137e:	f9 01       	movw	r30, r18
    1380:	91 83       	std	Z+1, r25	; 0x01
    1382:	80 83       	st	Z, r24
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
    1384:	00 00       	nop
		_delay_ms(1000);

		for(Local_u8Counter1=15;Local_u8Counter1>1;Local_u8Counter1--)
    1386:	8f e0       	ldi	r24, 0x0F	; 15
    1388:	8a 83       	std	Y+2, r24	; 0x02
    138a:	29 c2       	rjmp	.+1106   	; 0x17de <main+0xde6>
		{
			CLCD_voidWriteSpecialCharacter(&Hamoksha_down,0,1,Local_u8Counter1);
    138c:	ce 01       	movw	r24, r28
    138e:	80 53       	subi	r24, 0x30	; 48
    1390:	9f 4f       	sbci	r25, 0xFF	; 255
    1392:	2a 81       	ldd	r18, Y+2	; 0x02
    1394:	41 e0       	ldi	r20, 0x01	; 1
    1396:	60 e0       	ldi	r22, 0x00	; 0
    1398:	0e 94 ae 02 	call	0x55c	; 0x55c <CLCD_voidWriteSpecialCharacter>
    139c:	9e 01       	movw	r18, r28
    139e:	27 5a       	subi	r18, 0xA7	; 167
    13a0:	3f 4f       	sbci	r19, 0xFF	; 255
    13a2:	80 e0       	ldi	r24, 0x00	; 0
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	a0 ea       	ldi	r26, 0xA0	; 160
    13a8:	b2 e4       	ldi	r27, 0x42	; 66
    13aa:	f9 01       	movw	r30, r18
    13ac:	80 83       	st	Z, r24
    13ae:	91 83       	std	Z+1, r25	; 0x01
    13b0:	a2 83       	std	Z+2, r26	; 0x02
    13b2:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    13b4:	8e 01       	movw	r16, r28
    13b6:	03 5a       	subi	r16, 0xA3	; 163
    13b8:	1f 4f       	sbci	r17, 0xFF	; 255
    13ba:	ce 01       	movw	r24, r28
    13bc:	87 5a       	subi	r24, 0xA7	; 167
    13be:	9f 4f       	sbci	r25, 0xFF	; 255
    13c0:	20 e0       	ldi	r18, 0x00	; 0
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	4a ef       	ldi	r20, 0xFA	; 250
    13c6:	54 e4       	ldi	r21, 0x44	; 68
    13c8:	dc 01       	movw	r26, r24
    13ca:	6d 91       	ld	r22, X+
    13cc:	7d 91       	ld	r23, X+
    13ce:	8d 91       	ld	r24, X+
    13d0:	9c 91       	ld	r25, X
    13d2:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
    13d6:	c1 56       	subi	r28, 0x61	; 97
    13d8:	de 4f       	sbci	r29, 0xFE	; 254
    13da:	68 83       	st	Y, r22
    13dc:	79 83       	std	Y+1, r23	; 0x01
    13de:	8a 83       	std	Y+2, r24	; 0x02
    13e0:	9b 83       	std	Y+3, r25	; 0x03
    13e2:	cf 59       	subi	r28, 0x9F	; 159
    13e4:	d1 40       	sbci	r29, 0x01	; 1
    13e6:	c1 56       	subi	r28, 0x61	; 97
    13e8:	de 4f       	sbci	r29, 0xFE	; 254
    13ea:	88 81       	ld	r24, Y
    13ec:	99 81       	ldd	r25, Y+1	; 0x01
    13ee:	aa 81       	ldd	r26, Y+2	; 0x02
    13f0:	bb 81       	ldd	r27, Y+3	; 0x03
    13f2:	cf 59       	subi	r28, 0x9F	; 159
    13f4:	d1 40       	sbci	r29, 0x01	; 1
    13f6:	f8 01       	movw	r30, r16
    13f8:	80 83       	st	Z, r24
    13fa:	91 83       	std	Z+1, r25	; 0x01
    13fc:	a2 83       	std	Z+2, r26	; 0x02
    13fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1400:	ce 01       	movw	r24, r28
    1402:	83 5a       	subi	r24, 0xA3	; 163
    1404:	9f 4f       	sbci	r25, 0xFF	; 255
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	40 e8       	ldi	r20, 0x80	; 128
    140c:	5f e3       	ldi	r21, 0x3F	; 63
    140e:	dc 01       	movw	r26, r24
    1410:	6d 91       	ld	r22, X+
    1412:	7d 91       	ld	r23, X+
    1414:	8d 91       	ld	r24, X+
    1416:	9c 91       	ld	r25, X
    1418:	0e 94 ba 13 	call	0x2774	; 0x2774 <__cmpsf2>
    141c:	88 23       	and	r24, r24
    141e:	4c f4       	brge	.+18     	; 0x1432 <main+0xa3a>
		__ticks = 1;
    1420:	ce 01       	movw	r24, r28
    1422:	8f 59       	subi	r24, 0x9F	; 159
    1424:	9f 4f       	sbci	r25, 0xFF	; 255
    1426:	21 e0       	ldi	r18, 0x01	; 1
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	fc 01       	movw	r30, r24
    142c:	31 83       	std	Z+1, r19	; 0x01
    142e:	20 83       	st	Z, r18
    1430:	a2 c0       	rjmp	.+324    	; 0x1576 <main+0xb7e>
	else if (__tmp > 65535)
    1432:	ce 01       	movw	r24, r28
    1434:	83 5a       	subi	r24, 0xA3	; 163
    1436:	9f 4f       	sbci	r25, 0xFF	; 255
    1438:	20 e0       	ldi	r18, 0x00	; 0
    143a:	3f ef       	ldi	r19, 0xFF	; 255
    143c:	4f e7       	ldi	r20, 0x7F	; 127
    143e:	57 e4       	ldi	r21, 0x47	; 71
    1440:	dc 01       	movw	r26, r24
    1442:	6d 91       	ld	r22, X+
    1444:	7d 91       	ld	r23, X+
    1446:	8d 91       	ld	r24, X+
    1448:	9c 91       	ld	r25, X
    144a:	0e 94 3b 14 	call	0x2876	; 0x2876 <__gesf2>
    144e:	18 16       	cp	r1, r24
    1450:	0c f0       	brlt	.+2      	; 0x1454 <main+0xa5c>
    1452:	73 c0       	rjmp	.+230    	; 0x153a <main+0xb42>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1454:	ce 01       	movw	r24, r28
    1456:	87 5a       	subi	r24, 0xA7	; 167
    1458:	9f 4f       	sbci	r25, 0xFF	; 255
    145a:	20 e0       	ldi	r18, 0x00	; 0
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	40 e2       	ldi	r20, 0x20	; 32
    1460:	51 e4       	ldi	r21, 0x41	; 65
    1462:	fc 01       	movw	r30, r24
    1464:	60 81       	ld	r22, Z
    1466:	71 81       	ldd	r23, Z+1	; 0x01
    1468:	82 81       	ldd	r24, Z+2	; 0x02
    146a:	93 81       	ldd	r25, Z+3	; 0x03
    146c:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
    1470:	cd 55       	subi	r28, 0x5D	; 93
    1472:	de 4f       	sbci	r29, 0xFE	; 254
    1474:	68 83       	st	Y, r22
    1476:	79 83       	std	Y+1, r23	; 0x01
    1478:	8a 83       	std	Y+2, r24	; 0x02
    147a:	9b 83       	std	Y+3, r25	; 0x03
    147c:	c3 5a       	subi	r28, 0xA3	; 163
    147e:	d1 40       	sbci	r29, 0x01	; 1
    1480:	cd 55       	subi	r28, 0x5D	; 93
    1482:	de 4f       	sbci	r29, 0xFE	; 254
    1484:	88 81       	ld	r24, Y
    1486:	99 81       	ldd	r25, Y+1	; 0x01
    1488:	aa 81       	ldd	r26, Y+2	; 0x02
    148a:	bb 81       	ldd	r27, Y+3	; 0x03
    148c:	c3 5a       	subi	r28, 0xA3	; 163
    148e:	d1 40       	sbci	r29, 0x01	; 1
    1490:	c1 5d       	subi	r28, 0xD1	; 209
    1492:	de 4f       	sbci	r29, 0xFE	; 254
    1494:	88 83       	st	Y, r24
    1496:	99 83       	std	Y+1, r25	; 0x01
    1498:	aa 83       	std	Y+2, r26	; 0x02
    149a:	bb 83       	std	Y+3, r27	; 0x03
    149c:	cf 52       	subi	r28, 0x2F	; 47
    149e:	d1 40       	sbci	r29, 0x01	; 1
    14a0:	8e 01       	movw	r16, r28
    14a2:	0f 59       	subi	r16, 0x9F	; 159
    14a4:	1f 4f       	sbci	r17, 0xFF	; 255
    14a6:	c1 5d       	subi	r28, 0xD1	; 209
    14a8:	de 4f       	sbci	r29, 0xFE	; 254
    14aa:	68 81       	ld	r22, Y
    14ac:	79 81       	ldd	r23, Y+1	; 0x01
    14ae:	8a 81       	ldd	r24, Y+2	; 0x02
    14b0:	9b 81       	ldd	r25, Y+3	; 0x03
    14b2:	cf 52       	subi	r28, 0x2F	; 47
    14b4:	d1 40       	sbci	r29, 0x01	; 1
    14b6:	0e 94 bf 13 	call	0x277e	; 0x277e <__fixunssfsi>
    14ba:	c9 55       	subi	r28, 0x59	; 89
    14bc:	de 4f       	sbci	r29, 0xFE	; 254
    14be:	68 83       	st	Y, r22
    14c0:	79 83       	std	Y+1, r23	; 0x01
    14c2:	8a 83       	std	Y+2, r24	; 0x02
    14c4:	9b 83       	std	Y+3, r25	; 0x03
    14c6:	c7 5a       	subi	r28, 0xA7	; 167
    14c8:	d1 40       	sbci	r29, 0x01	; 1
    14ca:	c9 55       	subi	r28, 0x59	; 89
    14cc:	de 4f       	sbci	r29, 0xFE	; 254
    14ce:	e8 81       	ld	r30, Y
    14d0:	f9 81       	ldd	r31, Y+1	; 0x01
    14d2:	c7 5a       	subi	r28, 0xA7	; 167
    14d4:	d1 40       	sbci	r29, 0x01	; 1
    14d6:	d8 01       	movw	r26, r16
    14d8:	ed 93       	st	X+, r30
    14da:	fc 93       	st	X, r31
		while(__ticks)
    14dc:	25 c0       	rjmp	.+74     	; 0x1528 <main+0xb30>
    14de:	ce 01       	movw	r24, r28
    14e0:	8d 59       	subi	r24, 0x9D	; 157
    14e2:	9f 4f       	sbci	r25, 0xFF	; 255
    14e4:	28 ec       	ldi	r18, 0xC8	; 200
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	dc 01       	movw	r26, r24
    14ea:	2d 93       	st	X+, r18
    14ec:	3c 93       	st	X, r19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14ee:	ce 01       	movw	r24, r28
    14f0:	8d 59       	subi	r24, 0x9D	; 157
    14f2:	9f 4f       	sbci	r25, 0xFF	; 255
    14f4:	fc 01       	movw	r30, r24
    14f6:	80 81       	ld	r24, Z
    14f8:	91 81       	ldd	r25, Z+1	; 0x01
    14fa:	01 97       	sbiw	r24, 0x01	; 1
    14fc:	f1 f7       	brne	.-4      	; 0x14fa <main+0xb02>
    14fe:	9e 01       	movw	r18, r28
    1500:	2d 59       	subi	r18, 0x9D	; 157
    1502:	3f 4f       	sbci	r19, 0xFF	; 255
    1504:	d9 01       	movw	r26, r18
    1506:	8d 93       	st	X+, r24
    1508:	9c 93       	st	X, r25
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
    150a:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    150c:	ce 01       	movw	r24, r28
    150e:	8f 59       	subi	r24, 0x9F	; 159
    1510:	9f 4f       	sbci	r25, 0xFF	; 255
    1512:	9e 01       	movw	r18, r28
    1514:	2f 59       	subi	r18, 0x9F	; 159
    1516:	3f 4f       	sbci	r19, 0xFF	; 255
    1518:	f9 01       	movw	r30, r18
    151a:	20 81       	ld	r18, Z
    151c:	31 81       	ldd	r19, Z+1	; 0x01
    151e:	21 50       	subi	r18, 0x01	; 1
    1520:	31 09       	sbc	r19, r1
    1522:	dc 01       	movw	r26, r24
    1524:	2d 93       	st	X+, r18
    1526:	3c 93       	st	X, r19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1528:	ce 01       	movw	r24, r28
    152a:	8f 59       	subi	r24, 0x9F	; 159
    152c:	9f 4f       	sbci	r25, 0xFF	; 255
    152e:	fc 01       	movw	r30, r24
    1530:	80 81       	ld	r24, Z
    1532:	91 81       	ldd	r25, Z+1	; 0x01
    1534:	89 2b       	or	r24, r25
    1536:	99 f6       	brne	.-90     	; 0x14de <main+0xae6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
    1538:	39 c0       	rjmp	.+114    	; 0x15ac <main+0xbb4>
	}
	else
		__ticks = (uint16_t)__tmp;
    153a:	8e 01       	movw	r16, r28
    153c:	0f 59       	subi	r16, 0x9F	; 159
    153e:	1f 4f       	sbci	r17, 0xFF	; 255
    1540:	ce 01       	movw	r24, r28
    1542:	83 5a       	subi	r24, 0xA3	; 163
    1544:	9f 4f       	sbci	r25, 0xFF	; 255
    1546:	dc 01       	movw	r26, r24
    1548:	6d 91       	ld	r22, X+
    154a:	7d 91       	ld	r23, X+
    154c:	8d 91       	ld	r24, X+
    154e:	9c 91       	ld	r25, X
    1550:	0e 94 bf 13 	call	0x277e	; 0x277e <__fixunssfsi>
    1554:	c5 55       	subi	r28, 0x55	; 85
    1556:	de 4f       	sbci	r29, 0xFE	; 254
    1558:	68 83       	st	Y, r22
    155a:	79 83       	std	Y+1, r23	; 0x01
    155c:	8a 83       	std	Y+2, r24	; 0x02
    155e:	9b 83       	std	Y+3, r25	; 0x03
    1560:	cb 5a       	subi	r28, 0xAB	; 171
    1562:	d1 40       	sbci	r29, 0x01	; 1
    1564:	c5 55       	subi	r28, 0x55	; 85
    1566:	de 4f       	sbci	r29, 0xFE	; 254
    1568:	88 81       	ld	r24, Y
    156a:	99 81       	ldd	r25, Y+1	; 0x01
    156c:	cb 5a       	subi	r28, 0xAB	; 171
    156e:	d1 40       	sbci	r29, 0x01	; 1
    1570:	f8 01       	movw	r30, r16
    1572:	91 83       	std	Z+1, r25	; 0x01
    1574:	80 83       	st	Z, r24
    1576:	ce 01       	movw	r24, r28
    1578:	8b 59       	subi	r24, 0x9B	; 155
    157a:	9f 4f       	sbci	r25, 0xFF	; 255
    157c:	9e 01       	movw	r18, r28
    157e:	2f 59       	subi	r18, 0x9F	; 159
    1580:	3f 4f       	sbci	r19, 0xFF	; 255
    1582:	d9 01       	movw	r26, r18
    1584:	2d 91       	ld	r18, X+
    1586:	3c 91       	ld	r19, X
    1588:	fc 01       	movw	r30, r24
    158a:	31 83       	std	Z+1, r19	; 0x01
    158c:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    158e:	ce 01       	movw	r24, r28
    1590:	8b 59       	subi	r24, 0x9B	; 155
    1592:	9f 4f       	sbci	r25, 0xFF	; 255
    1594:	dc 01       	movw	r26, r24
    1596:	8d 91       	ld	r24, X+
    1598:	9c 91       	ld	r25, X
    159a:	01 97       	sbiw	r24, 0x01	; 1
    159c:	f1 f7       	brne	.-4      	; 0x159a <main+0xba2>
    159e:	9e 01       	movw	r18, r28
    15a0:	2b 59       	subi	r18, 0x9B	; 155
    15a2:	3f 4f       	sbci	r19, 0xFF	; 255
    15a4:	f9 01       	movw	r30, r18
    15a6:	91 83       	std	Z+1, r25	; 0x01
    15a8:	80 83       	st	Z, r24
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
    15aa:	00 00       	nop
			_delay_ms(time);
			CLCD_voidSendCommand(1);
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	0e 94 41 00 	call	0x82	; 0x82 <CLCD_voidSendCommand>
			CLCD_voidWriteSpecialCharacter(&Hamoksha_up,0,1,Local_u8Counter1);
    15b2:	ce 01       	movw	r24, r28
    15b4:	89 52       	subi	r24, 0x29	; 41
    15b6:	9f 4f       	sbci	r25, 0xFF	; 255
    15b8:	2a 81       	ldd	r18, Y+2	; 0x02
    15ba:	41 e0       	ldi	r20, 0x01	; 1
    15bc:	60 e0       	ldi	r22, 0x00	; 0
    15be:	0e 94 ae 02 	call	0x55c	; 0x55c <CLCD_voidWriteSpecialCharacter>
    15c2:	9e 01       	movw	r18, r28
    15c4:	25 5b       	subi	r18, 0xB5	; 181
    15c6:	3f 4f       	sbci	r19, 0xFF	; 255
    15c8:	80 e0       	ldi	r24, 0x00	; 0
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	a0 ea       	ldi	r26, 0xA0	; 160
    15ce:	b2 e4       	ldi	r27, 0x42	; 66
    15d0:	f9 01       	movw	r30, r18
    15d2:	80 83       	st	Z, r24
    15d4:	91 83       	std	Z+1, r25	; 0x01
    15d6:	a2 83       	std	Z+2, r26	; 0x02
    15d8:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    15da:	8e 01       	movw	r16, r28
    15dc:	01 5b       	subi	r16, 0xB1	; 177
    15de:	1f 4f       	sbci	r17, 0xFF	; 255
    15e0:	ce 01       	movw	r24, r28
    15e2:	85 5b       	subi	r24, 0xB5	; 181
    15e4:	9f 4f       	sbci	r25, 0xFF	; 255
    15e6:	20 e0       	ldi	r18, 0x00	; 0
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	4a ef       	ldi	r20, 0xFA	; 250
    15ec:	54 e4       	ldi	r21, 0x44	; 68
    15ee:	dc 01       	movw	r26, r24
    15f0:	6d 91       	ld	r22, X+
    15f2:	7d 91       	ld	r23, X+
    15f4:	8d 91       	ld	r24, X+
    15f6:	9c 91       	ld	r25, X
    15f8:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
    15fc:	c1 55       	subi	r28, 0x51	; 81
    15fe:	de 4f       	sbci	r29, 0xFE	; 254
    1600:	68 83       	st	Y, r22
    1602:	79 83       	std	Y+1, r23	; 0x01
    1604:	8a 83       	std	Y+2, r24	; 0x02
    1606:	9b 83       	std	Y+3, r25	; 0x03
    1608:	cf 5a       	subi	r28, 0xAF	; 175
    160a:	d1 40       	sbci	r29, 0x01	; 1
    160c:	c1 55       	subi	r28, 0x51	; 81
    160e:	de 4f       	sbci	r29, 0xFE	; 254
    1610:	88 81       	ld	r24, Y
    1612:	99 81       	ldd	r25, Y+1	; 0x01
    1614:	aa 81       	ldd	r26, Y+2	; 0x02
    1616:	bb 81       	ldd	r27, Y+3	; 0x03
    1618:	cf 5a       	subi	r28, 0xAF	; 175
    161a:	d1 40       	sbci	r29, 0x01	; 1
    161c:	f8 01       	movw	r30, r16
    161e:	80 83       	st	Z, r24
    1620:	91 83       	std	Z+1, r25	; 0x01
    1622:	a2 83       	std	Z+2, r26	; 0x02
    1624:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1626:	ce 01       	movw	r24, r28
    1628:	81 5b       	subi	r24, 0xB1	; 177
    162a:	9f 4f       	sbci	r25, 0xFF	; 255
    162c:	20 e0       	ldi	r18, 0x00	; 0
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	40 e8       	ldi	r20, 0x80	; 128
    1632:	5f e3       	ldi	r21, 0x3F	; 63
    1634:	dc 01       	movw	r26, r24
    1636:	6d 91       	ld	r22, X+
    1638:	7d 91       	ld	r23, X+
    163a:	8d 91       	ld	r24, X+
    163c:	9c 91       	ld	r25, X
    163e:	0e 94 ba 13 	call	0x2774	; 0x2774 <__cmpsf2>
    1642:	88 23       	and	r24, r24
    1644:	4c f4       	brge	.+18     	; 0x1658 <main+0xc60>
		__ticks = 1;
    1646:	ce 01       	movw	r24, r28
    1648:	8d 5a       	subi	r24, 0xAD	; 173
    164a:	9f 4f       	sbci	r25, 0xFF	; 255
    164c:	21 e0       	ldi	r18, 0x01	; 1
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	fc 01       	movw	r30, r24
    1652:	31 83       	std	Z+1, r19	; 0x01
    1654:	20 83       	st	Z, r18
    1656:	a2 c0       	rjmp	.+324    	; 0x179c <main+0xda4>
	else if (__tmp > 65535)
    1658:	ce 01       	movw	r24, r28
    165a:	81 5b       	subi	r24, 0xB1	; 177
    165c:	9f 4f       	sbci	r25, 0xFF	; 255
    165e:	20 e0       	ldi	r18, 0x00	; 0
    1660:	3f ef       	ldi	r19, 0xFF	; 255
    1662:	4f e7       	ldi	r20, 0x7F	; 127
    1664:	57 e4       	ldi	r21, 0x47	; 71
    1666:	dc 01       	movw	r26, r24
    1668:	6d 91       	ld	r22, X+
    166a:	7d 91       	ld	r23, X+
    166c:	8d 91       	ld	r24, X+
    166e:	9c 91       	ld	r25, X
    1670:	0e 94 3b 14 	call	0x2876	; 0x2876 <__gesf2>
    1674:	18 16       	cp	r1, r24
    1676:	0c f0       	brlt	.+2      	; 0x167a <main+0xc82>
    1678:	73 c0       	rjmp	.+230    	; 0x1760 <main+0xd68>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    167a:	ce 01       	movw	r24, r28
    167c:	85 5b       	subi	r24, 0xB5	; 181
    167e:	9f 4f       	sbci	r25, 0xFF	; 255
    1680:	20 e0       	ldi	r18, 0x00	; 0
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	40 e2       	ldi	r20, 0x20	; 32
    1686:	51 e4       	ldi	r21, 0x41	; 65
    1688:	fc 01       	movw	r30, r24
    168a:	60 81       	ld	r22, Z
    168c:	71 81       	ldd	r23, Z+1	; 0x01
    168e:	82 81       	ldd	r24, Z+2	; 0x02
    1690:	93 81       	ldd	r25, Z+3	; 0x03
    1692:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
    1696:	cd 54       	subi	r28, 0x4D	; 77
    1698:	de 4f       	sbci	r29, 0xFE	; 254
    169a:	68 83       	st	Y, r22
    169c:	79 83       	std	Y+1, r23	; 0x01
    169e:	8a 83       	std	Y+2, r24	; 0x02
    16a0:	9b 83       	std	Y+3, r25	; 0x03
    16a2:	c3 5b       	subi	r28, 0xB3	; 179
    16a4:	d1 40       	sbci	r29, 0x01	; 1
    16a6:	cd 54       	subi	r28, 0x4D	; 77
    16a8:	de 4f       	sbci	r29, 0xFE	; 254
    16aa:	88 81       	ld	r24, Y
    16ac:	99 81       	ldd	r25, Y+1	; 0x01
    16ae:	aa 81       	ldd	r26, Y+2	; 0x02
    16b0:	bb 81       	ldd	r27, Y+3	; 0x03
    16b2:	c3 5b       	subi	r28, 0xB3	; 179
    16b4:	d1 40       	sbci	r29, 0x01	; 1
    16b6:	c5 5d       	subi	r28, 0xD5	; 213
    16b8:	de 4f       	sbci	r29, 0xFE	; 254
    16ba:	88 83       	st	Y, r24
    16bc:	99 83       	std	Y+1, r25	; 0x01
    16be:	aa 83       	std	Y+2, r26	; 0x02
    16c0:	bb 83       	std	Y+3, r27	; 0x03
    16c2:	cb 52       	subi	r28, 0x2B	; 43
    16c4:	d1 40       	sbci	r29, 0x01	; 1
    16c6:	8e 01       	movw	r16, r28
    16c8:	0d 5a       	subi	r16, 0xAD	; 173
    16ca:	1f 4f       	sbci	r17, 0xFF	; 255
    16cc:	c5 5d       	subi	r28, 0xD5	; 213
    16ce:	de 4f       	sbci	r29, 0xFE	; 254
    16d0:	68 81       	ld	r22, Y
    16d2:	79 81       	ldd	r23, Y+1	; 0x01
    16d4:	8a 81       	ldd	r24, Y+2	; 0x02
    16d6:	9b 81       	ldd	r25, Y+3	; 0x03
    16d8:	cb 52       	subi	r28, 0x2B	; 43
    16da:	d1 40       	sbci	r29, 0x01	; 1
    16dc:	0e 94 bf 13 	call	0x277e	; 0x277e <__fixunssfsi>
    16e0:	c9 54       	subi	r28, 0x49	; 73
    16e2:	de 4f       	sbci	r29, 0xFE	; 254
    16e4:	68 83       	st	Y, r22
    16e6:	79 83       	std	Y+1, r23	; 0x01
    16e8:	8a 83       	std	Y+2, r24	; 0x02
    16ea:	9b 83       	std	Y+3, r25	; 0x03
    16ec:	c7 5b       	subi	r28, 0xB7	; 183
    16ee:	d1 40       	sbci	r29, 0x01	; 1
    16f0:	c9 54       	subi	r28, 0x49	; 73
    16f2:	de 4f       	sbci	r29, 0xFE	; 254
    16f4:	e8 81       	ld	r30, Y
    16f6:	f9 81       	ldd	r31, Y+1	; 0x01
    16f8:	c7 5b       	subi	r28, 0xB7	; 183
    16fa:	d1 40       	sbci	r29, 0x01	; 1
    16fc:	d8 01       	movw	r26, r16
    16fe:	ed 93       	st	X+, r30
    1700:	fc 93       	st	X, r31
		while(__ticks)
    1702:	25 c0       	rjmp	.+74     	; 0x174e <main+0xd56>
    1704:	ce 01       	movw	r24, r28
    1706:	8b 5a       	subi	r24, 0xAB	; 171
    1708:	9f 4f       	sbci	r25, 0xFF	; 255
    170a:	28 ec       	ldi	r18, 0xC8	; 200
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	dc 01       	movw	r26, r24
    1710:	2d 93       	st	X+, r18
    1712:	3c 93       	st	X, r19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1714:	ce 01       	movw	r24, r28
    1716:	8b 5a       	subi	r24, 0xAB	; 171
    1718:	9f 4f       	sbci	r25, 0xFF	; 255
    171a:	fc 01       	movw	r30, r24
    171c:	80 81       	ld	r24, Z
    171e:	91 81       	ldd	r25, Z+1	; 0x01
    1720:	01 97       	sbiw	r24, 0x01	; 1
    1722:	f1 f7       	brne	.-4      	; 0x1720 <main+0xd28>
    1724:	9e 01       	movw	r18, r28
    1726:	2b 5a       	subi	r18, 0xAB	; 171
    1728:	3f 4f       	sbci	r19, 0xFF	; 255
    172a:	d9 01       	movw	r26, r18
    172c:	8d 93       	st	X+, r24
    172e:	9c 93       	st	X, r25
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
    1730:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1732:	ce 01       	movw	r24, r28
    1734:	8d 5a       	subi	r24, 0xAD	; 173
    1736:	9f 4f       	sbci	r25, 0xFF	; 255
    1738:	9e 01       	movw	r18, r28
    173a:	2d 5a       	subi	r18, 0xAD	; 173
    173c:	3f 4f       	sbci	r19, 0xFF	; 255
    173e:	f9 01       	movw	r30, r18
    1740:	20 81       	ld	r18, Z
    1742:	31 81       	ldd	r19, Z+1	; 0x01
    1744:	21 50       	subi	r18, 0x01	; 1
    1746:	31 09       	sbc	r19, r1
    1748:	dc 01       	movw	r26, r24
    174a:	2d 93       	st	X+, r18
    174c:	3c 93       	st	X, r19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    174e:	ce 01       	movw	r24, r28
    1750:	8d 5a       	subi	r24, 0xAD	; 173
    1752:	9f 4f       	sbci	r25, 0xFF	; 255
    1754:	fc 01       	movw	r30, r24
    1756:	80 81       	ld	r24, Z
    1758:	91 81       	ldd	r25, Z+1	; 0x01
    175a:	89 2b       	or	r24, r25
    175c:	99 f6       	brne	.-90     	; 0x1704 <main+0xd0c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
    175e:	39 c0       	rjmp	.+114    	; 0x17d2 <main+0xdda>
	}
	else
		__ticks = (uint16_t)__tmp;
    1760:	8e 01       	movw	r16, r28
    1762:	0d 5a       	subi	r16, 0xAD	; 173
    1764:	1f 4f       	sbci	r17, 0xFF	; 255
    1766:	ce 01       	movw	r24, r28
    1768:	81 5b       	subi	r24, 0xB1	; 177
    176a:	9f 4f       	sbci	r25, 0xFF	; 255
    176c:	dc 01       	movw	r26, r24
    176e:	6d 91       	ld	r22, X+
    1770:	7d 91       	ld	r23, X+
    1772:	8d 91       	ld	r24, X+
    1774:	9c 91       	ld	r25, X
    1776:	0e 94 bf 13 	call	0x277e	; 0x277e <__fixunssfsi>
    177a:	c5 54       	subi	r28, 0x45	; 69
    177c:	de 4f       	sbci	r29, 0xFE	; 254
    177e:	68 83       	st	Y, r22
    1780:	79 83       	std	Y+1, r23	; 0x01
    1782:	8a 83       	std	Y+2, r24	; 0x02
    1784:	9b 83       	std	Y+3, r25	; 0x03
    1786:	cb 5b       	subi	r28, 0xBB	; 187
    1788:	d1 40       	sbci	r29, 0x01	; 1
    178a:	c5 54       	subi	r28, 0x45	; 69
    178c:	de 4f       	sbci	r29, 0xFE	; 254
    178e:	88 81       	ld	r24, Y
    1790:	99 81       	ldd	r25, Y+1	; 0x01
    1792:	cb 5b       	subi	r28, 0xBB	; 187
    1794:	d1 40       	sbci	r29, 0x01	; 1
    1796:	f8 01       	movw	r30, r16
    1798:	91 83       	std	Z+1, r25	; 0x01
    179a:	80 83       	st	Z, r24
    179c:	ce 01       	movw	r24, r28
    179e:	89 5a       	subi	r24, 0xA9	; 169
    17a0:	9f 4f       	sbci	r25, 0xFF	; 255
    17a2:	9e 01       	movw	r18, r28
    17a4:	2d 5a       	subi	r18, 0xAD	; 173
    17a6:	3f 4f       	sbci	r19, 0xFF	; 255
    17a8:	d9 01       	movw	r26, r18
    17aa:	2d 91       	ld	r18, X+
    17ac:	3c 91       	ld	r19, X
    17ae:	fc 01       	movw	r30, r24
    17b0:	31 83       	std	Z+1, r19	; 0x01
    17b2:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17b4:	ce 01       	movw	r24, r28
    17b6:	89 5a       	subi	r24, 0xA9	; 169
    17b8:	9f 4f       	sbci	r25, 0xFF	; 255
    17ba:	dc 01       	movw	r26, r24
    17bc:	8d 91       	ld	r24, X+
    17be:	9c 91       	ld	r25, X
    17c0:	01 97       	sbiw	r24, 0x01	; 1
    17c2:	f1 f7       	brne	.-4      	; 0x17c0 <main+0xdc8>
    17c4:	9e 01       	movw	r18, r28
    17c6:	29 5a       	subi	r18, 0xA9	; 169
    17c8:	3f 4f       	sbci	r19, 0xFF	; 255
    17ca:	f9 01       	movw	r30, r18
    17cc:	91 83       	std	Z+1, r25	; 0x01
    17ce:	80 83       	st	Z, r24
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
    17d0:	00 00       	nop
			_delay_ms(time);
			CLCD_voidSendCommand(1);
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	0e 94 41 00 	call	0x82	; 0x82 <CLCD_voidSendCommand>
		CLCD_voidSendCommand(1);
		CLCD_voidSendString("I can run");
		CLCD_voidWriteSpecialCharacter(&Hamoksha,0,0,15);
		_delay_ms(1000);

		for(Local_u8Counter1=15;Local_u8Counter1>1;Local_u8Counter1--)
    17d8:	8a 81       	ldd	r24, Y+2	; 0x02
    17da:	81 50       	subi	r24, 0x01	; 1
    17dc:	8a 83       	std	Y+2, r24	; 0x02
    17de:	8a 81       	ldd	r24, Y+2	; 0x02
    17e0:	82 30       	cpi	r24, 0x02	; 2
    17e2:	08 f0       	brcs	.+2      	; 0x17e6 <main+0xdee>
    17e4:	d3 cd       	rjmp	.-1114   	; 0x138c <main+0x994>
			CLCD_voidWriteSpecialCharacter(&Hamoksha_up,0,1,Local_u8Counter1);
			_delay_ms(time);
			CLCD_voidSendCommand(1);
		}

		CLCD_voidSendCommand(1);
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	0e 94 41 00 	call	0x82	; 0x82 <CLCD_voidSendCommand>
		CLCD_voidSendString("I can dance");
    17ec:	87 e8       	ldi	r24, 0x87	; 135
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	0e 94 62 02 	call	0x4c4	; 0x4c4 <CLCD_voidSendString>
		CLCD_voidWriteSpecialCharacter(&Hamoksha,0,0,15);
    17f4:	ce 01       	movw	r24, r28
    17f6:	87 53       	subi	r24, 0x37	; 55
    17f8:	9f 4f       	sbci	r25, 0xFF	; 255
    17fa:	2f e0       	ldi	r18, 0x0F	; 15
    17fc:	40 e0       	ldi	r20, 0x00	; 0
    17fe:	60 e0       	ldi	r22, 0x00	; 0
    1800:	0e 94 ae 02 	call	0x55c	; 0x55c <CLCD_voidWriteSpecialCharacter>
    1804:	9e 01       	movw	r18, r28
    1806:	29 59       	subi	r18, 0x99	; 153
    1808:	3f 4f       	sbci	r19, 0xFF	; 255
    180a:	80 e0       	ldi	r24, 0x00	; 0
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	aa e7       	ldi	r26, 0x7A	; 122
    1810:	b4 e4       	ldi	r27, 0x44	; 68
    1812:	f9 01       	movw	r30, r18
    1814:	80 83       	st	Z, r24
    1816:	91 83       	std	Z+1, r25	; 0x01
    1818:	a2 83       	std	Z+2, r26	; 0x02
    181a:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    181c:	8e 01       	movw	r16, r28
    181e:	05 59       	subi	r16, 0x95	; 149
    1820:	1f 4f       	sbci	r17, 0xFF	; 255
    1822:	ce 01       	movw	r24, r28
    1824:	89 59       	subi	r24, 0x99	; 153
    1826:	9f 4f       	sbci	r25, 0xFF	; 255
    1828:	20 e0       	ldi	r18, 0x00	; 0
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	4a ef       	ldi	r20, 0xFA	; 250
    182e:	54 e4       	ldi	r21, 0x44	; 68
    1830:	dc 01       	movw	r26, r24
    1832:	6d 91       	ld	r22, X+
    1834:	7d 91       	ld	r23, X+
    1836:	8d 91       	ld	r24, X+
    1838:	9c 91       	ld	r25, X
    183a:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
    183e:	c1 54       	subi	r28, 0x41	; 65
    1840:	de 4f       	sbci	r29, 0xFE	; 254
    1842:	68 83       	st	Y, r22
    1844:	79 83       	std	Y+1, r23	; 0x01
    1846:	8a 83       	std	Y+2, r24	; 0x02
    1848:	9b 83       	std	Y+3, r25	; 0x03
    184a:	cf 5b       	subi	r28, 0xBF	; 191
    184c:	d1 40       	sbci	r29, 0x01	; 1
    184e:	c1 54       	subi	r28, 0x41	; 65
    1850:	de 4f       	sbci	r29, 0xFE	; 254
    1852:	88 81       	ld	r24, Y
    1854:	99 81       	ldd	r25, Y+1	; 0x01
    1856:	aa 81       	ldd	r26, Y+2	; 0x02
    1858:	bb 81       	ldd	r27, Y+3	; 0x03
    185a:	cf 5b       	subi	r28, 0xBF	; 191
    185c:	d1 40       	sbci	r29, 0x01	; 1
    185e:	f8 01       	movw	r30, r16
    1860:	80 83       	st	Z, r24
    1862:	91 83       	std	Z+1, r25	; 0x01
    1864:	a2 83       	std	Z+2, r26	; 0x02
    1866:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1868:	ce 01       	movw	r24, r28
    186a:	85 59       	subi	r24, 0x95	; 149
    186c:	9f 4f       	sbci	r25, 0xFF	; 255
    186e:	20 e0       	ldi	r18, 0x00	; 0
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	40 e8       	ldi	r20, 0x80	; 128
    1874:	5f e3       	ldi	r21, 0x3F	; 63
    1876:	dc 01       	movw	r26, r24
    1878:	6d 91       	ld	r22, X+
    187a:	7d 91       	ld	r23, X+
    187c:	8d 91       	ld	r24, X+
    187e:	9c 91       	ld	r25, X
    1880:	0e 94 ba 13 	call	0x2774	; 0x2774 <__cmpsf2>
    1884:	88 23       	and	r24, r24
    1886:	4c f4       	brge	.+18     	; 0x189a <main+0xea2>
		__ticks = 1;
    1888:	ce 01       	movw	r24, r28
    188a:	81 59       	subi	r24, 0x91	; 145
    188c:	9f 4f       	sbci	r25, 0xFF	; 255
    188e:	21 e0       	ldi	r18, 0x01	; 1
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	fc 01       	movw	r30, r24
    1894:	31 83       	std	Z+1, r19	; 0x01
    1896:	20 83       	st	Z, r18
    1898:	a2 c0       	rjmp	.+324    	; 0x19de <main+0xfe6>
	else if (__tmp > 65535)
    189a:	ce 01       	movw	r24, r28
    189c:	85 59       	subi	r24, 0x95	; 149
    189e:	9f 4f       	sbci	r25, 0xFF	; 255
    18a0:	20 e0       	ldi	r18, 0x00	; 0
    18a2:	3f ef       	ldi	r19, 0xFF	; 255
    18a4:	4f e7       	ldi	r20, 0x7F	; 127
    18a6:	57 e4       	ldi	r21, 0x47	; 71
    18a8:	dc 01       	movw	r26, r24
    18aa:	6d 91       	ld	r22, X+
    18ac:	7d 91       	ld	r23, X+
    18ae:	8d 91       	ld	r24, X+
    18b0:	9c 91       	ld	r25, X
    18b2:	0e 94 3b 14 	call	0x2876	; 0x2876 <__gesf2>
    18b6:	18 16       	cp	r1, r24
    18b8:	0c f0       	brlt	.+2      	; 0x18bc <main+0xec4>
    18ba:	73 c0       	rjmp	.+230    	; 0x19a2 <main+0xfaa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18bc:	ce 01       	movw	r24, r28
    18be:	89 59       	subi	r24, 0x99	; 153
    18c0:	9f 4f       	sbci	r25, 0xFF	; 255
    18c2:	20 e0       	ldi	r18, 0x00	; 0
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	40 e2       	ldi	r20, 0x20	; 32
    18c8:	51 e4       	ldi	r21, 0x41	; 65
    18ca:	fc 01       	movw	r30, r24
    18cc:	60 81       	ld	r22, Z
    18ce:	71 81       	ldd	r23, Z+1	; 0x01
    18d0:	82 81       	ldd	r24, Z+2	; 0x02
    18d2:	93 81       	ldd	r25, Z+3	; 0x03
    18d4:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
    18d8:	cd 53       	subi	r28, 0x3D	; 61
    18da:	de 4f       	sbci	r29, 0xFE	; 254
    18dc:	68 83       	st	Y, r22
    18de:	79 83       	std	Y+1, r23	; 0x01
    18e0:	8a 83       	std	Y+2, r24	; 0x02
    18e2:	9b 83       	std	Y+3, r25	; 0x03
    18e4:	c3 5c       	subi	r28, 0xC3	; 195
    18e6:	d1 40       	sbci	r29, 0x01	; 1
    18e8:	cd 53       	subi	r28, 0x3D	; 61
    18ea:	de 4f       	sbci	r29, 0xFE	; 254
    18ec:	88 81       	ld	r24, Y
    18ee:	99 81       	ldd	r25, Y+1	; 0x01
    18f0:	aa 81       	ldd	r26, Y+2	; 0x02
    18f2:	bb 81       	ldd	r27, Y+3	; 0x03
    18f4:	c3 5c       	subi	r28, 0xC3	; 195
    18f6:	d1 40       	sbci	r29, 0x01	; 1
    18f8:	cd 5c       	subi	r28, 0xCD	; 205
    18fa:	de 4f       	sbci	r29, 0xFE	; 254
    18fc:	88 83       	st	Y, r24
    18fe:	99 83       	std	Y+1, r25	; 0x01
    1900:	aa 83       	std	Y+2, r26	; 0x02
    1902:	bb 83       	std	Y+3, r27	; 0x03
    1904:	c3 53       	subi	r28, 0x33	; 51
    1906:	d1 40       	sbci	r29, 0x01	; 1
    1908:	8e 01       	movw	r16, r28
    190a:	01 59       	subi	r16, 0x91	; 145
    190c:	1f 4f       	sbci	r17, 0xFF	; 255
    190e:	cd 5c       	subi	r28, 0xCD	; 205
    1910:	de 4f       	sbci	r29, 0xFE	; 254
    1912:	68 81       	ld	r22, Y
    1914:	79 81       	ldd	r23, Y+1	; 0x01
    1916:	8a 81       	ldd	r24, Y+2	; 0x02
    1918:	9b 81       	ldd	r25, Y+3	; 0x03
    191a:	c3 53       	subi	r28, 0x33	; 51
    191c:	d1 40       	sbci	r29, 0x01	; 1
    191e:	0e 94 bf 13 	call	0x277e	; 0x277e <__fixunssfsi>
    1922:	c9 53       	subi	r28, 0x39	; 57
    1924:	de 4f       	sbci	r29, 0xFE	; 254
    1926:	68 83       	st	Y, r22
    1928:	79 83       	std	Y+1, r23	; 0x01
    192a:	8a 83       	std	Y+2, r24	; 0x02
    192c:	9b 83       	std	Y+3, r25	; 0x03
    192e:	c7 5c       	subi	r28, 0xC7	; 199
    1930:	d1 40       	sbci	r29, 0x01	; 1
    1932:	c9 53       	subi	r28, 0x39	; 57
    1934:	de 4f       	sbci	r29, 0xFE	; 254
    1936:	e8 81       	ld	r30, Y
    1938:	f9 81       	ldd	r31, Y+1	; 0x01
    193a:	c7 5c       	subi	r28, 0xC7	; 199
    193c:	d1 40       	sbci	r29, 0x01	; 1
    193e:	d8 01       	movw	r26, r16
    1940:	ed 93       	st	X+, r30
    1942:	fc 93       	st	X, r31
		while(__ticks)
    1944:	25 c0       	rjmp	.+74     	; 0x1990 <main+0xf98>
    1946:	ce 01       	movw	r24, r28
    1948:	8f 58       	subi	r24, 0x8F	; 143
    194a:	9f 4f       	sbci	r25, 0xFF	; 255
    194c:	28 ec       	ldi	r18, 0xC8	; 200
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	dc 01       	movw	r26, r24
    1952:	2d 93       	st	X+, r18
    1954:	3c 93       	st	X, r19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1956:	ce 01       	movw	r24, r28
    1958:	8f 58       	subi	r24, 0x8F	; 143
    195a:	9f 4f       	sbci	r25, 0xFF	; 255
    195c:	fc 01       	movw	r30, r24
    195e:	80 81       	ld	r24, Z
    1960:	91 81       	ldd	r25, Z+1	; 0x01
    1962:	01 97       	sbiw	r24, 0x01	; 1
    1964:	f1 f7       	brne	.-4      	; 0x1962 <main+0xf6a>
    1966:	9e 01       	movw	r18, r28
    1968:	2f 58       	subi	r18, 0x8F	; 143
    196a:	3f 4f       	sbci	r19, 0xFF	; 255
    196c:	d9 01       	movw	r26, r18
    196e:	8d 93       	st	X+, r24
    1970:	9c 93       	st	X, r25
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
    1972:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1974:	ce 01       	movw	r24, r28
    1976:	81 59       	subi	r24, 0x91	; 145
    1978:	9f 4f       	sbci	r25, 0xFF	; 255
    197a:	9e 01       	movw	r18, r28
    197c:	21 59       	subi	r18, 0x91	; 145
    197e:	3f 4f       	sbci	r19, 0xFF	; 255
    1980:	f9 01       	movw	r30, r18
    1982:	20 81       	ld	r18, Z
    1984:	31 81       	ldd	r19, Z+1	; 0x01
    1986:	21 50       	subi	r18, 0x01	; 1
    1988:	31 09       	sbc	r19, r1
    198a:	dc 01       	movw	r26, r24
    198c:	2d 93       	st	X+, r18
    198e:	3c 93       	st	X, r19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1990:	ce 01       	movw	r24, r28
    1992:	81 59       	subi	r24, 0x91	; 145
    1994:	9f 4f       	sbci	r25, 0xFF	; 255
    1996:	fc 01       	movw	r30, r24
    1998:	80 81       	ld	r24, Z
    199a:	91 81       	ldd	r25, Z+1	; 0x01
    199c:	89 2b       	or	r24, r25
    199e:	99 f6       	brne	.-90     	; 0x1946 <main+0xf4e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
    19a0:	39 c0       	rjmp	.+114    	; 0x1a14 <main+0x101c>
	}
	else
		__ticks = (uint16_t)__tmp;
    19a2:	8e 01       	movw	r16, r28
    19a4:	01 59       	subi	r16, 0x91	; 145
    19a6:	1f 4f       	sbci	r17, 0xFF	; 255
    19a8:	ce 01       	movw	r24, r28
    19aa:	85 59       	subi	r24, 0x95	; 149
    19ac:	9f 4f       	sbci	r25, 0xFF	; 255
    19ae:	dc 01       	movw	r26, r24
    19b0:	6d 91       	ld	r22, X+
    19b2:	7d 91       	ld	r23, X+
    19b4:	8d 91       	ld	r24, X+
    19b6:	9c 91       	ld	r25, X
    19b8:	0e 94 bf 13 	call	0x277e	; 0x277e <__fixunssfsi>
    19bc:	c5 53       	subi	r28, 0x35	; 53
    19be:	de 4f       	sbci	r29, 0xFE	; 254
    19c0:	68 83       	st	Y, r22
    19c2:	79 83       	std	Y+1, r23	; 0x01
    19c4:	8a 83       	std	Y+2, r24	; 0x02
    19c6:	9b 83       	std	Y+3, r25	; 0x03
    19c8:	cb 5c       	subi	r28, 0xCB	; 203
    19ca:	d1 40       	sbci	r29, 0x01	; 1
    19cc:	c5 53       	subi	r28, 0x35	; 53
    19ce:	de 4f       	sbci	r29, 0xFE	; 254
    19d0:	88 81       	ld	r24, Y
    19d2:	99 81       	ldd	r25, Y+1	; 0x01
    19d4:	cb 5c       	subi	r28, 0xCB	; 203
    19d6:	d1 40       	sbci	r29, 0x01	; 1
    19d8:	f8 01       	movw	r30, r16
    19da:	91 83       	std	Z+1, r25	; 0x01
    19dc:	80 83       	st	Z, r24
    19de:	ce 01       	movw	r24, r28
    19e0:	8d 58       	subi	r24, 0x8D	; 141
    19e2:	9f 4f       	sbci	r25, 0xFF	; 255
    19e4:	9e 01       	movw	r18, r28
    19e6:	21 59       	subi	r18, 0x91	; 145
    19e8:	3f 4f       	sbci	r19, 0xFF	; 255
    19ea:	d9 01       	movw	r26, r18
    19ec:	2d 91       	ld	r18, X+
    19ee:	3c 91       	ld	r19, X
    19f0:	fc 01       	movw	r30, r24
    19f2:	31 83       	std	Z+1, r19	; 0x01
    19f4:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19f6:	ce 01       	movw	r24, r28
    19f8:	8d 58       	subi	r24, 0x8D	; 141
    19fa:	9f 4f       	sbci	r25, 0xFF	; 255
    19fc:	dc 01       	movw	r26, r24
    19fe:	8d 91       	ld	r24, X+
    1a00:	9c 91       	ld	r25, X
    1a02:	01 97       	sbiw	r24, 0x01	; 1
    1a04:	f1 f7       	brne	.-4      	; 0x1a02 <main+0x100a>
    1a06:	9e 01       	movw	r18, r28
    1a08:	2d 58       	subi	r18, 0x8D	; 141
    1a0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a0c:	f9 01       	movw	r30, r18
    1a0e:	91 83       	std	Z+1, r25	; 0x01
    1a10:	80 83       	st	Z, r24
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
    1a12:	00 00       	nop
		_delay_ms(1000);

		for(Local_u8Counter2=0;Local_u8Counter2<10;Local_u8Counter2++)
    1a14:	1b 82       	std	Y+3, r1	; 0x03
    1a16:	23 c2       	rjmp	.+1094   	; 0x1e5e <main+0x1466>
		{
			CLCD_voidWriteSpecialCharacter(&dance1,0,0,15);
    1a18:	ce 01       	movw	r24, r28
    1a1a:	8c 50       	subi	r24, 0x0C	; 12
    1a1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a1e:	2f e0       	ldi	r18, 0x0F	; 15
    1a20:	40 e0       	ldi	r20, 0x00	; 0
    1a22:	60 e0       	ldi	r22, 0x00	; 0
    1a24:	0e 94 ae 02 	call	0x55c	; 0x55c <CLCD_voidWriteSpecialCharacter>
    1a28:	9e 01       	movw	r18, r28
    1a2a:	2d 57       	subi	r18, 0x7D	; 125
    1a2c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a2e:	80 e0       	ldi	r24, 0x00	; 0
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	ac ed       	ldi	r26, 0xDC	; 220
    1a34:	b2 e4       	ldi	r27, 0x42	; 66
    1a36:	f9 01       	movw	r30, r18
    1a38:	80 83       	st	Z, r24
    1a3a:	91 83       	std	Z+1, r25	; 0x01
    1a3c:	a2 83       	std	Z+2, r26	; 0x02
    1a3e:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1a40:	8e 01       	movw	r16, r28
    1a42:	09 57       	subi	r16, 0x79	; 121
    1a44:	1f 4f       	sbci	r17, 0xFF	; 255
    1a46:	ce 01       	movw	r24, r28
    1a48:	8d 57       	subi	r24, 0x7D	; 125
    1a4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	4a ef       	ldi	r20, 0xFA	; 250
    1a52:	54 e4       	ldi	r21, 0x44	; 68
    1a54:	dc 01       	movw	r26, r24
    1a56:	6d 91       	ld	r22, X+
    1a58:	7d 91       	ld	r23, X+
    1a5a:	8d 91       	ld	r24, X+
    1a5c:	9c 91       	ld	r25, X
    1a5e:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
    1a62:	c1 53       	subi	r28, 0x31	; 49
    1a64:	de 4f       	sbci	r29, 0xFE	; 254
    1a66:	68 83       	st	Y, r22
    1a68:	79 83       	std	Y+1, r23	; 0x01
    1a6a:	8a 83       	std	Y+2, r24	; 0x02
    1a6c:	9b 83       	std	Y+3, r25	; 0x03
    1a6e:	cf 5c       	subi	r28, 0xCF	; 207
    1a70:	d1 40       	sbci	r29, 0x01	; 1
    1a72:	c1 53       	subi	r28, 0x31	; 49
    1a74:	de 4f       	sbci	r29, 0xFE	; 254
    1a76:	88 81       	ld	r24, Y
    1a78:	99 81       	ldd	r25, Y+1	; 0x01
    1a7a:	aa 81       	ldd	r26, Y+2	; 0x02
    1a7c:	bb 81       	ldd	r27, Y+3	; 0x03
    1a7e:	cf 5c       	subi	r28, 0xCF	; 207
    1a80:	d1 40       	sbci	r29, 0x01	; 1
    1a82:	f8 01       	movw	r30, r16
    1a84:	80 83       	st	Z, r24
    1a86:	91 83       	std	Z+1, r25	; 0x01
    1a88:	a2 83       	std	Z+2, r26	; 0x02
    1a8a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a8c:	ce 01       	movw	r24, r28
    1a8e:	89 57       	subi	r24, 0x79	; 121
    1a90:	9f 4f       	sbci	r25, 0xFF	; 255
    1a92:	20 e0       	ldi	r18, 0x00	; 0
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	40 e8       	ldi	r20, 0x80	; 128
    1a98:	5f e3       	ldi	r21, 0x3F	; 63
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	6d 91       	ld	r22, X+
    1a9e:	7d 91       	ld	r23, X+
    1aa0:	8d 91       	ld	r24, X+
    1aa2:	9c 91       	ld	r25, X
    1aa4:	0e 94 ba 13 	call	0x2774	; 0x2774 <__cmpsf2>
    1aa8:	88 23       	and	r24, r24
    1aaa:	4c f4       	brge	.+18     	; 0x1abe <main+0x10c6>
		__ticks = 1;
    1aac:	ce 01       	movw	r24, r28
    1aae:	85 57       	subi	r24, 0x75	; 117
    1ab0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ab2:	21 e0       	ldi	r18, 0x01	; 1
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	fc 01       	movw	r30, r24
    1ab8:	31 83       	std	Z+1, r19	; 0x01
    1aba:	20 83       	st	Z, r18
    1abc:	a2 c0       	rjmp	.+324    	; 0x1c02 <main+0x120a>
	else if (__tmp > 65535)
    1abe:	ce 01       	movw	r24, r28
    1ac0:	89 57       	subi	r24, 0x79	; 121
    1ac2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac4:	20 e0       	ldi	r18, 0x00	; 0
    1ac6:	3f ef       	ldi	r19, 0xFF	; 255
    1ac8:	4f e7       	ldi	r20, 0x7F	; 127
    1aca:	57 e4       	ldi	r21, 0x47	; 71
    1acc:	dc 01       	movw	r26, r24
    1ace:	6d 91       	ld	r22, X+
    1ad0:	7d 91       	ld	r23, X+
    1ad2:	8d 91       	ld	r24, X+
    1ad4:	9c 91       	ld	r25, X
    1ad6:	0e 94 3b 14 	call	0x2876	; 0x2876 <__gesf2>
    1ada:	18 16       	cp	r1, r24
    1adc:	0c f0       	brlt	.+2      	; 0x1ae0 <main+0x10e8>
    1ade:	73 c0       	rjmp	.+230    	; 0x1bc6 <main+0x11ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ae0:	ce 01       	movw	r24, r28
    1ae2:	8d 57       	subi	r24, 0x7D	; 125
    1ae4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	40 e2       	ldi	r20, 0x20	; 32
    1aec:	51 e4       	ldi	r21, 0x41	; 65
    1aee:	fc 01       	movw	r30, r24
    1af0:	60 81       	ld	r22, Z
    1af2:	71 81       	ldd	r23, Z+1	; 0x01
    1af4:	82 81       	ldd	r24, Z+2	; 0x02
    1af6:	93 81       	ldd	r25, Z+3	; 0x03
    1af8:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
    1afc:	cd 52       	subi	r28, 0x2D	; 45
    1afe:	de 4f       	sbci	r29, 0xFE	; 254
    1b00:	68 83       	st	Y, r22
    1b02:	79 83       	std	Y+1, r23	; 0x01
    1b04:	8a 83       	std	Y+2, r24	; 0x02
    1b06:	9b 83       	std	Y+3, r25	; 0x03
    1b08:	c3 5d       	subi	r28, 0xD3	; 211
    1b0a:	d1 40       	sbci	r29, 0x01	; 1
    1b0c:	cd 52       	subi	r28, 0x2D	; 45
    1b0e:	de 4f       	sbci	r29, 0xFE	; 254
    1b10:	88 81       	ld	r24, Y
    1b12:	99 81       	ldd	r25, Y+1	; 0x01
    1b14:	aa 81       	ldd	r26, Y+2	; 0x02
    1b16:	bb 81       	ldd	r27, Y+3	; 0x03
    1b18:	c3 5d       	subi	r28, 0xD3	; 211
    1b1a:	d1 40       	sbci	r29, 0x01	; 1
    1b1c:	c5 5c       	subi	r28, 0xC5	; 197
    1b1e:	de 4f       	sbci	r29, 0xFE	; 254
    1b20:	88 83       	st	Y, r24
    1b22:	99 83       	std	Y+1, r25	; 0x01
    1b24:	aa 83       	std	Y+2, r26	; 0x02
    1b26:	bb 83       	std	Y+3, r27	; 0x03
    1b28:	cb 53       	subi	r28, 0x3B	; 59
    1b2a:	d1 40       	sbci	r29, 0x01	; 1
    1b2c:	8e 01       	movw	r16, r28
    1b2e:	05 57       	subi	r16, 0x75	; 117
    1b30:	1f 4f       	sbci	r17, 0xFF	; 255
    1b32:	c5 5c       	subi	r28, 0xC5	; 197
    1b34:	de 4f       	sbci	r29, 0xFE	; 254
    1b36:	68 81       	ld	r22, Y
    1b38:	79 81       	ldd	r23, Y+1	; 0x01
    1b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b3e:	cb 53       	subi	r28, 0x3B	; 59
    1b40:	d1 40       	sbci	r29, 0x01	; 1
    1b42:	0e 94 bf 13 	call	0x277e	; 0x277e <__fixunssfsi>
    1b46:	c9 52       	subi	r28, 0x29	; 41
    1b48:	de 4f       	sbci	r29, 0xFE	; 254
    1b4a:	68 83       	st	Y, r22
    1b4c:	79 83       	std	Y+1, r23	; 0x01
    1b4e:	8a 83       	std	Y+2, r24	; 0x02
    1b50:	9b 83       	std	Y+3, r25	; 0x03
    1b52:	c7 5d       	subi	r28, 0xD7	; 215
    1b54:	d1 40       	sbci	r29, 0x01	; 1
    1b56:	c9 52       	subi	r28, 0x29	; 41
    1b58:	de 4f       	sbci	r29, 0xFE	; 254
    1b5a:	e8 81       	ld	r30, Y
    1b5c:	f9 81       	ldd	r31, Y+1	; 0x01
    1b5e:	c7 5d       	subi	r28, 0xD7	; 215
    1b60:	d1 40       	sbci	r29, 0x01	; 1
    1b62:	d8 01       	movw	r26, r16
    1b64:	ed 93       	st	X+, r30
    1b66:	fc 93       	st	X, r31
		while(__ticks)
    1b68:	25 c0       	rjmp	.+74     	; 0x1bb4 <main+0x11bc>
    1b6a:	ce 01       	movw	r24, r28
    1b6c:	83 57       	subi	r24, 0x73	; 115
    1b6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b70:	28 ec       	ldi	r18, 0xC8	; 200
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	dc 01       	movw	r26, r24
    1b76:	2d 93       	st	X+, r18
    1b78:	3c 93       	st	X, r19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b7a:	ce 01       	movw	r24, r28
    1b7c:	83 57       	subi	r24, 0x73	; 115
    1b7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b80:	fc 01       	movw	r30, r24
    1b82:	80 81       	ld	r24, Z
    1b84:	91 81       	ldd	r25, Z+1	; 0x01
    1b86:	01 97       	sbiw	r24, 0x01	; 1
    1b88:	f1 f7       	brne	.-4      	; 0x1b86 <main+0x118e>
    1b8a:	9e 01       	movw	r18, r28
    1b8c:	23 57       	subi	r18, 0x73	; 115
    1b8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b90:	d9 01       	movw	r26, r18
    1b92:	8d 93       	st	X+, r24
    1b94:	9c 93       	st	X, r25
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
    1b96:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b98:	ce 01       	movw	r24, r28
    1b9a:	85 57       	subi	r24, 0x75	; 117
    1b9c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b9e:	9e 01       	movw	r18, r28
    1ba0:	25 57       	subi	r18, 0x75	; 117
    1ba2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ba4:	f9 01       	movw	r30, r18
    1ba6:	20 81       	ld	r18, Z
    1ba8:	31 81       	ldd	r19, Z+1	; 0x01
    1baa:	21 50       	subi	r18, 0x01	; 1
    1bac:	31 09       	sbc	r19, r1
    1bae:	dc 01       	movw	r26, r24
    1bb0:	2d 93       	st	X+, r18
    1bb2:	3c 93       	st	X, r19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bb4:	ce 01       	movw	r24, r28
    1bb6:	85 57       	subi	r24, 0x75	; 117
    1bb8:	9f 4f       	sbci	r25, 0xFF	; 255
    1bba:	fc 01       	movw	r30, r24
    1bbc:	80 81       	ld	r24, Z
    1bbe:	91 81       	ldd	r25, Z+1	; 0x01
    1bc0:	89 2b       	or	r24, r25
    1bc2:	99 f6       	brne	.-90     	; 0x1b6a <main+0x1172>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
    1bc4:	39 c0       	rjmp	.+114    	; 0x1c38 <main+0x1240>
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc6:	8e 01       	movw	r16, r28
    1bc8:	05 57       	subi	r16, 0x75	; 117
    1bca:	1f 4f       	sbci	r17, 0xFF	; 255
    1bcc:	ce 01       	movw	r24, r28
    1bce:	89 57       	subi	r24, 0x79	; 121
    1bd0:	9f 4f       	sbci	r25, 0xFF	; 255
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	6d 91       	ld	r22, X+
    1bd6:	7d 91       	ld	r23, X+
    1bd8:	8d 91       	ld	r24, X+
    1bda:	9c 91       	ld	r25, X
    1bdc:	0e 94 bf 13 	call	0x277e	; 0x277e <__fixunssfsi>
    1be0:	c5 52       	subi	r28, 0x25	; 37
    1be2:	de 4f       	sbci	r29, 0xFE	; 254
    1be4:	68 83       	st	Y, r22
    1be6:	79 83       	std	Y+1, r23	; 0x01
    1be8:	8a 83       	std	Y+2, r24	; 0x02
    1bea:	9b 83       	std	Y+3, r25	; 0x03
    1bec:	cb 5d       	subi	r28, 0xDB	; 219
    1bee:	d1 40       	sbci	r29, 0x01	; 1
    1bf0:	c5 52       	subi	r28, 0x25	; 37
    1bf2:	de 4f       	sbci	r29, 0xFE	; 254
    1bf4:	88 81       	ld	r24, Y
    1bf6:	99 81       	ldd	r25, Y+1	; 0x01
    1bf8:	cb 5d       	subi	r28, 0xDB	; 219
    1bfa:	d1 40       	sbci	r29, 0x01	; 1
    1bfc:	f8 01       	movw	r30, r16
    1bfe:	91 83       	std	Z+1, r25	; 0x01
    1c00:	80 83       	st	Z, r24
    1c02:	ce 01       	movw	r24, r28
    1c04:	81 57       	subi	r24, 0x71	; 113
    1c06:	9f 4f       	sbci	r25, 0xFF	; 255
    1c08:	9e 01       	movw	r18, r28
    1c0a:	25 57       	subi	r18, 0x75	; 117
    1c0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c0e:	d9 01       	movw	r26, r18
    1c10:	2d 91       	ld	r18, X+
    1c12:	3c 91       	ld	r19, X
    1c14:	fc 01       	movw	r30, r24
    1c16:	31 83       	std	Z+1, r19	; 0x01
    1c18:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c1a:	ce 01       	movw	r24, r28
    1c1c:	81 57       	subi	r24, 0x71	; 113
    1c1e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c20:	dc 01       	movw	r26, r24
    1c22:	8d 91       	ld	r24, X+
    1c24:	9c 91       	ld	r25, X
    1c26:	01 97       	sbiw	r24, 0x01	; 1
    1c28:	f1 f7       	brne	.-4      	; 0x1c26 <main+0x122e>
    1c2a:	9e 01       	movw	r18, r28
    1c2c:	21 57       	subi	r18, 0x71	; 113
    1c2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c30:	f9 01       	movw	r30, r18
    1c32:	91 83       	std	Z+1, r25	; 0x01
    1c34:	80 83       	st	Z, r24
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
    1c36:	00 00       	nop
			_delay_ms(110);

			CLCD_voidWriteSpecialCharacter(&dance2,0,0,15);
    1c38:	ce 01       	movw	r24, r28
    1c3a:	85 50       	subi	r24, 0x05	; 5
    1c3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c3e:	2f e0       	ldi	r18, 0x0F	; 15
    1c40:	40 e0       	ldi	r20, 0x00	; 0
    1c42:	60 e0       	ldi	r22, 0x00	; 0
    1c44:	0e 94 ae 02 	call	0x55c	; 0x55c <CLCD_voidWriteSpecialCharacter>
    1c48:	9e 01       	movw	r18, r28
    1c4a:	2b 58       	subi	r18, 0x8B	; 139
    1c4c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c4e:	80 e0       	ldi	r24, 0x00	; 0
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	ac ed       	ldi	r26, 0xDC	; 220
    1c54:	b2 e4       	ldi	r27, 0x42	; 66
    1c56:	f9 01       	movw	r30, r18
    1c58:	80 83       	st	Z, r24
    1c5a:	91 83       	std	Z+1, r25	; 0x01
    1c5c:	a2 83       	std	Z+2, r26	; 0x02
    1c5e:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1c60:	8e 01       	movw	r16, r28
    1c62:	07 58       	subi	r16, 0x87	; 135
    1c64:	1f 4f       	sbci	r17, 0xFF	; 255
    1c66:	ce 01       	movw	r24, r28
    1c68:	8b 58       	subi	r24, 0x8B	; 139
    1c6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	4a ef       	ldi	r20, 0xFA	; 250
    1c72:	54 e4       	ldi	r21, 0x44	; 68
    1c74:	dc 01       	movw	r26, r24
    1c76:	6d 91       	ld	r22, X+
    1c78:	7d 91       	ld	r23, X+
    1c7a:	8d 91       	ld	r24, X+
    1c7c:	9c 91       	ld	r25, X
    1c7e:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
    1c82:	c1 52       	subi	r28, 0x21	; 33
    1c84:	de 4f       	sbci	r29, 0xFE	; 254
    1c86:	68 83       	st	Y, r22
    1c88:	79 83       	std	Y+1, r23	; 0x01
    1c8a:	8a 83       	std	Y+2, r24	; 0x02
    1c8c:	9b 83       	std	Y+3, r25	; 0x03
    1c8e:	cf 5d       	subi	r28, 0xDF	; 223
    1c90:	d1 40       	sbci	r29, 0x01	; 1
    1c92:	c1 52       	subi	r28, 0x21	; 33
    1c94:	de 4f       	sbci	r29, 0xFE	; 254
    1c96:	88 81       	ld	r24, Y
    1c98:	99 81       	ldd	r25, Y+1	; 0x01
    1c9a:	aa 81       	ldd	r26, Y+2	; 0x02
    1c9c:	bb 81       	ldd	r27, Y+3	; 0x03
    1c9e:	cf 5d       	subi	r28, 0xDF	; 223
    1ca0:	d1 40       	sbci	r29, 0x01	; 1
    1ca2:	f8 01       	movw	r30, r16
    1ca4:	80 83       	st	Z, r24
    1ca6:	91 83       	std	Z+1, r25	; 0x01
    1ca8:	a2 83       	std	Z+2, r26	; 0x02
    1caa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cac:	ce 01       	movw	r24, r28
    1cae:	87 58       	subi	r24, 0x87	; 135
    1cb0:	9f 4f       	sbci	r25, 0xFF	; 255
    1cb2:	20 e0       	ldi	r18, 0x00	; 0
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	40 e8       	ldi	r20, 0x80	; 128
    1cb8:	5f e3       	ldi	r21, 0x3F	; 63
    1cba:	dc 01       	movw	r26, r24
    1cbc:	6d 91       	ld	r22, X+
    1cbe:	7d 91       	ld	r23, X+
    1cc0:	8d 91       	ld	r24, X+
    1cc2:	9c 91       	ld	r25, X
    1cc4:	0e 94 ba 13 	call	0x2774	; 0x2774 <__cmpsf2>
    1cc8:	88 23       	and	r24, r24
    1cca:	4c f4       	brge	.+18     	; 0x1cde <main+0x12e6>
		__ticks = 1;
    1ccc:	ce 01       	movw	r24, r28
    1cce:	83 58       	subi	r24, 0x83	; 131
    1cd0:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd2:	21 e0       	ldi	r18, 0x01	; 1
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	fc 01       	movw	r30, r24
    1cd8:	31 83       	std	Z+1, r19	; 0x01
    1cda:	20 83       	st	Z, r18
    1cdc:	a2 c0       	rjmp	.+324    	; 0x1e22 <main+0x142a>
	else if (__tmp > 65535)
    1cde:	ce 01       	movw	r24, r28
    1ce0:	87 58       	subi	r24, 0x87	; 135
    1ce2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ce4:	20 e0       	ldi	r18, 0x00	; 0
    1ce6:	3f ef       	ldi	r19, 0xFF	; 255
    1ce8:	4f e7       	ldi	r20, 0x7F	; 127
    1cea:	57 e4       	ldi	r21, 0x47	; 71
    1cec:	dc 01       	movw	r26, r24
    1cee:	6d 91       	ld	r22, X+
    1cf0:	7d 91       	ld	r23, X+
    1cf2:	8d 91       	ld	r24, X+
    1cf4:	9c 91       	ld	r25, X
    1cf6:	0e 94 3b 14 	call	0x2876	; 0x2876 <__gesf2>
    1cfa:	18 16       	cp	r1, r24
    1cfc:	0c f0       	brlt	.+2      	; 0x1d00 <main+0x1308>
    1cfe:	73 c0       	rjmp	.+230    	; 0x1de6 <main+0x13ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d00:	ce 01       	movw	r24, r28
    1d02:	8b 58       	subi	r24, 0x8B	; 139
    1d04:	9f 4f       	sbci	r25, 0xFF	; 255
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	40 e2       	ldi	r20, 0x20	; 32
    1d0c:	51 e4       	ldi	r21, 0x41	; 65
    1d0e:	fc 01       	movw	r30, r24
    1d10:	60 81       	ld	r22, Z
    1d12:	71 81       	ldd	r23, Z+1	; 0x01
    1d14:	82 81       	ldd	r24, Z+2	; 0x02
    1d16:	93 81       	ldd	r25, Z+3	; 0x03
    1d18:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
    1d1c:	cd 51       	subi	r28, 0x1D	; 29
    1d1e:	de 4f       	sbci	r29, 0xFE	; 254
    1d20:	68 83       	st	Y, r22
    1d22:	79 83       	std	Y+1, r23	; 0x01
    1d24:	8a 83       	std	Y+2, r24	; 0x02
    1d26:	9b 83       	std	Y+3, r25	; 0x03
    1d28:	c3 5e       	subi	r28, 0xE3	; 227
    1d2a:	d1 40       	sbci	r29, 0x01	; 1
    1d2c:	cd 51       	subi	r28, 0x1D	; 29
    1d2e:	de 4f       	sbci	r29, 0xFE	; 254
    1d30:	88 81       	ld	r24, Y
    1d32:	99 81       	ldd	r25, Y+1	; 0x01
    1d34:	aa 81       	ldd	r26, Y+2	; 0x02
    1d36:	bb 81       	ldd	r27, Y+3	; 0x03
    1d38:	c3 5e       	subi	r28, 0xE3	; 227
    1d3a:	d1 40       	sbci	r29, 0x01	; 1
    1d3c:	c9 5c       	subi	r28, 0xC9	; 201
    1d3e:	de 4f       	sbci	r29, 0xFE	; 254
    1d40:	88 83       	st	Y, r24
    1d42:	99 83       	std	Y+1, r25	; 0x01
    1d44:	aa 83       	std	Y+2, r26	; 0x02
    1d46:	bb 83       	std	Y+3, r27	; 0x03
    1d48:	c7 53       	subi	r28, 0x37	; 55
    1d4a:	d1 40       	sbci	r29, 0x01	; 1
    1d4c:	8e 01       	movw	r16, r28
    1d4e:	03 58       	subi	r16, 0x83	; 131
    1d50:	1f 4f       	sbci	r17, 0xFF	; 255
    1d52:	c9 5c       	subi	r28, 0xC9	; 201
    1d54:	de 4f       	sbci	r29, 0xFE	; 254
    1d56:	68 81       	ld	r22, Y
    1d58:	79 81       	ldd	r23, Y+1	; 0x01
    1d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d5e:	c7 53       	subi	r28, 0x37	; 55
    1d60:	d1 40       	sbci	r29, 0x01	; 1
    1d62:	0e 94 bf 13 	call	0x277e	; 0x277e <__fixunssfsi>
    1d66:	c9 51       	subi	r28, 0x19	; 25
    1d68:	de 4f       	sbci	r29, 0xFE	; 254
    1d6a:	68 83       	st	Y, r22
    1d6c:	79 83       	std	Y+1, r23	; 0x01
    1d6e:	8a 83       	std	Y+2, r24	; 0x02
    1d70:	9b 83       	std	Y+3, r25	; 0x03
    1d72:	c7 5e       	subi	r28, 0xE7	; 231
    1d74:	d1 40       	sbci	r29, 0x01	; 1
    1d76:	c9 51       	subi	r28, 0x19	; 25
    1d78:	de 4f       	sbci	r29, 0xFE	; 254
    1d7a:	e8 81       	ld	r30, Y
    1d7c:	f9 81       	ldd	r31, Y+1	; 0x01
    1d7e:	c7 5e       	subi	r28, 0xE7	; 231
    1d80:	d1 40       	sbci	r29, 0x01	; 1
    1d82:	d8 01       	movw	r26, r16
    1d84:	ed 93       	st	X+, r30
    1d86:	fc 93       	st	X, r31
		while(__ticks)
    1d88:	25 c0       	rjmp	.+74     	; 0x1dd4 <main+0x13dc>
    1d8a:	ce 01       	movw	r24, r28
    1d8c:	81 58       	subi	r24, 0x81	; 129
    1d8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d90:	28 ec       	ldi	r18, 0xC8	; 200
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	dc 01       	movw	r26, r24
    1d96:	2d 93       	st	X+, r18
    1d98:	3c 93       	st	X, r19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d9a:	ce 01       	movw	r24, r28
    1d9c:	81 58       	subi	r24, 0x81	; 129
    1d9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1da0:	fc 01       	movw	r30, r24
    1da2:	80 81       	ld	r24, Z
    1da4:	91 81       	ldd	r25, Z+1	; 0x01
    1da6:	01 97       	sbiw	r24, 0x01	; 1
    1da8:	f1 f7       	brne	.-4      	; 0x1da6 <main+0x13ae>
    1daa:	9e 01       	movw	r18, r28
    1dac:	21 58       	subi	r18, 0x81	; 129
    1dae:	3f 4f       	sbci	r19, 0xFF	; 255
    1db0:	d9 01       	movw	r26, r18
    1db2:	8d 93       	st	X+, r24
    1db4:	9c 93       	st	X, r25
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
    1db6:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1db8:	ce 01       	movw	r24, r28
    1dba:	83 58       	subi	r24, 0x83	; 131
    1dbc:	9f 4f       	sbci	r25, 0xFF	; 255
    1dbe:	9e 01       	movw	r18, r28
    1dc0:	23 58       	subi	r18, 0x83	; 131
    1dc2:	3f 4f       	sbci	r19, 0xFF	; 255
    1dc4:	f9 01       	movw	r30, r18
    1dc6:	20 81       	ld	r18, Z
    1dc8:	31 81       	ldd	r19, Z+1	; 0x01
    1dca:	21 50       	subi	r18, 0x01	; 1
    1dcc:	31 09       	sbc	r19, r1
    1dce:	dc 01       	movw	r26, r24
    1dd0:	2d 93       	st	X+, r18
    1dd2:	3c 93       	st	X, r19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dd4:	ce 01       	movw	r24, r28
    1dd6:	83 58       	subi	r24, 0x83	; 131
    1dd8:	9f 4f       	sbci	r25, 0xFF	; 255
    1dda:	fc 01       	movw	r30, r24
    1ddc:	80 81       	ld	r24, Z
    1dde:	91 81       	ldd	r25, Z+1	; 0x01
    1de0:	89 2b       	or	r24, r25
    1de2:	99 f6       	brne	.-90     	; 0x1d8a <main+0x1392>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
    1de4:	39 c0       	rjmp	.+114    	; 0x1e58 <main+0x1460>
	}
	else
		__ticks = (uint16_t)__tmp;
    1de6:	8e 01       	movw	r16, r28
    1de8:	03 58       	subi	r16, 0x83	; 131
    1dea:	1f 4f       	sbci	r17, 0xFF	; 255
    1dec:	ce 01       	movw	r24, r28
    1dee:	87 58       	subi	r24, 0x87	; 135
    1df0:	9f 4f       	sbci	r25, 0xFF	; 255
    1df2:	dc 01       	movw	r26, r24
    1df4:	6d 91       	ld	r22, X+
    1df6:	7d 91       	ld	r23, X+
    1df8:	8d 91       	ld	r24, X+
    1dfa:	9c 91       	ld	r25, X
    1dfc:	0e 94 bf 13 	call	0x277e	; 0x277e <__fixunssfsi>
    1e00:	c5 51       	subi	r28, 0x15	; 21
    1e02:	de 4f       	sbci	r29, 0xFE	; 254
    1e04:	68 83       	st	Y, r22
    1e06:	79 83       	std	Y+1, r23	; 0x01
    1e08:	8a 83       	std	Y+2, r24	; 0x02
    1e0a:	9b 83       	std	Y+3, r25	; 0x03
    1e0c:	cb 5e       	subi	r28, 0xEB	; 235
    1e0e:	d1 40       	sbci	r29, 0x01	; 1
    1e10:	c5 51       	subi	r28, 0x15	; 21
    1e12:	de 4f       	sbci	r29, 0xFE	; 254
    1e14:	88 81       	ld	r24, Y
    1e16:	99 81       	ldd	r25, Y+1	; 0x01
    1e18:	cb 5e       	subi	r28, 0xEB	; 235
    1e1a:	d1 40       	sbci	r29, 0x01	; 1
    1e1c:	f8 01       	movw	r30, r16
    1e1e:	91 83       	std	Z+1, r25	; 0x01
    1e20:	80 83       	st	Z, r24
    1e22:	ce 01       	movw	r24, r28
    1e24:	8f 57       	subi	r24, 0x7F	; 127
    1e26:	9f 4f       	sbci	r25, 0xFF	; 255
    1e28:	9e 01       	movw	r18, r28
    1e2a:	23 58       	subi	r18, 0x83	; 131
    1e2c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e2e:	d9 01       	movw	r26, r18
    1e30:	2d 91       	ld	r18, X+
    1e32:	3c 91       	ld	r19, X
    1e34:	fc 01       	movw	r30, r24
    1e36:	31 83       	std	Z+1, r19	; 0x01
    1e38:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e3a:	ce 01       	movw	r24, r28
    1e3c:	8f 57       	subi	r24, 0x7F	; 127
    1e3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e40:	dc 01       	movw	r26, r24
    1e42:	8d 91       	ld	r24, X+
    1e44:	9c 91       	ld	r25, X
    1e46:	01 97       	sbiw	r24, 0x01	; 1
    1e48:	f1 f7       	brne	.-4      	; 0x1e46 <main+0x144e>
    1e4a:	9e 01       	movw	r18, r28
    1e4c:	2f 57       	subi	r18, 0x7F	; 127
    1e4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e50:	f9 01       	movw	r30, r18
    1e52:	91 83       	std	Z+1, r25	; 0x01
    1e54:	80 83       	st	Z, r24
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
    1e56:	00 00       	nop
		CLCD_voidSendCommand(1);
		CLCD_voidSendString("I can dance");
		CLCD_voidWriteSpecialCharacter(&Hamoksha,0,0,15);
		_delay_ms(1000);

		for(Local_u8Counter2=0;Local_u8Counter2<10;Local_u8Counter2++)
    1e58:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5a:	8f 5f       	subi	r24, 0xFF	; 255
    1e5c:	8b 83       	std	Y+3, r24	; 0x03
    1e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e60:	8a 30       	cpi	r24, 0x0A	; 10
    1e62:	08 f4       	brcc	.+2      	; 0x1e66 <main+0x146e>
    1e64:	d9 cd       	rjmp	.-1102   	; 0x1a18 <main+0x1020>

			CLCD_voidWriteSpecialCharacter(&dance2,0,0,15);
			_delay_ms(110);
		}

		CLCD_voidSendCommand(1);
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	0e 94 41 00 	call	0x82	; 0x82 <CLCD_voidSendCommand>
		CLCD_voidWriteSpecialCharacter(&gun,0,0,0);
    1e6c:	ce 01       	movw	r24, r28
    1e6e:	8e 5f       	subi	r24, 0xFE	; 254
    1e70:	9e 4f       	sbci	r25, 0xFE	; 254
    1e72:	20 e0       	ldi	r18, 0x00	; 0
    1e74:	40 e0       	ldi	r20, 0x00	; 0
    1e76:	60 e0       	ldi	r22, 0x00	; 0
    1e78:	0e 94 ae 02 	call	0x55c	; 0x55c <CLCD_voidWriteSpecialCharacter>
		CLCD_voidWriteSpecialCharacter(&Hamoksha,1,0,15);
    1e7c:	ce 01       	movw	r24, r28
    1e7e:	87 53       	subi	r24, 0x37	; 55
    1e80:	9f 4f       	sbci	r25, 0xFF	; 255
    1e82:	2f e0       	ldi	r18, 0x0F	; 15
    1e84:	40 e0       	ldi	r20, 0x00	; 0
    1e86:	61 e0       	ldi	r22, 0x01	; 1
    1e88:	0e 94 ae 02 	call	0x55c	; 0x55c <CLCD_voidWriteSpecialCharacter>
    1e8c:	9e 01       	movw	r18, r28
    1e8e:	21 56       	subi	r18, 0x61	; 97
    1e90:	3f 4f       	sbci	r19, 0xFF	; 255
    1e92:	80 e0       	ldi	r24, 0x00	; 0
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	aa e7       	ldi	r26, 0x7A	; 122
    1e98:	b4 e4       	ldi	r27, 0x44	; 68
    1e9a:	f9 01       	movw	r30, r18
    1e9c:	80 83       	st	Z, r24
    1e9e:	91 83       	std	Z+1, r25	; 0x01
    1ea0:	a2 83       	std	Z+2, r26	; 0x02
    1ea2:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1ea4:	8e 01       	movw	r16, r28
    1ea6:	0d 55       	subi	r16, 0x5D	; 93
    1ea8:	1f 4f       	sbci	r17, 0xFF	; 255
    1eaa:	ce 01       	movw	r24, r28
    1eac:	81 56       	subi	r24, 0x61	; 97
    1eae:	9f 4f       	sbci	r25, 0xFF	; 255
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	4a ef       	ldi	r20, 0xFA	; 250
    1eb6:	54 e4       	ldi	r21, 0x44	; 68
    1eb8:	dc 01       	movw	r26, r24
    1eba:	6d 91       	ld	r22, X+
    1ebc:	7d 91       	ld	r23, X+
    1ebe:	8d 91       	ld	r24, X+
    1ec0:	9c 91       	ld	r25, X
    1ec2:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
    1ec6:	c1 51       	subi	r28, 0x11	; 17
    1ec8:	de 4f       	sbci	r29, 0xFE	; 254
    1eca:	68 83       	st	Y, r22
    1ecc:	79 83       	std	Y+1, r23	; 0x01
    1ece:	8a 83       	std	Y+2, r24	; 0x02
    1ed0:	9b 83       	std	Y+3, r25	; 0x03
    1ed2:	cf 5e       	subi	r28, 0xEF	; 239
    1ed4:	d1 40       	sbci	r29, 0x01	; 1
    1ed6:	c1 51       	subi	r28, 0x11	; 17
    1ed8:	de 4f       	sbci	r29, 0xFE	; 254
    1eda:	88 81       	ld	r24, Y
    1edc:	99 81       	ldd	r25, Y+1	; 0x01
    1ede:	aa 81       	ldd	r26, Y+2	; 0x02
    1ee0:	bb 81       	ldd	r27, Y+3	; 0x03
    1ee2:	cf 5e       	subi	r28, 0xEF	; 239
    1ee4:	d1 40       	sbci	r29, 0x01	; 1
    1ee6:	f8 01       	movw	r30, r16
    1ee8:	80 83       	st	Z, r24
    1eea:	91 83       	std	Z+1, r25	; 0x01
    1eec:	a2 83       	std	Z+2, r26	; 0x02
    1eee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ef0:	ce 01       	movw	r24, r28
    1ef2:	8d 55       	subi	r24, 0x5D	; 93
    1ef4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	40 e8       	ldi	r20, 0x80	; 128
    1efc:	5f e3       	ldi	r21, 0x3F	; 63
    1efe:	dc 01       	movw	r26, r24
    1f00:	6d 91       	ld	r22, X+
    1f02:	7d 91       	ld	r23, X+
    1f04:	8d 91       	ld	r24, X+
    1f06:	9c 91       	ld	r25, X
    1f08:	0e 94 ba 13 	call	0x2774	; 0x2774 <__cmpsf2>
    1f0c:	88 23       	and	r24, r24
    1f0e:	4c f4       	brge	.+18     	; 0x1f22 <main+0x152a>
		__ticks = 1;
    1f10:	ce 01       	movw	r24, r28
    1f12:	89 55       	subi	r24, 0x59	; 89
    1f14:	9f 4f       	sbci	r25, 0xFF	; 255
    1f16:	21 e0       	ldi	r18, 0x01	; 1
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	fc 01       	movw	r30, r24
    1f1c:	31 83       	std	Z+1, r19	; 0x01
    1f1e:	20 83       	st	Z, r18
    1f20:	a2 c0       	rjmp	.+324    	; 0x2066 <main+0x166e>
	else if (__tmp > 65535)
    1f22:	ce 01       	movw	r24, r28
    1f24:	8d 55       	subi	r24, 0x5D	; 93
    1f26:	9f 4f       	sbci	r25, 0xFF	; 255
    1f28:	20 e0       	ldi	r18, 0x00	; 0
    1f2a:	3f ef       	ldi	r19, 0xFF	; 255
    1f2c:	4f e7       	ldi	r20, 0x7F	; 127
    1f2e:	57 e4       	ldi	r21, 0x47	; 71
    1f30:	dc 01       	movw	r26, r24
    1f32:	6d 91       	ld	r22, X+
    1f34:	7d 91       	ld	r23, X+
    1f36:	8d 91       	ld	r24, X+
    1f38:	9c 91       	ld	r25, X
    1f3a:	0e 94 3b 14 	call	0x2876	; 0x2876 <__gesf2>
    1f3e:	18 16       	cp	r1, r24
    1f40:	0c f0       	brlt	.+2      	; 0x1f44 <main+0x154c>
    1f42:	73 c0       	rjmp	.+230    	; 0x202a <main+0x1632>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f44:	ce 01       	movw	r24, r28
    1f46:	81 56       	subi	r24, 0x61	; 97
    1f48:	9f 4f       	sbci	r25, 0xFF	; 255
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	40 e2       	ldi	r20, 0x20	; 32
    1f50:	51 e4       	ldi	r21, 0x41	; 65
    1f52:	fc 01       	movw	r30, r24
    1f54:	60 81       	ld	r22, Z
    1f56:	71 81       	ldd	r23, Z+1	; 0x01
    1f58:	82 81       	ldd	r24, Z+2	; 0x02
    1f5a:	93 81       	ldd	r25, Z+3	; 0x03
    1f5c:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
    1f60:	cd 50       	subi	r28, 0x0D	; 13
    1f62:	de 4f       	sbci	r29, 0xFE	; 254
    1f64:	68 83       	st	Y, r22
    1f66:	79 83       	std	Y+1, r23	; 0x01
    1f68:	8a 83       	std	Y+2, r24	; 0x02
    1f6a:	9b 83       	std	Y+3, r25	; 0x03
    1f6c:	c3 5f       	subi	r28, 0xF3	; 243
    1f6e:	d1 40       	sbci	r29, 0x01	; 1
    1f70:	cd 50       	subi	r28, 0x0D	; 13
    1f72:	de 4f       	sbci	r29, 0xFE	; 254
    1f74:	88 81       	ld	r24, Y
    1f76:	99 81       	ldd	r25, Y+1	; 0x01
    1f78:	aa 81       	ldd	r26, Y+2	; 0x02
    1f7a:	bb 81       	ldd	r27, Y+3	; 0x03
    1f7c:	c3 5f       	subi	r28, 0xF3	; 243
    1f7e:	d1 40       	sbci	r29, 0x01	; 1
    1f80:	cd 5b       	subi	r28, 0xBD	; 189
    1f82:	de 4f       	sbci	r29, 0xFE	; 254
    1f84:	88 83       	st	Y, r24
    1f86:	99 83       	std	Y+1, r25	; 0x01
    1f88:	aa 83       	std	Y+2, r26	; 0x02
    1f8a:	bb 83       	std	Y+3, r27	; 0x03
    1f8c:	c3 54       	subi	r28, 0x43	; 67
    1f8e:	d1 40       	sbci	r29, 0x01	; 1
    1f90:	8e 01       	movw	r16, r28
    1f92:	09 55       	subi	r16, 0x59	; 89
    1f94:	1f 4f       	sbci	r17, 0xFF	; 255
    1f96:	cd 5b       	subi	r28, 0xBD	; 189
    1f98:	de 4f       	sbci	r29, 0xFE	; 254
    1f9a:	68 81       	ld	r22, Y
    1f9c:	79 81       	ldd	r23, Y+1	; 0x01
    1f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa0:	9b 81       	ldd	r25, Y+3	; 0x03
    1fa2:	c3 54       	subi	r28, 0x43	; 67
    1fa4:	d1 40       	sbci	r29, 0x01	; 1
    1fa6:	0e 94 bf 13 	call	0x277e	; 0x277e <__fixunssfsi>
    1faa:	c9 50       	subi	r28, 0x09	; 9
    1fac:	de 4f       	sbci	r29, 0xFE	; 254
    1fae:	68 83       	st	Y, r22
    1fb0:	79 83       	std	Y+1, r23	; 0x01
    1fb2:	8a 83       	std	Y+2, r24	; 0x02
    1fb4:	9b 83       	std	Y+3, r25	; 0x03
    1fb6:	c7 5f       	subi	r28, 0xF7	; 247
    1fb8:	d1 40       	sbci	r29, 0x01	; 1
    1fba:	c9 50       	subi	r28, 0x09	; 9
    1fbc:	de 4f       	sbci	r29, 0xFE	; 254
    1fbe:	e8 81       	ld	r30, Y
    1fc0:	f9 81       	ldd	r31, Y+1	; 0x01
    1fc2:	c7 5f       	subi	r28, 0xF7	; 247
    1fc4:	d1 40       	sbci	r29, 0x01	; 1
    1fc6:	d8 01       	movw	r26, r16
    1fc8:	ed 93       	st	X+, r30
    1fca:	fc 93       	st	X, r31
		while(__ticks)
    1fcc:	25 c0       	rjmp	.+74     	; 0x2018 <main+0x1620>
    1fce:	ce 01       	movw	r24, r28
    1fd0:	87 55       	subi	r24, 0x57	; 87
    1fd2:	9f 4f       	sbci	r25, 0xFF	; 255
    1fd4:	28 ec       	ldi	r18, 0xC8	; 200
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	dc 01       	movw	r26, r24
    1fda:	2d 93       	st	X+, r18
    1fdc:	3c 93       	st	X, r19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fde:	ce 01       	movw	r24, r28
    1fe0:	87 55       	subi	r24, 0x57	; 87
    1fe2:	9f 4f       	sbci	r25, 0xFF	; 255
    1fe4:	fc 01       	movw	r30, r24
    1fe6:	80 81       	ld	r24, Z
    1fe8:	91 81       	ldd	r25, Z+1	; 0x01
    1fea:	01 97       	sbiw	r24, 0x01	; 1
    1fec:	f1 f7       	brne	.-4      	; 0x1fea <main+0x15f2>
    1fee:	9e 01       	movw	r18, r28
    1ff0:	27 55       	subi	r18, 0x57	; 87
    1ff2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ff4:	d9 01       	movw	r26, r18
    1ff6:	8d 93       	st	X+, r24
    1ff8:	9c 93       	st	X, r25
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
    1ffa:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ffc:	ce 01       	movw	r24, r28
    1ffe:	89 55       	subi	r24, 0x59	; 89
    2000:	9f 4f       	sbci	r25, 0xFF	; 255
    2002:	9e 01       	movw	r18, r28
    2004:	29 55       	subi	r18, 0x59	; 89
    2006:	3f 4f       	sbci	r19, 0xFF	; 255
    2008:	f9 01       	movw	r30, r18
    200a:	20 81       	ld	r18, Z
    200c:	31 81       	ldd	r19, Z+1	; 0x01
    200e:	21 50       	subi	r18, 0x01	; 1
    2010:	31 09       	sbc	r19, r1
    2012:	dc 01       	movw	r26, r24
    2014:	2d 93       	st	X+, r18
    2016:	3c 93       	st	X, r19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2018:	ce 01       	movw	r24, r28
    201a:	89 55       	subi	r24, 0x59	; 89
    201c:	9f 4f       	sbci	r25, 0xFF	; 255
    201e:	fc 01       	movw	r30, r24
    2020:	80 81       	ld	r24, Z
    2022:	91 81       	ldd	r25, Z+1	; 0x01
    2024:	89 2b       	or	r24, r25
    2026:	99 f6       	brne	.-90     	; 0x1fce <main+0x15d6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
    2028:	39 c0       	rjmp	.+114    	; 0x209c <main+0x16a4>
	}
	else
		__ticks = (uint16_t)__tmp;
    202a:	8e 01       	movw	r16, r28
    202c:	09 55       	subi	r16, 0x59	; 89
    202e:	1f 4f       	sbci	r17, 0xFF	; 255
    2030:	ce 01       	movw	r24, r28
    2032:	8d 55       	subi	r24, 0x5D	; 93
    2034:	9f 4f       	sbci	r25, 0xFF	; 255
    2036:	dc 01       	movw	r26, r24
    2038:	6d 91       	ld	r22, X+
    203a:	7d 91       	ld	r23, X+
    203c:	8d 91       	ld	r24, X+
    203e:	9c 91       	ld	r25, X
    2040:	0e 94 bf 13 	call	0x277e	; 0x277e <__fixunssfsi>
    2044:	c5 50       	subi	r28, 0x05	; 5
    2046:	de 4f       	sbci	r29, 0xFE	; 254
    2048:	68 83       	st	Y, r22
    204a:	79 83       	std	Y+1, r23	; 0x01
    204c:	8a 83       	std	Y+2, r24	; 0x02
    204e:	9b 83       	std	Y+3, r25	; 0x03
    2050:	cb 5f       	subi	r28, 0xFB	; 251
    2052:	d1 40       	sbci	r29, 0x01	; 1
    2054:	c5 50       	subi	r28, 0x05	; 5
    2056:	de 4f       	sbci	r29, 0xFE	; 254
    2058:	88 81       	ld	r24, Y
    205a:	99 81       	ldd	r25, Y+1	; 0x01
    205c:	cb 5f       	subi	r28, 0xFB	; 251
    205e:	d1 40       	sbci	r29, 0x01	; 1
    2060:	f8 01       	movw	r30, r16
    2062:	91 83       	std	Z+1, r25	; 0x01
    2064:	80 83       	st	Z, r24
    2066:	ce 01       	movw	r24, r28
    2068:	85 55       	subi	r24, 0x55	; 85
    206a:	9f 4f       	sbci	r25, 0xFF	; 255
    206c:	9e 01       	movw	r18, r28
    206e:	29 55       	subi	r18, 0x59	; 89
    2070:	3f 4f       	sbci	r19, 0xFF	; 255
    2072:	d9 01       	movw	r26, r18
    2074:	2d 91       	ld	r18, X+
    2076:	3c 91       	ld	r19, X
    2078:	fc 01       	movw	r30, r24
    207a:	31 83       	std	Z+1, r19	; 0x01
    207c:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    207e:	ce 01       	movw	r24, r28
    2080:	85 55       	subi	r24, 0x55	; 85
    2082:	9f 4f       	sbci	r25, 0xFF	; 255
    2084:	dc 01       	movw	r26, r24
    2086:	8d 91       	ld	r24, X+
    2088:	9c 91       	ld	r25, X
    208a:	01 97       	sbiw	r24, 0x01	; 1
    208c:	f1 f7       	brne	.-4      	; 0x208a <main+0x1692>
    208e:	9e 01       	movw	r18, r28
    2090:	25 55       	subi	r18, 0x55	; 85
    2092:	3f 4f       	sbci	r19, 0xFF	; 255
    2094:	f9 01       	movw	r30, r18
    2096:	91 83       	std	Z+1, r25	; 0x01
    2098:	80 83       	st	Z, r24
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
    209a:	00 00       	nop
		_delay_ms(1000);

		CLCD_voidSendCommand(1);
    209c:	81 e0       	ldi	r24, 0x01	; 1
    209e:	0e 94 41 00 	call	0x82	; 0x82 <CLCD_voidSendCommand>
		CLCD_voidSendString("Do not kill me");
    20a2:	83 e9       	ldi	r24, 0x93	; 147
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	0e 94 62 02 	call	0x4c4	; 0x4c4 <CLCD_voidSendString>
		CLCD_voidWriteSpecialCharacter(&Hamoksha,1,0,15);
    20aa:	ce 01       	movw	r24, r28
    20ac:	87 53       	subi	r24, 0x37	; 55
    20ae:	9f 4f       	sbci	r25, 0xFF	; 255
    20b0:	2f e0       	ldi	r18, 0x0F	; 15
    20b2:	40 e0       	ldi	r20, 0x00	; 0
    20b4:	61 e0       	ldi	r22, 0x01	; 1
    20b6:	0e 94 ae 02 	call	0x55c	; 0x55c <CLCD_voidWriteSpecialCharacter>
    20ba:	9e 01       	movw	r18, r28
    20bc:	2f 56       	subi	r18, 0x6F	; 111
    20be:	3f 4f       	sbci	r19, 0xFF	; 255
    20c0:	80 e0       	ldi	r24, 0x00	; 0
    20c2:	90 e8       	ldi	r25, 0x80	; 128
    20c4:	ab e3       	ldi	r26, 0x3B	; 59
    20c6:	b4 e4       	ldi	r27, 0x44	; 68
    20c8:	f9 01       	movw	r30, r18
    20ca:	80 83       	st	Z, r24
    20cc:	91 83       	std	Z+1, r25	; 0x01
    20ce:	a2 83       	std	Z+2, r26	; 0x02
    20d0:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    20d2:	8e 01       	movw	r16, r28
    20d4:	0b 56       	subi	r16, 0x6B	; 107
    20d6:	1f 4f       	sbci	r17, 0xFF	; 255
    20d8:	ce 01       	movw	r24, r28
    20da:	8f 56       	subi	r24, 0x6F	; 111
    20dc:	9f 4f       	sbci	r25, 0xFF	; 255
    20de:	20 e0       	ldi	r18, 0x00	; 0
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	4a ef       	ldi	r20, 0xFA	; 250
    20e4:	54 e4       	ldi	r21, 0x44	; 68
    20e6:	dc 01       	movw	r26, r24
    20e8:	6d 91       	ld	r22, X+
    20ea:	7d 91       	ld	r23, X+
    20ec:	8d 91       	ld	r24, X+
    20ee:	9c 91       	ld	r25, X
    20f0:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
    20f4:	c1 50       	subi	r28, 0x01	; 1
    20f6:	de 4f       	sbci	r29, 0xFE	; 254
    20f8:	68 83       	st	Y, r22
    20fa:	79 83       	std	Y+1, r23	; 0x01
    20fc:	8a 83       	std	Y+2, r24	; 0x02
    20fe:	9b 83       	std	Y+3, r25	; 0x03
    2100:	cf 5f       	subi	r28, 0xFF	; 255
    2102:	d1 40       	sbci	r29, 0x01	; 1
    2104:	c1 50       	subi	r28, 0x01	; 1
    2106:	de 4f       	sbci	r29, 0xFE	; 254
    2108:	88 81       	ld	r24, Y
    210a:	99 81       	ldd	r25, Y+1	; 0x01
    210c:	aa 81       	ldd	r26, Y+2	; 0x02
    210e:	bb 81       	ldd	r27, Y+3	; 0x03
    2110:	cf 5f       	subi	r28, 0xFF	; 255
    2112:	d1 40       	sbci	r29, 0x01	; 1
    2114:	f8 01       	movw	r30, r16
    2116:	80 83       	st	Z, r24
    2118:	91 83       	std	Z+1, r25	; 0x01
    211a:	a2 83       	std	Z+2, r26	; 0x02
    211c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    211e:	ce 01       	movw	r24, r28
    2120:	8b 56       	subi	r24, 0x6B	; 107
    2122:	9f 4f       	sbci	r25, 0xFF	; 255
    2124:	20 e0       	ldi	r18, 0x00	; 0
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	40 e8       	ldi	r20, 0x80	; 128
    212a:	5f e3       	ldi	r21, 0x3F	; 63
    212c:	dc 01       	movw	r26, r24
    212e:	6d 91       	ld	r22, X+
    2130:	7d 91       	ld	r23, X+
    2132:	8d 91       	ld	r24, X+
    2134:	9c 91       	ld	r25, X
    2136:	0e 94 ba 13 	call	0x2774	; 0x2774 <__cmpsf2>
    213a:	88 23       	and	r24, r24
    213c:	4c f4       	brge	.+18     	; 0x2150 <main+0x1758>
		__ticks = 1;
    213e:	ce 01       	movw	r24, r28
    2140:	87 56       	subi	r24, 0x67	; 103
    2142:	9f 4f       	sbci	r25, 0xFF	; 255
    2144:	21 e0       	ldi	r18, 0x01	; 1
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	fc 01       	movw	r30, r24
    214a:	31 83       	std	Z+1, r19	; 0x01
    214c:	20 83       	st	Z, r18
    214e:	a2 c0       	rjmp	.+324    	; 0x2294 <main+0x189c>
	else if (__tmp > 65535)
    2150:	ce 01       	movw	r24, r28
    2152:	8b 56       	subi	r24, 0x6B	; 107
    2154:	9f 4f       	sbci	r25, 0xFF	; 255
    2156:	20 e0       	ldi	r18, 0x00	; 0
    2158:	3f ef       	ldi	r19, 0xFF	; 255
    215a:	4f e7       	ldi	r20, 0x7F	; 127
    215c:	57 e4       	ldi	r21, 0x47	; 71
    215e:	dc 01       	movw	r26, r24
    2160:	6d 91       	ld	r22, X+
    2162:	7d 91       	ld	r23, X+
    2164:	8d 91       	ld	r24, X+
    2166:	9c 91       	ld	r25, X
    2168:	0e 94 3b 14 	call	0x2876	; 0x2876 <__gesf2>
    216c:	18 16       	cp	r1, r24
    216e:	0c f0       	brlt	.+2      	; 0x2172 <main+0x177a>
    2170:	73 c0       	rjmp	.+230    	; 0x2258 <main+0x1860>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2172:	ce 01       	movw	r24, r28
    2174:	8f 56       	subi	r24, 0x6F	; 111
    2176:	9f 4f       	sbci	r25, 0xFF	; 255
    2178:	20 e0       	ldi	r18, 0x00	; 0
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	40 e2       	ldi	r20, 0x20	; 32
    217e:	51 e4       	ldi	r21, 0x41	; 65
    2180:	fc 01       	movw	r30, r24
    2182:	60 81       	ld	r22, Z
    2184:	71 81       	ldd	r23, Z+1	; 0x01
    2186:	82 81       	ldd	r24, Z+2	; 0x02
    2188:	93 81       	ldd	r25, Z+3	; 0x03
    218a:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
    218e:	cd 5f       	subi	r28, 0xFD	; 253
    2190:	dd 4f       	sbci	r29, 0xFD	; 253
    2192:	68 83       	st	Y, r22
    2194:	79 83       	std	Y+1, r23	; 0x01
    2196:	8a 83       	std	Y+2, r24	; 0x02
    2198:	9b 83       	std	Y+3, r25	; 0x03
    219a:	c3 50       	subi	r28, 0x03	; 3
    219c:	d2 40       	sbci	r29, 0x02	; 2
    219e:	cd 5f       	subi	r28, 0xFD	; 253
    21a0:	dd 4f       	sbci	r29, 0xFD	; 253
    21a2:	88 81       	ld	r24, Y
    21a4:	99 81       	ldd	r25, Y+1	; 0x01
    21a6:	aa 81       	ldd	r26, Y+2	; 0x02
    21a8:	bb 81       	ldd	r27, Y+3	; 0x03
    21aa:	c3 50       	subi	r28, 0x03	; 3
    21ac:	d2 40       	sbci	r29, 0x02	; 2
    21ae:	c1 5c       	subi	r28, 0xC1	; 193
    21b0:	de 4f       	sbci	r29, 0xFE	; 254
    21b2:	88 83       	st	Y, r24
    21b4:	99 83       	std	Y+1, r25	; 0x01
    21b6:	aa 83       	std	Y+2, r26	; 0x02
    21b8:	bb 83       	std	Y+3, r27	; 0x03
    21ba:	cf 53       	subi	r28, 0x3F	; 63
    21bc:	d1 40       	sbci	r29, 0x01	; 1
    21be:	8e 01       	movw	r16, r28
    21c0:	07 56       	subi	r16, 0x67	; 103
    21c2:	1f 4f       	sbci	r17, 0xFF	; 255
    21c4:	c1 5c       	subi	r28, 0xC1	; 193
    21c6:	de 4f       	sbci	r29, 0xFE	; 254
    21c8:	68 81       	ld	r22, Y
    21ca:	79 81       	ldd	r23, Y+1	; 0x01
    21cc:	8a 81       	ldd	r24, Y+2	; 0x02
    21ce:	9b 81       	ldd	r25, Y+3	; 0x03
    21d0:	cf 53       	subi	r28, 0x3F	; 63
    21d2:	d1 40       	sbci	r29, 0x01	; 1
    21d4:	0e 94 bf 13 	call	0x277e	; 0x277e <__fixunssfsi>
    21d8:	c9 5f       	subi	r28, 0xF9	; 249
    21da:	dd 4f       	sbci	r29, 0xFD	; 253
    21dc:	68 83       	st	Y, r22
    21de:	79 83       	std	Y+1, r23	; 0x01
    21e0:	8a 83       	std	Y+2, r24	; 0x02
    21e2:	9b 83       	std	Y+3, r25	; 0x03
    21e4:	c7 50       	subi	r28, 0x07	; 7
    21e6:	d2 40       	sbci	r29, 0x02	; 2
    21e8:	c9 5f       	subi	r28, 0xF9	; 249
    21ea:	dd 4f       	sbci	r29, 0xFD	; 253
    21ec:	e8 81       	ld	r30, Y
    21ee:	f9 81       	ldd	r31, Y+1	; 0x01
    21f0:	c7 50       	subi	r28, 0x07	; 7
    21f2:	d2 40       	sbci	r29, 0x02	; 2
    21f4:	d8 01       	movw	r26, r16
    21f6:	ed 93       	st	X+, r30
    21f8:	fc 93       	st	X, r31
		while(__ticks)
    21fa:	25 c0       	rjmp	.+74     	; 0x2246 <main+0x184e>
    21fc:	ce 01       	movw	r24, r28
    21fe:	85 56       	subi	r24, 0x65	; 101
    2200:	9f 4f       	sbci	r25, 0xFF	; 255
    2202:	28 ec       	ldi	r18, 0xC8	; 200
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	dc 01       	movw	r26, r24
    2208:	2d 93       	st	X+, r18
    220a:	3c 93       	st	X, r19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    220c:	ce 01       	movw	r24, r28
    220e:	85 56       	subi	r24, 0x65	; 101
    2210:	9f 4f       	sbci	r25, 0xFF	; 255
    2212:	fc 01       	movw	r30, r24
    2214:	80 81       	ld	r24, Z
    2216:	91 81       	ldd	r25, Z+1	; 0x01
    2218:	01 97       	sbiw	r24, 0x01	; 1
    221a:	f1 f7       	brne	.-4      	; 0x2218 <main+0x1820>
    221c:	9e 01       	movw	r18, r28
    221e:	25 56       	subi	r18, 0x65	; 101
    2220:	3f 4f       	sbci	r19, 0xFF	; 255
    2222:	d9 01       	movw	r26, r18
    2224:	8d 93       	st	X+, r24
    2226:	9c 93       	st	X, r25
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
    2228:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    222a:	ce 01       	movw	r24, r28
    222c:	87 56       	subi	r24, 0x67	; 103
    222e:	9f 4f       	sbci	r25, 0xFF	; 255
    2230:	9e 01       	movw	r18, r28
    2232:	27 56       	subi	r18, 0x67	; 103
    2234:	3f 4f       	sbci	r19, 0xFF	; 255
    2236:	f9 01       	movw	r30, r18
    2238:	20 81       	ld	r18, Z
    223a:	31 81       	ldd	r19, Z+1	; 0x01
    223c:	21 50       	subi	r18, 0x01	; 1
    223e:	31 09       	sbc	r19, r1
    2240:	dc 01       	movw	r26, r24
    2242:	2d 93       	st	X+, r18
    2244:	3c 93       	st	X, r19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2246:	ce 01       	movw	r24, r28
    2248:	87 56       	subi	r24, 0x67	; 103
    224a:	9f 4f       	sbci	r25, 0xFF	; 255
    224c:	fc 01       	movw	r30, r24
    224e:	80 81       	ld	r24, Z
    2250:	91 81       	ldd	r25, Z+1	; 0x01
    2252:	89 2b       	or	r24, r25
    2254:	99 f6       	brne	.-90     	; 0x21fc <main+0x1804>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
    2256:	39 c0       	rjmp	.+114    	; 0x22ca <main+0x18d2>
	}
	else
		__ticks = (uint16_t)__tmp;
    2258:	8e 01       	movw	r16, r28
    225a:	07 56       	subi	r16, 0x67	; 103
    225c:	1f 4f       	sbci	r17, 0xFF	; 255
    225e:	ce 01       	movw	r24, r28
    2260:	8b 56       	subi	r24, 0x6B	; 107
    2262:	9f 4f       	sbci	r25, 0xFF	; 255
    2264:	dc 01       	movw	r26, r24
    2266:	6d 91       	ld	r22, X+
    2268:	7d 91       	ld	r23, X+
    226a:	8d 91       	ld	r24, X+
    226c:	9c 91       	ld	r25, X
    226e:	0e 94 bf 13 	call	0x277e	; 0x277e <__fixunssfsi>
    2272:	c5 5f       	subi	r28, 0xF5	; 245
    2274:	dd 4f       	sbci	r29, 0xFD	; 253
    2276:	68 83       	st	Y, r22
    2278:	79 83       	std	Y+1, r23	; 0x01
    227a:	8a 83       	std	Y+2, r24	; 0x02
    227c:	9b 83       	std	Y+3, r25	; 0x03
    227e:	cb 50       	subi	r28, 0x0B	; 11
    2280:	d2 40       	sbci	r29, 0x02	; 2
    2282:	c5 5f       	subi	r28, 0xF5	; 245
    2284:	dd 4f       	sbci	r29, 0xFD	; 253
    2286:	88 81       	ld	r24, Y
    2288:	99 81       	ldd	r25, Y+1	; 0x01
    228a:	cb 50       	subi	r28, 0x0B	; 11
    228c:	d2 40       	sbci	r29, 0x02	; 2
    228e:	f8 01       	movw	r30, r16
    2290:	91 83       	std	Z+1, r25	; 0x01
    2292:	80 83       	st	Z, r24
    2294:	ce 01       	movw	r24, r28
    2296:	83 56       	subi	r24, 0x63	; 99
    2298:	9f 4f       	sbci	r25, 0xFF	; 255
    229a:	9e 01       	movw	r18, r28
    229c:	27 56       	subi	r18, 0x67	; 103
    229e:	3f 4f       	sbci	r19, 0xFF	; 255
    22a0:	d9 01       	movw	r26, r18
    22a2:	2d 91       	ld	r18, X+
    22a4:	3c 91       	ld	r19, X
    22a6:	fc 01       	movw	r30, r24
    22a8:	31 83       	std	Z+1, r19	; 0x01
    22aa:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22ac:	ce 01       	movw	r24, r28
    22ae:	83 56       	subi	r24, 0x63	; 99
    22b0:	9f 4f       	sbci	r25, 0xFF	; 255
    22b2:	dc 01       	movw	r26, r24
    22b4:	8d 91       	ld	r24, X+
    22b6:	9c 91       	ld	r25, X
    22b8:	01 97       	sbiw	r24, 0x01	; 1
    22ba:	f1 f7       	brne	.-4      	; 0x22b8 <main+0x18c0>
    22bc:	9e 01       	movw	r18, r28
    22be:	23 56       	subi	r18, 0x63	; 99
    22c0:	3f 4f       	sbci	r19, 0xFF	; 255
    22c2:	f9 01       	movw	r30, r18
    22c4:	91 83       	std	Z+1, r25	; 0x01
    22c6:	80 83       	st	Z, r24
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
    22c8:	00 00       	nop
		_delay_ms(750);

		CLCD_voidSendCommand(1);
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	0e 94 41 00 	call	0x82	; 0x82 <CLCD_voidSendCommand>
		CLCD_voidWriteSpecialCharacter(&gun,0,0,0);
    22d0:	ce 01       	movw	r24, r28
    22d2:	8e 5f       	subi	r24, 0xFE	; 254
    22d4:	9e 4f       	sbci	r25, 0xFE	; 254
    22d6:	20 e0       	ldi	r18, 0x00	; 0
    22d8:	40 e0       	ldi	r20, 0x00	; 0
    22da:	60 e0       	ldi	r22, 0x00	; 0
    22dc:	0e 94 ae 02 	call	0x55c	; 0x55c <CLCD_voidWriteSpecialCharacter>
		CLCD_voidWriteSpecialCharacter(&Hamoksha,1,0,15);
    22e0:	ce 01       	movw	r24, r28
    22e2:	87 53       	subi	r24, 0x37	; 55
    22e4:	9f 4f       	sbci	r25, 0xFF	; 255
    22e6:	2f e0       	ldi	r18, 0x0F	; 15
    22e8:	40 e0       	ldi	r20, 0x00	; 0
    22ea:	61 e0       	ldi	r22, 0x01	; 1
    22ec:	0e 94 ae 02 	call	0x55c	; 0x55c <CLCD_voidWriteSpecialCharacter>

		for(Local_u8Counter3=2;Local_u8Counter3<15;Local_u8Counter3++)
    22f0:	82 e0       	ldi	r24, 0x02	; 2
    22f2:	8c 83       	std	Y+4, r24	; 0x04
    22f4:	13 c1       	rjmp	.+550    	; 0x251c <main+0x1b24>
		{
			CLCD_voidWriteSpecialCharacter(&bullet,2,0,Local_u8Counter3);
    22f6:	ce 01       	movw	r24, r28
    22f8:	87 5f       	subi	r24, 0xF7	; 247
    22fa:	9e 4f       	sbci	r25, 0xFE	; 254
    22fc:	2c 81       	ldd	r18, Y+4	; 0x04
    22fe:	40 e0       	ldi	r20, 0x00	; 0
    2300:	62 e0       	ldi	r22, 0x02	; 2
    2302:	0e 94 ae 02 	call	0x55c	; 0x55c <CLCD_voidWriteSpecialCharacter>
    2306:	9e 01       	movw	r18, r28
    2308:	23 55       	subi	r18, 0x53	; 83
    230a:	3f 4f       	sbci	r19, 0xFF	; 255
    230c:	80 e0       	ldi	r24, 0x00	; 0
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	a0 ea       	ldi	r26, 0xA0	; 160
    2312:	b2 e4       	ldi	r27, 0x42	; 66
    2314:	f9 01       	movw	r30, r18
    2316:	80 83       	st	Z, r24
    2318:	91 83       	std	Z+1, r25	; 0x01
    231a:	a2 83       	std	Z+2, r26	; 0x02
    231c:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    231e:	8e 01       	movw	r16, r28
    2320:	0f 54       	subi	r16, 0x4F	; 79
    2322:	1f 4f       	sbci	r17, 0xFF	; 255
    2324:	ce 01       	movw	r24, r28
    2326:	83 55       	subi	r24, 0x53	; 83
    2328:	9f 4f       	sbci	r25, 0xFF	; 255
    232a:	20 e0       	ldi	r18, 0x00	; 0
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	4a ef       	ldi	r20, 0xFA	; 250
    2330:	54 e4       	ldi	r21, 0x44	; 68
    2332:	dc 01       	movw	r26, r24
    2334:	6d 91       	ld	r22, X+
    2336:	7d 91       	ld	r23, X+
    2338:	8d 91       	ld	r24, X+
    233a:	9c 91       	ld	r25, X
    233c:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
    2340:	c1 5f       	subi	r28, 0xF1	; 241
    2342:	dd 4f       	sbci	r29, 0xFD	; 253
    2344:	68 83       	st	Y, r22
    2346:	79 83       	std	Y+1, r23	; 0x01
    2348:	8a 83       	std	Y+2, r24	; 0x02
    234a:	9b 83       	std	Y+3, r25	; 0x03
    234c:	cf 50       	subi	r28, 0x0F	; 15
    234e:	d2 40       	sbci	r29, 0x02	; 2
    2350:	c1 5f       	subi	r28, 0xF1	; 241
    2352:	dd 4f       	sbci	r29, 0xFD	; 253
    2354:	88 81       	ld	r24, Y
    2356:	99 81       	ldd	r25, Y+1	; 0x01
    2358:	aa 81       	ldd	r26, Y+2	; 0x02
    235a:	bb 81       	ldd	r27, Y+3	; 0x03
    235c:	cf 50       	subi	r28, 0x0F	; 15
    235e:	d2 40       	sbci	r29, 0x02	; 2
    2360:	f8 01       	movw	r30, r16
    2362:	80 83       	st	Z, r24
    2364:	91 83       	std	Z+1, r25	; 0x01
    2366:	a2 83       	std	Z+2, r26	; 0x02
    2368:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    236a:	ce 01       	movw	r24, r28
    236c:	8f 54       	subi	r24, 0x4F	; 79
    236e:	9f 4f       	sbci	r25, 0xFF	; 255
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	40 e8       	ldi	r20, 0x80	; 128
    2376:	5f e3       	ldi	r21, 0x3F	; 63
    2378:	dc 01       	movw	r26, r24
    237a:	6d 91       	ld	r22, X+
    237c:	7d 91       	ld	r23, X+
    237e:	8d 91       	ld	r24, X+
    2380:	9c 91       	ld	r25, X
    2382:	0e 94 ba 13 	call	0x2774	; 0x2774 <__cmpsf2>
    2386:	88 23       	and	r24, r24
    2388:	4c f4       	brge	.+18     	; 0x239c <main+0x19a4>
		__ticks = 1;
    238a:	ce 01       	movw	r24, r28
    238c:	8b 54       	subi	r24, 0x4B	; 75
    238e:	9f 4f       	sbci	r25, 0xFF	; 255
    2390:	21 e0       	ldi	r18, 0x01	; 1
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	fc 01       	movw	r30, r24
    2396:	31 83       	std	Z+1, r19	; 0x01
    2398:	20 83       	st	Z, r18
    239a:	a2 c0       	rjmp	.+324    	; 0x24e0 <main+0x1ae8>
	else if (__tmp > 65535)
    239c:	ce 01       	movw	r24, r28
    239e:	8f 54       	subi	r24, 0x4F	; 79
    23a0:	9f 4f       	sbci	r25, 0xFF	; 255
    23a2:	20 e0       	ldi	r18, 0x00	; 0
    23a4:	3f ef       	ldi	r19, 0xFF	; 255
    23a6:	4f e7       	ldi	r20, 0x7F	; 127
    23a8:	57 e4       	ldi	r21, 0x47	; 71
    23aa:	dc 01       	movw	r26, r24
    23ac:	6d 91       	ld	r22, X+
    23ae:	7d 91       	ld	r23, X+
    23b0:	8d 91       	ld	r24, X+
    23b2:	9c 91       	ld	r25, X
    23b4:	0e 94 3b 14 	call	0x2876	; 0x2876 <__gesf2>
    23b8:	18 16       	cp	r1, r24
    23ba:	0c f0       	brlt	.+2      	; 0x23be <main+0x19c6>
    23bc:	73 c0       	rjmp	.+230    	; 0x24a4 <main+0x1aac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23be:	ce 01       	movw	r24, r28
    23c0:	83 55       	subi	r24, 0x53	; 83
    23c2:	9f 4f       	sbci	r25, 0xFF	; 255
    23c4:	20 e0       	ldi	r18, 0x00	; 0
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	40 e2       	ldi	r20, 0x20	; 32
    23ca:	51 e4       	ldi	r21, 0x41	; 65
    23cc:	fc 01       	movw	r30, r24
    23ce:	60 81       	ld	r22, Z
    23d0:	71 81       	ldd	r23, Z+1	; 0x01
    23d2:	82 81       	ldd	r24, Z+2	; 0x02
    23d4:	93 81       	ldd	r25, Z+3	; 0x03
    23d6:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
    23da:	cd 5e       	subi	r28, 0xED	; 237
    23dc:	dd 4f       	sbci	r29, 0xFD	; 253
    23de:	68 83       	st	Y, r22
    23e0:	79 83       	std	Y+1, r23	; 0x01
    23e2:	8a 83       	std	Y+2, r24	; 0x02
    23e4:	9b 83       	std	Y+3, r25	; 0x03
    23e6:	c3 51       	subi	r28, 0x13	; 19
    23e8:	d2 40       	sbci	r29, 0x02	; 2
    23ea:	cd 5e       	subi	r28, 0xED	; 237
    23ec:	dd 4f       	sbci	r29, 0xFD	; 253
    23ee:	88 81       	ld	r24, Y
    23f0:	99 81       	ldd	r25, Y+1	; 0x01
    23f2:	aa 81       	ldd	r26, Y+2	; 0x02
    23f4:	bb 81       	ldd	r27, Y+3	; 0x03
    23f6:	c3 51       	subi	r28, 0x13	; 19
    23f8:	d2 40       	sbci	r29, 0x02	; 2
    23fa:	c9 5b       	subi	r28, 0xB9	; 185
    23fc:	de 4f       	sbci	r29, 0xFE	; 254
    23fe:	88 83       	st	Y, r24
    2400:	99 83       	std	Y+1, r25	; 0x01
    2402:	aa 83       	std	Y+2, r26	; 0x02
    2404:	bb 83       	std	Y+3, r27	; 0x03
    2406:	c7 54       	subi	r28, 0x47	; 71
    2408:	d1 40       	sbci	r29, 0x01	; 1
    240a:	8e 01       	movw	r16, r28
    240c:	0b 54       	subi	r16, 0x4B	; 75
    240e:	1f 4f       	sbci	r17, 0xFF	; 255
    2410:	c9 5b       	subi	r28, 0xB9	; 185
    2412:	de 4f       	sbci	r29, 0xFE	; 254
    2414:	68 81       	ld	r22, Y
    2416:	79 81       	ldd	r23, Y+1	; 0x01
    2418:	8a 81       	ldd	r24, Y+2	; 0x02
    241a:	9b 81       	ldd	r25, Y+3	; 0x03
    241c:	c7 54       	subi	r28, 0x47	; 71
    241e:	d1 40       	sbci	r29, 0x01	; 1
    2420:	0e 94 bf 13 	call	0x277e	; 0x277e <__fixunssfsi>
    2424:	c9 5e       	subi	r28, 0xE9	; 233
    2426:	dd 4f       	sbci	r29, 0xFD	; 253
    2428:	68 83       	st	Y, r22
    242a:	79 83       	std	Y+1, r23	; 0x01
    242c:	8a 83       	std	Y+2, r24	; 0x02
    242e:	9b 83       	std	Y+3, r25	; 0x03
    2430:	c7 51       	subi	r28, 0x17	; 23
    2432:	d2 40       	sbci	r29, 0x02	; 2
    2434:	c9 5e       	subi	r28, 0xE9	; 233
    2436:	dd 4f       	sbci	r29, 0xFD	; 253
    2438:	e8 81       	ld	r30, Y
    243a:	f9 81       	ldd	r31, Y+1	; 0x01
    243c:	c7 51       	subi	r28, 0x17	; 23
    243e:	d2 40       	sbci	r29, 0x02	; 2
    2440:	d8 01       	movw	r26, r16
    2442:	ed 93       	st	X+, r30
    2444:	fc 93       	st	X, r31
		while(__ticks)
    2446:	25 c0       	rjmp	.+74     	; 0x2492 <main+0x1a9a>
    2448:	ce 01       	movw	r24, r28
    244a:	89 54       	subi	r24, 0x49	; 73
    244c:	9f 4f       	sbci	r25, 0xFF	; 255
    244e:	28 ec       	ldi	r18, 0xC8	; 200
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	dc 01       	movw	r26, r24
    2454:	2d 93       	st	X+, r18
    2456:	3c 93       	st	X, r19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2458:	ce 01       	movw	r24, r28
    245a:	89 54       	subi	r24, 0x49	; 73
    245c:	9f 4f       	sbci	r25, 0xFF	; 255
    245e:	fc 01       	movw	r30, r24
    2460:	80 81       	ld	r24, Z
    2462:	91 81       	ldd	r25, Z+1	; 0x01
    2464:	01 97       	sbiw	r24, 0x01	; 1
    2466:	f1 f7       	brne	.-4      	; 0x2464 <main+0x1a6c>
    2468:	9e 01       	movw	r18, r28
    246a:	29 54       	subi	r18, 0x49	; 73
    246c:	3f 4f       	sbci	r19, 0xFF	; 255
    246e:	d9 01       	movw	r26, r18
    2470:	8d 93       	st	X+, r24
    2472:	9c 93       	st	X, r25
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
    2474:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2476:	ce 01       	movw	r24, r28
    2478:	8b 54       	subi	r24, 0x4B	; 75
    247a:	9f 4f       	sbci	r25, 0xFF	; 255
    247c:	9e 01       	movw	r18, r28
    247e:	2b 54       	subi	r18, 0x4B	; 75
    2480:	3f 4f       	sbci	r19, 0xFF	; 255
    2482:	f9 01       	movw	r30, r18
    2484:	20 81       	ld	r18, Z
    2486:	31 81       	ldd	r19, Z+1	; 0x01
    2488:	21 50       	subi	r18, 0x01	; 1
    248a:	31 09       	sbc	r19, r1
    248c:	dc 01       	movw	r26, r24
    248e:	2d 93       	st	X+, r18
    2490:	3c 93       	st	X, r19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2492:	ce 01       	movw	r24, r28
    2494:	8b 54       	subi	r24, 0x4B	; 75
    2496:	9f 4f       	sbci	r25, 0xFF	; 255
    2498:	fc 01       	movw	r30, r24
    249a:	80 81       	ld	r24, Z
    249c:	91 81       	ldd	r25, Z+1	; 0x01
    249e:	89 2b       	or	r24, r25
    24a0:	99 f6       	brne	.-90     	; 0x2448 <main+0x1a50>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
    24a2:	39 c0       	rjmp	.+114    	; 0x2516 <main+0x1b1e>
	}
	else
		__ticks = (uint16_t)__tmp;
    24a4:	8e 01       	movw	r16, r28
    24a6:	0b 54       	subi	r16, 0x4B	; 75
    24a8:	1f 4f       	sbci	r17, 0xFF	; 255
    24aa:	ce 01       	movw	r24, r28
    24ac:	8f 54       	subi	r24, 0x4F	; 79
    24ae:	9f 4f       	sbci	r25, 0xFF	; 255
    24b0:	dc 01       	movw	r26, r24
    24b2:	6d 91       	ld	r22, X+
    24b4:	7d 91       	ld	r23, X+
    24b6:	8d 91       	ld	r24, X+
    24b8:	9c 91       	ld	r25, X
    24ba:	0e 94 bf 13 	call	0x277e	; 0x277e <__fixunssfsi>
    24be:	c5 5e       	subi	r28, 0xE5	; 229
    24c0:	dd 4f       	sbci	r29, 0xFD	; 253
    24c2:	68 83       	st	Y, r22
    24c4:	79 83       	std	Y+1, r23	; 0x01
    24c6:	8a 83       	std	Y+2, r24	; 0x02
    24c8:	9b 83       	std	Y+3, r25	; 0x03
    24ca:	cb 51       	subi	r28, 0x1B	; 27
    24cc:	d2 40       	sbci	r29, 0x02	; 2
    24ce:	c5 5e       	subi	r28, 0xE5	; 229
    24d0:	dd 4f       	sbci	r29, 0xFD	; 253
    24d2:	88 81       	ld	r24, Y
    24d4:	99 81       	ldd	r25, Y+1	; 0x01
    24d6:	cb 51       	subi	r28, 0x1B	; 27
    24d8:	d2 40       	sbci	r29, 0x02	; 2
    24da:	f8 01       	movw	r30, r16
    24dc:	91 83       	std	Z+1, r25	; 0x01
    24de:	80 83       	st	Z, r24
    24e0:	ce 01       	movw	r24, r28
    24e2:	87 54       	subi	r24, 0x47	; 71
    24e4:	9f 4f       	sbci	r25, 0xFF	; 255
    24e6:	9e 01       	movw	r18, r28
    24e8:	2b 54       	subi	r18, 0x4B	; 75
    24ea:	3f 4f       	sbci	r19, 0xFF	; 255
    24ec:	d9 01       	movw	r26, r18
    24ee:	2d 91       	ld	r18, X+
    24f0:	3c 91       	ld	r19, X
    24f2:	fc 01       	movw	r30, r24
    24f4:	31 83       	std	Z+1, r19	; 0x01
    24f6:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24f8:	ce 01       	movw	r24, r28
    24fa:	87 54       	subi	r24, 0x47	; 71
    24fc:	9f 4f       	sbci	r25, 0xFF	; 255
    24fe:	dc 01       	movw	r26, r24
    2500:	8d 91       	ld	r24, X+
    2502:	9c 91       	ld	r25, X
    2504:	01 97       	sbiw	r24, 0x01	; 1
    2506:	f1 f7       	brne	.-4      	; 0x2504 <main+0x1b0c>
    2508:	9e 01       	movw	r18, r28
    250a:	27 54       	subi	r18, 0x47	; 71
    250c:	3f 4f       	sbci	r19, 0xFF	; 255
    250e:	f9 01       	movw	r30, r18
    2510:	91 83       	std	Z+1, r25	; 0x01
    2512:	80 83       	st	Z, r24
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
    2514:	00 00       	nop

		CLCD_voidSendCommand(1);
		CLCD_voidWriteSpecialCharacter(&gun,0,0,0);
		CLCD_voidWriteSpecialCharacter(&Hamoksha,1,0,15);

		for(Local_u8Counter3=2;Local_u8Counter3<15;Local_u8Counter3++)
    2516:	8c 81       	ldd	r24, Y+4	; 0x04
    2518:	8f 5f       	subi	r24, 0xFF	; 255
    251a:	8c 83       	std	Y+4, r24	; 0x04
    251c:	8c 81       	ldd	r24, Y+4	; 0x04
    251e:	8f 30       	cpi	r24, 0x0F	; 15
    2520:	08 f4       	brcc	.+2      	; 0x2524 <main+0x1b2c>
    2522:	e9 ce       	rjmp	.-558    	; 0x22f6 <main+0x18fe>
			CLCD_voidWriteSpecialCharacter(&bullet,2,0,Local_u8Counter3);
			_delay_ms(time);
			//CLCD_voidSendCommand(1);
		}

		CLCD_voidSendCommand(1);
    2524:	81 e0       	ldi	r24, 0x01	; 1
    2526:	0e 94 41 00 	call	0x82	; 0x82 <CLCD_voidSendCommand>
		CLCD_voidWriteSpecialCharacter(&gun,0,0,0);
    252a:	ce 01       	movw	r24, r28
    252c:	8e 5f       	subi	r24, 0xFE	; 254
    252e:	9e 4f       	sbci	r25, 0xFE	; 254
    2530:	20 e0       	ldi	r18, 0x00	; 0
    2532:	40 e0       	ldi	r20, 0x00	; 0
    2534:	60 e0       	ldi	r22, 0x00	; 0
    2536:	0e 94 ae 02 	call	0x55c	; 0x55c <CLCD_voidWriteSpecialCharacter>
		CLCD_voidWriteSpecialCharacter(&Hamoksha_Died,1,0,15);
    253a:	ce 01       	movw	r24, r28
    253c:	80 5f       	subi	r24, 0xF0	; 240
    253e:	9e 4f       	sbci	r25, 0xFE	; 254
    2540:	2f e0       	ldi	r18, 0x0F	; 15
    2542:	40 e0       	ldi	r20, 0x00	; 0
    2544:	61 e0       	ldi	r22, 0x01	; 1
    2546:	0e 94 ae 02 	call	0x55c	; 0x55c <CLCD_voidWriteSpecialCharacter>
		CLCD_voidGoToXY(1,0);
    254a:	60 e0       	ldi	r22, 0x00	; 0
    254c:	81 e0       	ldi	r24, 0x01	; 1
    254e:	0e 94 8d 02 	call	0x51a	; 0x51a <CLCD_voidGoToXY>
		CLCD_voidSendString("Hamoksha Died");
    2552:	82 ea       	ldi	r24, 0xA2	; 162
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	0e 94 62 02 	call	0x4c4	; 0x4c4 <CLCD_voidSendString>
    255a:	9e 01       	movw	r18, r28
    255c:	25 54       	subi	r18, 0x45	; 69
    255e:	3f 4f       	sbci	r19, 0xFF	; 255
    2560:	80 e0       	ldi	r24, 0x00	; 0
    2562:	90 e4       	ldi	r25, 0x40	; 64
    2564:	ac e9       	ldi	r26, 0x9C	; 156
    2566:	b5 e4       	ldi	r27, 0x45	; 69
    2568:	f9 01       	movw	r30, r18
    256a:	80 83       	st	Z, r24
    256c:	91 83       	std	Z+1, r25	; 0x01
    256e:	a2 83       	std	Z+2, r26	; 0x02
    2570:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2572:	8e 01       	movw	r16, r28
    2574:	01 54       	subi	r16, 0x41	; 65
    2576:	1f 4f       	sbci	r17, 0xFF	; 255
    2578:	ce 01       	movw	r24, r28
    257a:	85 54       	subi	r24, 0x45	; 69
    257c:	9f 4f       	sbci	r25, 0xFF	; 255
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	4a ef       	ldi	r20, 0xFA	; 250
    2584:	54 e4       	ldi	r21, 0x44	; 68
    2586:	dc 01       	movw	r26, r24
    2588:	6d 91       	ld	r22, X+
    258a:	7d 91       	ld	r23, X+
    258c:	8d 91       	ld	r24, X+
    258e:	9c 91       	ld	r25, X
    2590:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
    2594:	c1 5e       	subi	r28, 0xE1	; 225
    2596:	dd 4f       	sbci	r29, 0xFD	; 253
    2598:	68 83       	st	Y, r22
    259a:	79 83       	std	Y+1, r23	; 0x01
    259c:	8a 83       	std	Y+2, r24	; 0x02
    259e:	9b 83       	std	Y+3, r25	; 0x03
    25a0:	cf 51       	subi	r28, 0x1F	; 31
    25a2:	d2 40       	sbci	r29, 0x02	; 2
    25a4:	c1 5e       	subi	r28, 0xE1	; 225
    25a6:	dd 4f       	sbci	r29, 0xFD	; 253
    25a8:	88 81       	ld	r24, Y
    25aa:	99 81       	ldd	r25, Y+1	; 0x01
    25ac:	aa 81       	ldd	r26, Y+2	; 0x02
    25ae:	bb 81       	ldd	r27, Y+3	; 0x03
    25b0:	cf 51       	subi	r28, 0x1F	; 31
    25b2:	d2 40       	sbci	r29, 0x02	; 2
    25b4:	f8 01       	movw	r30, r16
    25b6:	80 83       	st	Z, r24
    25b8:	91 83       	std	Z+1, r25	; 0x01
    25ba:	a2 83       	std	Z+2, r26	; 0x02
    25bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25be:	ce 01       	movw	r24, r28
    25c0:	81 54       	subi	r24, 0x41	; 65
    25c2:	9f 4f       	sbci	r25, 0xFF	; 255
    25c4:	20 e0       	ldi	r18, 0x00	; 0
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	40 e8       	ldi	r20, 0x80	; 128
    25ca:	5f e3       	ldi	r21, 0x3F	; 63
    25cc:	dc 01       	movw	r26, r24
    25ce:	6d 91       	ld	r22, X+
    25d0:	7d 91       	ld	r23, X+
    25d2:	8d 91       	ld	r24, X+
    25d4:	9c 91       	ld	r25, X
    25d6:	0e 94 ba 13 	call	0x2774	; 0x2774 <__cmpsf2>
    25da:	88 23       	and	r24, r24
    25dc:	4c f4       	brge	.+18     	; 0x25f0 <main+0x1bf8>
		__ticks = 1;
    25de:	ce 01       	movw	r24, r28
    25e0:	8d 53       	subi	r24, 0x3D	; 61
    25e2:	9f 4f       	sbci	r25, 0xFF	; 255
    25e4:	21 e0       	ldi	r18, 0x01	; 1
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	fc 01       	movw	r30, r24
    25ea:	31 83       	std	Z+1, r19	; 0x01
    25ec:	20 83       	st	Z, r18
    25ee:	a2 c0       	rjmp	.+324    	; 0x2734 <main+0x1d3c>
	else if (__tmp > 65535)
    25f0:	ce 01       	movw	r24, r28
    25f2:	81 54       	subi	r24, 0x41	; 65
    25f4:	9f 4f       	sbci	r25, 0xFF	; 255
    25f6:	20 e0       	ldi	r18, 0x00	; 0
    25f8:	3f ef       	ldi	r19, 0xFF	; 255
    25fa:	4f e7       	ldi	r20, 0x7F	; 127
    25fc:	57 e4       	ldi	r21, 0x47	; 71
    25fe:	dc 01       	movw	r26, r24
    2600:	6d 91       	ld	r22, X+
    2602:	7d 91       	ld	r23, X+
    2604:	8d 91       	ld	r24, X+
    2606:	9c 91       	ld	r25, X
    2608:	0e 94 3b 14 	call	0x2876	; 0x2876 <__gesf2>
    260c:	18 16       	cp	r1, r24
    260e:	0c f0       	brlt	.+2      	; 0x2612 <main+0x1c1a>
    2610:	73 c0       	rjmp	.+230    	; 0x26f8 <main+0x1d00>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2612:	ce 01       	movw	r24, r28
    2614:	85 54       	subi	r24, 0x45	; 69
    2616:	9f 4f       	sbci	r25, 0xFF	; 255
    2618:	20 e0       	ldi	r18, 0x00	; 0
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	40 e2       	ldi	r20, 0x20	; 32
    261e:	51 e4       	ldi	r21, 0x41	; 65
    2620:	fc 01       	movw	r30, r24
    2622:	60 81       	ld	r22, Z
    2624:	71 81       	ldd	r23, Z+1	; 0x01
    2626:	82 81       	ldd	r24, Z+2	; 0x02
    2628:	93 81       	ldd	r25, Z+3	; 0x03
    262a:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
    262e:	cd 5d       	subi	r28, 0xDD	; 221
    2630:	dd 4f       	sbci	r29, 0xFD	; 253
    2632:	68 83       	st	Y, r22
    2634:	79 83       	std	Y+1, r23	; 0x01
    2636:	8a 83       	std	Y+2, r24	; 0x02
    2638:	9b 83       	std	Y+3, r25	; 0x03
    263a:	c3 52       	subi	r28, 0x23	; 35
    263c:	d2 40       	sbci	r29, 0x02	; 2
    263e:	cd 5d       	subi	r28, 0xDD	; 221
    2640:	dd 4f       	sbci	r29, 0xFD	; 253
    2642:	88 81       	ld	r24, Y
    2644:	99 81       	ldd	r25, Y+1	; 0x01
    2646:	aa 81       	ldd	r26, Y+2	; 0x02
    2648:	bb 81       	ldd	r27, Y+3	; 0x03
    264a:	c3 52       	subi	r28, 0x23	; 35
    264c:	d2 40       	sbci	r29, 0x02	; 2
    264e:	c5 5b       	subi	r28, 0xB5	; 181
    2650:	de 4f       	sbci	r29, 0xFE	; 254
    2652:	88 83       	st	Y, r24
    2654:	99 83       	std	Y+1, r25	; 0x01
    2656:	aa 83       	std	Y+2, r26	; 0x02
    2658:	bb 83       	std	Y+3, r27	; 0x03
    265a:	cb 54       	subi	r28, 0x4B	; 75
    265c:	d1 40       	sbci	r29, 0x01	; 1
    265e:	8e 01       	movw	r16, r28
    2660:	0d 53       	subi	r16, 0x3D	; 61
    2662:	1f 4f       	sbci	r17, 0xFF	; 255
    2664:	c5 5b       	subi	r28, 0xB5	; 181
    2666:	de 4f       	sbci	r29, 0xFE	; 254
    2668:	68 81       	ld	r22, Y
    266a:	79 81       	ldd	r23, Y+1	; 0x01
    266c:	8a 81       	ldd	r24, Y+2	; 0x02
    266e:	9b 81       	ldd	r25, Y+3	; 0x03
    2670:	cb 54       	subi	r28, 0x4B	; 75
    2672:	d1 40       	sbci	r29, 0x01	; 1
    2674:	0e 94 bf 13 	call	0x277e	; 0x277e <__fixunssfsi>
    2678:	c9 5d       	subi	r28, 0xD9	; 217
    267a:	dd 4f       	sbci	r29, 0xFD	; 253
    267c:	68 83       	st	Y, r22
    267e:	79 83       	std	Y+1, r23	; 0x01
    2680:	8a 83       	std	Y+2, r24	; 0x02
    2682:	9b 83       	std	Y+3, r25	; 0x03
    2684:	c7 52       	subi	r28, 0x27	; 39
    2686:	d2 40       	sbci	r29, 0x02	; 2
    2688:	c9 5d       	subi	r28, 0xD9	; 217
    268a:	dd 4f       	sbci	r29, 0xFD	; 253
    268c:	e8 81       	ld	r30, Y
    268e:	f9 81       	ldd	r31, Y+1	; 0x01
    2690:	c7 52       	subi	r28, 0x27	; 39
    2692:	d2 40       	sbci	r29, 0x02	; 2
    2694:	d8 01       	movw	r26, r16
    2696:	ed 93       	st	X+, r30
    2698:	fc 93       	st	X, r31
		while(__ticks)
    269a:	25 c0       	rjmp	.+74     	; 0x26e6 <main+0x1cee>
    269c:	ce 01       	movw	r24, r28
    269e:	8b 53       	subi	r24, 0x3B	; 59
    26a0:	9f 4f       	sbci	r25, 0xFF	; 255
    26a2:	28 ec       	ldi	r18, 0xC8	; 200
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	dc 01       	movw	r26, r24
    26a8:	2d 93       	st	X+, r18
    26aa:	3c 93       	st	X, r19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    26ac:	ce 01       	movw	r24, r28
    26ae:	8b 53       	subi	r24, 0x3B	; 59
    26b0:	9f 4f       	sbci	r25, 0xFF	; 255
    26b2:	fc 01       	movw	r30, r24
    26b4:	80 81       	ld	r24, Z
    26b6:	91 81       	ldd	r25, Z+1	; 0x01
    26b8:	01 97       	sbiw	r24, 0x01	; 1
    26ba:	f1 f7       	brne	.-4      	; 0x26b8 <main+0x1cc0>
    26bc:	9e 01       	movw	r18, r28
    26be:	2b 53       	subi	r18, 0x3B	; 59
    26c0:	3f 4f       	sbci	r19, 0xFF	; 255
    26c2:	d9 01       	movw	r26, r18
    26c4:	8d 93       	st	X+, r24
    26c6:	9c 93       	st	X, r25
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
    26c8:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ca:	ce 01       	movw	r24, r28
    26cc:	8d 53       	subi	r24, 0x3D	; 61
    26ce:	9f 4f       	sbci	r25, 0xFF	; 255
    26d0:	9e 01       	movw	r18, r28
    26d2:	2d 53       	subi	r18, 0x3D	; 61
    26d4:	3f 4f       	sbci	r19, 0xFF	; 255
    26d6:	f9 01       	movw	r30, r18
    26d8:	20 81       	ld	r18, Z
    26da:	31 81       	ldd	r19, Z+1	; 0x01
    26dc:	21 50       	subi	r18, 0x01	; 1
    26de:	31 09       	sbc	r19, r1
    26e0:	dc 01       	movw	r26, r24
    26e2:	2d 93       	st	X+, r18
    26e4:	3c 93       	st	X, r19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26e6:	ce 01       	movw	r24, r28
    26e8:	8d 53       	subi	r24, 0x3D	; 61
    26ea:	9f 4f       	sbci	r25, 0xFF	; 255
    26ec:	fc 01       	movw	r30, r24
    26ee:	80 81       	ld	r24, Z
    26f0:	91 81       	ldd	r25, Z+1	; 0x01
    26f2:	89 2b       	or	r24, r25
    26f4:	99 f6       	brne	.-90     	; 0x269c <main+0x1ca4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
    26f6:	39 c0       	rjmp	.+114    	; 0x276a <main+0x1d72>
	}
	else
		__ticks = (uint16_t)__tmp;
    26f8:	8e 01       	movw	r16, r28
    26fa:	0d 53       	subi	r16, 0x3D	; 61
    26fc:	1f 4f       	sbci	r17, 0xFF	; 255
    26fe:	ce 01       	movw	r24, r28
    2700:	81 54       	subi	r24, 0x41	; 65
    2702:	9f 4f       	sbci	r25, 0xFF	; 255
    2704:	dc 01       	movw	r26, r24
    2706:	6d 91       	ld	r22, X+
    2708:	7d 91       	ld	r23, X+
    270a:	8d 91       	ld	r24, X+
    270c:	9c 91       	ld	r25, X
    270e:	0e 94 bf 13 	call	0x277e	; 0x277e <__fixunssfsi>
    2712:	c5 5d       	subi	r28, 0xD5	; 213
    2714:	dd 4f       	sbci	r29, 0xFD	; 253
    2716:	68 83       	st	Y, r22
    2718:	79 83       	std	Y+1, r23	; 0x01
    271a:	8a 83       	std	Y+2, r24	; 0x02
    271c:	9b 83       	std	Y+3, r25	; 0x03
    271e:	cb 52       	subi	r28, 0x2B	; 43
    2720:	d2 40       	sbci	r29, 0x02	; 2
    2722:	c5 5d       	subi	r28, 0xD5	; 213
    2724:	dd 4f       	sbci	r29, 0xFD	; 253
    2726:	88 81       	ld	r24, Y
    2728:	99 81       	ldd	r25, Y+1	; 0x01
    272a:	cb 52       	subi	r28, 0x2B	; 43
    272c:	d2 40       	sbci	r29, 0x02	; 2
    272e:	f8 01       	movw	r30, r16
    2730:	91 83       	std	Z+1, r25	; 0x01
    2732:	80 83       	st	Z, r24
    2734:	ce 01       	movw	r24, r28
    2736:	89 53       	subi	r24, 0x39	; 57
    2738:	9f 4f       	sbci	r25, 0xFF	; 255
    273a:	9e 01       	movw	r18, r28
    273c:	2d 53       	subi	r18, 0x3D	; 61
    273e:	3f 4f       	sbci	r19, 0xFF	; 255
    2740:	d9 01       	movw	r26, r18
    2742:	2d 91       	ld	r18, X+
    2744:	3c 91       	ld	r19, X
    2746:	fc 01       	movw	r30, r24
    2748:	31 83       	std	Z+1, r19	; 0x01
    274a:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    274c:	ce 01       	movw	r24, r28
    274e:	89 53       	subi	r24, 0x39	; 57
    2750:	9f 4f       	sbci	r25, 0xFF	; 255
    2752:	dc 01       	movw	r26, r24
    2754:	8d 91       	ld	r24, X+
    2756:	9c 91       	ld	r25, X
    2758:	01 97       	sbiw	r24, 0x01	; 1
    275a:	f1 f7       	brne	.-4      	; 0x2758 <main+0x1d60>
    275c:	9e 01       	movw	r18, r28
    275e:	29 53       	subi	r18, 0x39	; 57
    2760:	3f 4f       	sbci	r19, 0xFF	; 255
    2762:	f9 01       	movw	r30, r18
    2764:	91 83       	std	Z+1, r25	; 0x01
    2766:	80 83       	st	Z, r24
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
    2768:	00 00       	nop
		_delay_ms(5000);
		CLCD_voidSendCommand(1);
    276a:	81 e0       	ldi	r24, 0x01	; 1
    276c:	0e 94 41 00 	call	0x82	; 0x82 <CLCD_voidSendCommand>
										};


	while(1)
	{
		CLCD_voidSendString("I am Hamoksha");
    2770:	0c 94 86 05 	jmp	0xb0c	; 0xb0c <main+0x114>

00002774 <__cmpsf2>:
    2774:	0e 94 ee 13 	call	0x27dc	; 0x27dc <__fp_cmp>
    2778:	08 f4       	brcc	.+2      	; 0x277c <__cmpsf2+0x8>
    277a:	81 e0       	ldi	r24, 0x01	; 1
    277c:	08 95       	ret

0000277e <__fixunssfsi>:
    277e:	0e 94 1a 14 	call	0x2834	; 0x2834 <__fp_splitA>
    2782:	88 f0       	brcs	.+34     	; 0x27a6 <__fixunssfsi+0x28>
    2784:	9f 57       	subi	r25, 0x7F	; 127
    2786:	98 f0       	brcs	.+38     	; 0x27ae <__fixunssfsi+0x30>
    2788:	b9 2f       	mov	r27, r25
    278a:	99 27       	eor	r25, r25
    278c:	b7 51       	subi	r27, 0x17	; 23
    278e:	b0 f0       	brcs	.+44     	; 0x27bc <__fixunssfsi+0x3e>
    2790:	e1 f0       	breq	.+56     	; 0x27ca <__fixunssfsi+0x4c>
    2792:	66 0f       	add	r22, r22
    2794:	77 1f       	adc	r23, r23
    2796:	88 1f       	adc	r24, r24
    2798:	99 1f       	adc	r25, r25
    279a:	1a f0       	brmi	.+6      	; 0x27a2 <__fixunssfsi+0x24>
    279c:	ba 95       	dec	r27
    279e:	c9 f7       	brne	.-14     	; 0x2792 <__fixunssfsi+0x14>
    27a0:	14 c0       	rjmp	.+40     	; 0x27ca <__fixunssfsi+0x4c>
    27a2:	b1 30       	cpi	r27, 0x01	; 1
    27a4:	91 f0       	breq	.+36     	; 0x27ca <__fixunssfsi+0x4c>
    27a6:	0e 94 34 14 	call	0x2868	; 0x2868 <__fp_zero>
    27aa:	b1 e0       	ldi	r27, 0x01	; 1
    27ac:	08 95       	ret
    27ae:	0c 94 34 14 	jmp	0x2868	; 0x2868 <__fp_zero>
    27b2:	67 2f       	mov	r22, r23
    27b4:	78 2f       	mov	r23, r24
    27b6:	88 27       	eor	r24, r24
    27b8:	b8 5f       	subi	r27, 0xF8	; 248
    27ba:	39 f0       	breq	.+14     	; 0x27ca <__fixunssfsi+0x4c>
    27bc:	b9 3f       	cpi	r27, 0xF9	; 249
    27be:	cc f3       	brlt	.-14     	; 0x27b2 <__fixunssfsi+0x34>
    27c0:	86 95       	lsr	r24
    27c2:	77 95       	ror	r23
    27c4:	67 95       	ror	r22
    27c6:	b3 95       	inc	r27
    27c8:	d9 f7       	brne	.-10     	; 0x27c0 <__fixunssfsi+0x42>
    27ca:	3e f4       	brtc	.+14     	; 0x27da <__fixunssfsi+0x5c>
    27cc:	90 95       	com	r25
    27ce:	80 95       	com	r24
    27d0:	70 95       	com	r23
    27d2:	61 95       	neg	r22
    27d4:	7f 4f       	sbci	r23, 0xFF	; 255
    27d6:	8f 4f       	sbci	r24, 0xFF	; 255
    27d8:	9f 4f       	sbci	r25, 0xFF	; 255
    27da:	08 95       	ret

000027dc <__fp_cmp>:
    27dc:	99 0f       	add	r25, r25
    27de:	00 08       	sbc	r0, r0
    27e0:	55 0f       	add	r21, r21
    27e2:	aa 0b       	sbc	r26, r26
    27e4:	e0 e8       	ldi	r30, 0x80	; 128
    27e6:	fe ef       	ldi	r31, 0xFE	; 254
    27e8:	16 16       	cp	r1, r22
    27ea:	17 06       	cpc	r1, r23
    27ec:	e8 07       	cpc	r30, r24
    27ee:	f9 07       	cpc	r31, r25
    27f0:	c0 f0       	brcs	.+48     	; 0x2822 <__fp_cmp+0x46>
    27f2:	12 16       	cp	r1, r18
    27f4:	13 06       	cpc	r1, r19
    27f6:	e4 07       	cpc	r30, r20
    27f8:	f5 07       	cpc	r31, r21
    27fa:	98 f0       	brcs	.+38     	; 0x2822 <__fp_cmp+0x46>
    27fc:	62 1b       	sub	r22, r18
    27fe:	73 0b       	sbc	r23, r19
    2800:	84 0b       	sbc	r24, r20
    2802:	95 0b       	sbc	r25, r21
    2804:	39 f4       	brne	.+14     	; 0x2814 <__fp_cmp+0x38>
    2806:	0a 26       	eor	r0, r26
    2808:	61 f0       	breq	.+24     	; 0x2822 <__fp_cmp+0x46>
    280a:	23 2b       	or	r18, r19
    280c:	24 2b       	or	r18, r20
    280e:	25 2b       	or	r18, r21
    2810:	21 f4       	brne	.+8      	; 0x281a <__fp_cmp+0x3e>
    2812:	08 95       	ret
    2814:	0a 26       	eor	r0, r26
    2816:	09 f4       	brne	.+2      	; 0x281a <__fp_cmp+0x3e>
    2818:	a1 40       	sbci	r26, 0x01	; 1
    281a:	a6 95       	lsr	r26
    281c:	8f ef       	ldi	r24, 0xFF	; 255
    281e:	81 1d       	adc	r24, r1
    2820:	81 1d       	adc	r24, r1
    2822:	08 95       	ret

00002824 <__fp_split3>:
    2824:	57 fd       	sbrc	r21, 7
    2826:	90 58       	subi	r25, 0x80	; 128
    2828:	44 0f       	add	r20, r20
    282a:	55 1f       	adc	r21, r21
    282c:	59 f0       	breq	.+22     	; 0x2844 <__fp_splitA+0x10>
    282e:	5f 3f       	cpi	r21, 0xFF	; 255
    2830:	71 f0       	breq	.+28     	; 0x284e <__fp_splitA+0x1a>
    2832:	47 95       	ror	r20

00002834 <__fp_splitA>:
    2834:	88 0f       	add	r24, r24
    2836:	97 fb       	bst	r25, 7
    2838:	99 1f       	adc	r25, r25
    283a:	61 f0       	breq	.+24     	; 0x2854 <__fp_splitA+0x20>
    283c:	9f 3f       	cpi	r25, 0xFF	; 255
    283e:	79 f0       	breq	.+30     	; 0x285e <__fp_splitA+0x2a>
    2840:	87 95       	ror	r24
    2842:	08 95       	ret
    2844:	12 16       	cp	r1, r18
    2846:	13 06       	cpc	r1, r19
    2848:	14 06       	cpc	r1, r20
    284a:	55 1f       	adc	r21, r21
    284c:	f2 cf       	rjmp	.-28     	; 0x2832 <__fp_split3+0xe>
    284e:	46 95       	lsr	r20
    2850:	f1 df       	rcall	.-30     	; 0x2834 <__fp_splitA>
    2852:	08 c0       	rjmp	.+16     	; 0x2864 <__fp_splitA+0x30>
    2854:	16 16       	cp	r1, r22
    2856:	17 06       	cpc	r1, r23
    2858:	18 06       	cpc	r1, r24
    285a:	99 1f       	adc	r25, r25
    285c:	f1 cf       	rjmp	.-30     	; 0x2840 <__fp_splitA+0xc>
    285e:	86 95       	lsr	r24
    2860:	71 05       	cpc	r23, r1
    2862:	61 05       	cpc	r22, r1
    2864:	08 94       	sec
    2866:	08 95       	ret

00002868 <__fp_zero>:
    2868:	e8 94       	clt

0000286a <__fp_szero>:
    286a:	bb 27       	eor	r27, r27
    286c:	66 27       	eor	r22, r22
    286e:	77 27       	eor	r23, r23
    2870:	cb 01       	movw	r24, r22
    2872:	97 f9       	bld	r25, 7
    2874:	08 95       	ret

00002876 <__gesf2>:
    2876:	0e 94 ee 13 	call	0x27dc	; 0x27dc <__fp_cmp>
    287a:	08 f4       	brcc	.+2      	; 0x287e <__gesf2+0x8>
    287c:	8f ef       	ldi	r24, 0xFF	; 255
    287e:	08 95       	ret

00002880 <__mulsf3>:
    2880:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__mulsf3x>
    2884:	0c 94 c4 14 	jmp	0x2988	; 0x2988 <__fp_round>
    2888:	0e 94 b6 14 	call	0x296c	; 0x296c <__fp_pscA>
    288c:	38 f0       	brcs	.+14     	; 0x289c <__mulsf3+0x1c>
    288e:	0e 94 bd 14 	call	0x297a	; 0x297a <__fp_pscB>
    2892:	20 f0       	brcs	.+8      	; 0x289c <__mulsf3+0x1c>
    2894:	95 23       	and	r25, r21
    2896:	11 f0       	breq	.+4      	; 0x289c <__mulsf3+0x1c>
    2898:	0c 94 ad 14 	jmp	0x295a	; 0x295a <__fp_inf>
    289c:	0c 94 b3 14 	jmp	0x2966	; 0x2966 <__fp_nan>
    28a0:	11 24       	eor	r1, r1
    28a2:	0c 94 35 14 	jmp	0x286a	; 0x286a <__fp_szero>

000028a6 <__mulsf3x>:
    28a6:	0e 94 12 14 	call	0x2824	; 0x2824 <__fp_split3>
    28aa:	70 f3       	brcs	.-36     	; 0x2888 <__mulsf3+0x8>

000028ac <__mulsf3_pse>:
    28ac:	95 9f       	mul	r25, r21
    28ae:	c1 f3       	breq	.-16     	; 0x28a0 <__mulsf3+0x20>
    28b0:	95 0f       	add	r25, r21
    28b2:	50 e0       	ldi	r21, 0x00	; 0
    28b4:	55 1f       	adc	r21, r21
    28b6:	62 9f       	mul	r22, r18
    28b8:	f0 01       	movw	r30, r0
    28ba:	72 9f       	mul	r23, r18
    28bc:	bb 27       	eor	r27, r27
    28be:	f0 0d       	add	r31, r0
    28c0:	b1 1d       	adc	r27, r1
    28c2:	63 9f       	mul	r22, r19
    28c4:	aa 27       	eor	r26, r26
    28c6:	f0 0d       	add	r31, r0
    28c8:	b1 1d       	adc	r27, r1
    28ca:	aa 1f       	adc	r26, r26
    28cc:	64 9f       	mul	r22, r20
    28ce:	66 27       	eor	r22, r22
    28d0:	b0 0d       	add	r27, r0
    28d2:	a1 1d       	adc	r26, r1
    28d4:	66 1f       	adc	r22, r22
    28d6:	82 9f       	mul	r24, r18
    28d8:	22 27       	eor	r18, r18
    28da:	b0 0d       	add	r27, r0
    28dc:	a1 1d       	adc	r26, r1
    28de:	62 1f       	adc	r22, r18
    28e0:	73 9f       	mul	r23, r19
    28e2:	b0 0d       	add	r27, r0
    28e4:	a1 1d       	adc	r26, r1
    28e6:	62 1f       	adc	r22, r18
    28e8:	83 9f       	mul	r24, r19
    28ea:	a0 0d       	add	r26, r0
    28ec:	61 1d       	adc	r22, r1
    28ee:	22 1f       	adc	r18, r18
    28f0:	74 9f       	mul	r23, r20
    28f2:	33 27       	eor	r19, r19
    28f4:	a0 0d       	add	r26, r0
    28f6:	61 1d       	adc	r22, r1
    28f8:	23 1f       	adc	r18, r19
    28fa:	84 9f       	mul	r24, r20
    28fc:	60 0d       	add	r22, r0
    28fe:	21 1d       	adc	r18, r1
    2900:	82 2f       	mov	r24, r18
    2902:	76 2f       	mov	r23, r22
    2904:	6a 2f       	mov	r22, r26
    2906:	11 24       	eor	r1, r1
    2908:	9f 57       	subi	r25, 0x7F	; 127
    290a:	50 40       	sbci	r21, 0x00	; 0
    290c:	9a f0       	brmi	.+38     	; 0x2934 <__mulsf3_pse+0x88>
    290e:	f1 f0       	breq	.+60     	; 0x294c <__mulsf3_pse+0xa0>
    2910:	88 23       	and	r24, r24
    2912:	4a f0       	brmi	.+18     	; 0x2926 <__mulsf3_pse+0x7a>
    2914:	ee 0f       	add	r30, r30
    2916:	ff 1f       	adc	r31, r31
    2918:	bb 1f       	adc	r27, r27
    291a:	66 1f       	adc	r22, r22
    291c:	77 1f       	adc	r23, r23
    291e:	88 1f       	adc	r24, r24
    2920:	91 50       	subi	r25, 0x01	; 1
    2922:	50 40       	sbci	r21, 0x00	; 0
    2924:	a9 f7       	brne	.-22     	; 0x2910 <__mulsf3_pse+0x64>
    2926:	9e 3f       	cpi	r25, 0xFE	; 254
    2928:	51 05       	cpc	r21, r1
    292a:	80 f0       	brcs	.+32     	; 0x294c <__mulsf3_pse+0xa0>
    292c:	0c 94 ad 14 	jmp	0x295a	; 0x295a <__fp_inf>
    2930:	0c 94 35 14 	jmp	0x286a	; 0x286a <__fp_szero>
    2934:	5f 3f       	cpi	r21, 0xFF	; 255
    2936:	e4 f3       	brlt	.-8      	; 0x2930 <__mulsf3_pse+0x84>
    2938:	98 3e       	cpi	r25, 0xE8	; 232
    293a:	d4 f3       	brlt	.-12     	; 0x2930 <__mulsf3_pse+0x84>
    293c:	86 95       	lsr	r24
    293e:	77 95       	ror	r23
    2940:	67 95       	ror	r22
    2942:	b7 95       	ror	r27
    2944:	f7 95       	ror	r31
    2946:	e7 95       	ror	r30
    2948:	9f 5f       	subi	r25, 0xFF	; 255
    294a:	c1 f7       	brne	.-16     	; 0x293c <__mulsf3_pse+0x90>
    294c:	fe 2b       	or	r31, r30
    294e:	88 0f       	add	r24, r24
    2950:	91 1d       	adc	r25, r1
    2952:	96 95       	lsr	r25
    2954:	87 95       	ror	r24
    2956:	97 f9       	bld	r25, 7
    2958:	08 95       	ret

0000295a <__fp_inf>:
    295a:	97 f9       	bld	r25, 7
    295c:	9f 67       	ori	r25, 0x7F	; 127
    295e:	80 e8       	ldi	r24, 0x80	; 128
    2960:	70 e0       	ldi	r23, 0x00	; 0
    2962:	60 e0       	ldi	r22, 0x00	; 0
    2964:	08 95       	ret

00002966 <__fp_nan>:
    2966:	9f ef       	ldi	r25, 0xFF	; 255
    2968:	80 ec       	ldi	r24, 0xC0	; 192
    296a:	08 95       	ret

0000296c <__fp_pscA>:
    296c:	00 24       	eor	r0, r0
    296e:	0a 94       	dec	r0
    2970:	16 16       	cp	r1, r22
    2972:	17 06       	cpc	r1, r23
    2974:	18 06       	cpc	r1, r24
    2976:	09 06       	cpc	r0, r25
    2978:	08 95       	ret

0000297a <__fp_pscB>:
    297a:	00 24       	eor	r0, r0
    297c:	0a 94       	dec	r0
    297e:	12 16       	cp	r1, r18
    2980:	13 06       	cpc	r1, r19
    2982:	14 06       	cpc	r1, r20
    2984:	05 06       	cpc	r0, r21
    2986:	08 95       	ret

00002988 <__fp_round>:
    2988:	09 2e       	mov	r0, r25
    298a:	03 94       	inc	r0
    298c:	00 0c       	add	r0, r0
    298e:	11 f4       	brne	.+4      	; 0x2994 <__fp_round+0xc>
    2990:	88 23       	and	r24, r24
    2992:	52 f0       	brmi	.+20     	; 0x29a8 <__fp_round+0x20>
    2994:	bb 0f       	add	r27, r27
    2996:	40 f4       	brcc	.+16     	; 0x29a8 <__fp_round+0x20>
    2998:	bf 2b       	or	r27, r31
    299a:	11 f4       	brne	.+4      	; 0x29a0 <__fp_round+0x18>
    299c:	60 ff       	sbrs	r22, 0
    299e:	04 c0       	rjmp	.+8      	; 0x29a8 <__fp_round+0x20>
    29a0:	6f 5f       	subi	r22, 0xFF	; 255
    29a2:	7f 4f       	sbci	r23, 0xFF	; 255
    29a4:	8f 4f       	sbci	r24, 0xFF	; 255
    29a6:	9f 4f       	sbci	r25, 0xFF	; 255
    29a8:	08 95       	ret

000029aa <_exit>:
    29aa:	f8 94       	cli

000029ac <__stop_program>:
    29ac:	ff cf       	rjmp	.-2      	; 0x29ac <__stop_program>
