
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001672  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  00001672  000016e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000023b8  00000000  00000000  00001718  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001246  00000000  00000000  00003ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00004d16  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00004d28  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000080  00000000  00000000  00004d68  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000057e  00000000  00000000  00004de8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004f3  00000000  00000000  00005366  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000002d3  00000000  00000000  00005859  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001f4  00000000  00000000  00005b2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e7       	ldi	r30, 0x72	; 114
      68:	f6 e1       	ldi	r31, 0x16	; 22
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 39       	cpi	r26, 0x92	; 146
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
      76:	0e 94 35 06 	call	0xc6a	; 0xc6a <main>
      7a:	0c 94 37 0b 	jmp	0x166e	; 0x166e <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <CLCD_voidSendCommand>:
#include"CLCD_interface.h"
#include"CLCD_private.h"


void CLCD_voidSendCommand(u8 Copy_u8Command)
{
      82:	cf 93       	push	r28
      84:	df 93       	push	r29
      86:	cd b7       	in	r28, 0x3d	; 61
      88:	de b7       	in	r29, 0x3e	; 62
      8a:	a3 97       	sbiw	r28, 0x23	; 35
      8c:	0f b6       	in	r0, 0x3f	; 63
      8e:	f8 94       	cli
      90:	de bf       	out	0x3e, r29	; 62
      92:	0f be       	out	0x3f, r0	; 63
      94:	cd bf       	out	0x3d, r28	; 61
      96:	8f 87       	std	Y+15, r24	; 0x0f

#if CLCD_Mode == Eight_Bit_Mode

		/*set RS pin to LOW for command*/
		DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
      98:	40 e0       	ldi	r20, 0x00	; 0
      9a:	60 e0       	ldi	r22, 0x00	; 0
      9c:	83 e0       	ldi	r24, 0x03	; 3
      9e:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_u8SetPinValue>

		/*set RW pin to Low for write*/
		DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	61 e0       	ldi	r22, 0x01	; 1
      a6:	83 e0       	ldi	r24, 0x03	; 3
      a8:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_u8SetPinValue>

		/*set command  to Data pins*/
		DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Command);
      ac:	6f 85       	ldd	r22, Y+15	; 0x0f
      ae:	80 e0       	ldi	r24, 0x00	; 0
      b0:	0e 94 cc 04 	call	0x998	; 0x998 <DIO_u8SetPortValue>

		/*set E pin to HIGH for Enable*/
		DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
      b4:	41 e0       	ldi	r20, 0x01	; 1
      b6:	62 e0       	ldi	r22, 0x02	; 2
      b8:	83 e0       	ldi	r24, 0x03	; 3
      ba:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_u8SetPinValue>
      be:	80 e0       	ldi	r24, 0x00	; 0
      c0:	90 e0       	ldi	r25, 0x00	; 0
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b0 e4       	ldi	r27, 0x40	; 64
      c6:	89 83       	std	Y+1, r24	; 0x01
      c8:	9a 83       	std	Y+2, r25	; 0x02
      ca:	ab 83       	std	Y+3, r26	; 0x03
      cc:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
      ce:	20 e0       	ldi	r18, 0x00	; 0
      d0:	30 e0       	ldi	r19, 0x00	; 0
      d2:	4a ef       	ldi	r20, 0xFA	; 250
      d4:	54 e4       	ldi	r21, 0x44	; 68
      d6:	69 81       	ldd	r22, Y+1	; 0x01
      d8:	7a 81       	ldd	r23, Y+2	; 0x02
      da:	8b 81       	ldd	r24, Y+3	; 0x03
      dc:	9c 81       	ldd	r25, Y+4	; 0x04
      de:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__mulsf3>
      e2:	6c 8b       	std	Y+20, r22	; 0x14
      e4:	7d 8b       	std	Y+21, r23	; 0x15
      e6:	8e 8b       	std	Y+22, r24	; 0x16
      e8:	9f 8b       	std	Y+23, r25	; 0x17
      ea:	8c 89       	ldd	r24, Y+20	; 0x14
      ec:	9d 89       	ldd	r25, Y+21	; 0x15
      ee:	ae 89       	ldd	r26, Y+22	; 0x16
      f0:	bf 89       	ldd	r27, Y+23	; 0x17
      f2:	8d 83       	std	Y+5, r24	; 0x05
      f4:	9e 83       	std	Y+6, r25	; 0x06
      f6:	af 83       	std	Y+7, r26	; 0x07
      f8:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
      fa:	20 e0       	ldi	r18, 0x00	; 0
      fc:	30 e0       	ldi	r19, 0x00	; 0
      fe:	40 e8       	ldi	r20, 0x80	; 128
     100:	5f e3       	ldi	r21, 0x3F	; 63
     102:	6d 81       	ldd	r22, Y+5	; 0x05
     104:	7e 81       	ldd	r23, Y+6	; 0x06
     106:	8f 81       	ldd	r24, Y+7	; 0x07
     108:	98 85       	ldd	r25, Y+8	; 0x08
     10a:	0e 94 1c 0a 	call	0x1438	; 0x1438 <__cmpsf2>
     10e:	88 23       	and	r24, r24
     110:	2c f4       	brge	.+10     	; 0x11c <CLCD_voidSendCommand+0x9a>
		__ticks = 1;
     112:	81 e0       	ldi	r24, 0x01	; 1
     114:	90 e0       	ldi	r25, 0x00	; 0
     116:	9a 87       	std	Y+10, r25	; 0x0a
     118:	89 87       	std	Y+9, r24	; 0x09
     11a:	54 c0       	rjmp	.+168    	; 0x1c4 <CLCD_voidSendCommand+0x142>
	else if (__tmp > 65535)
     11c:	20 e0       	ldi	r18, 0x00	; 0
     11e:	3f ef       	ldi	r19, 0xFF	; 255
     120:	4f e7       	ldi	r20, 0x7F	; 127
     122:	57 e4       	ldi	r21, 0x47	; 71
     124:	6d 81       	ldd	r22, Y+5	; 0x05
     126:	7e 81       	ldd	r23, Y+6	; 0x06
     128:	8f 81       	ldd	r24, Y+7	; 0x07
     12a:	98 85       	ldd	r25, Y+8	; 0x08
     12c:	0e 94 9d 0a 	call	0x153a	; 0x153a <__gesf2>
     130:	18 16       	cp	r1, r24
     132:	d4 f5       	brge	.+116    	; 0x1a8 <CLCD_voidSendCommand+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     134:	20 e0       	ldi	r18, 0x00	; 0
     136:	30 e0       	ldi	r19, 0x00	; 0
     138:	40 e2       	ldi	r20, 0x20	; 32
     13a:	51 e4       	ldi	r21, 0x41	; 65
     13c:	69 81       	ldd	r22, Y+1	; 0x01
     13e:	7a 81       	ldd	r23, Y+2	; 0x02
     140:	8b 81       	ldd	r24, Y+3	; 0x03
     142:	9c 81       	ldd	r25, Y+4	; 0x04
     144:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__mulsf3>
     148:	68 8f       	std	Y+24, r22	; 0x18
     14a:	79 8f       	std	Y+25, r23	; 0x19
     14c:	8a 8f       	std	Y+26, r24	; 0x1a
     14e:	9b 8f       	std	Y+27, r25	; 0x1b
     150:	88 8d       	ldd	r24, Y+24	; 0x18
     152:	99 8d       	ldd	r25, Y+25	; 0x19
     154:	aa 8d       	ldd	r26, Y+26	; 0x1a
     156:	bb 8d       	ldd	r27, Y+27	; 0x1b
     158:	88 8b       	std	Y+16, r24	; 0x10
     15a:	99 8b       	std	Y+17, r25	; 0x11
     15c:	aa 8b       	std	Y+18, r26	; 0x12
     15e:	bb 8b       	std	Y+19, r27	; 0x13
     160:	68 89       	ldd	r22, Y+16	; 0x10
     162:	79 89       	ldd	r23, Y+17	; 0x11
     164:	8a 89       	ldd	r24, Y+18	; 0x12
     166:	9b 89       	ldd	r25, Y+19	; 0x13
     168:	0e 94 21 0a 	call	0x1442	; 0x1442 <__fixunssfsi>
     16c:	6c 8f       	std	Y+28, r22	; 0x1c
     16e:	7d 8f       	std	Y+29, r23	; 0x1d
     170:	8e 8f       	std	Y+30, r24	; 0x1e
     172:	9f 8f       	std	Y+31, r25	; 0x1f
     174:	ac 8d       	ldd	r26, Y+28	; 0x1c
     176:	bd 8d       	ldd	r27, Y+29	; 0x1d
     178:	ba 87       	std	Y+10, r27	; 0x0a
     17a:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
     17c:	10 c0       	rjmp	.+32     	; 0x19e <CLCD_voidSendCommand+0x11c>
     17e:	88 ec       	ldi	r24, 0xC8	; 200
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	9c 87       	std	Y+12, r25	; 0x0c
     184:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     186:	8b 85       	ldd	r24, Y+11	; 0x0b
     188:	9c 85       	ldd	r25, Y+12	; 0x0c
     18a:	01 97       	sbiw	r24, 0x01	; 1
     18c:	f1 f7       	brne	.-4      	; 0x18a <CLCD_voidSendCommand+0x108>
     18e:	9c 87       	std	Y+12, r25	; 0x0c
     190:	8b 87       	std	Y+11, r24	; 0x0b
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
     192:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     194:	89 85       	ldd	r24, Y+9	; 0x09
     196:	9a 85       	ldd	r25, Y+10	; 0x0a
     198:	01 97       	sbiw	r24, 0x01	; 1
     19a:	9a 87       	std	Y+10, r25	; 0x0a
     19c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     19e:	89 85       	ldd	r24, Y+9	; 0x09
     1a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     1a2:	89 2b       	or	r24, r25
     1a4:	61 f7       	brne	.-40     	; 0x17e <CLCD_voidSendCommand+0xfc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
     1a6:	19 c0       	rjmp	.+50     	; 0x1da <CLCD_voidSendCommand+0x158>
	}
	else
		__ticks = (uint16_t)__tmp;
     1a8:	6d 81       	ldd	r22, Y+5	; 0x05
     1aa:	7e 81       	ldd	r23, Y+6	; 0x06
     1ac:	8f 81       	ldd	r24, Y+7	; 0x07
     1ae:	98 85       	ldd	r25, Y+8	; 0x08
     1b0:	0e 94 21 0a 	call	0x1442	; 0x1442 <__fixunssfsi>
     1b4:	68 a3       	std	Y+32, r22	; 0x20
     1b6:	79 a3       	std	Y+33, r23	; 0x21
     1b8:	8a a3       	std	Y+34, r24	; 0x22
     1ba:	9b a3       	std	Y+35, r25	; 0x23
     1bc:	88 a1       	ldd	r24, Y+32	; 0x20
     1be:	99 a1       	ldd	r25, Y+33	; 0x21
     1c0:	9a 87       	std	Y+10, r25	; 0x0a
     1c2:	89 87       	std	Y+9, r24	; 0x09
     1c4:	89 85       	ldd	r24, Y+9	; 0x09
     1c6:	9a 85       	ldd	r25, Y+10	; 0x0a
     1c8:	9e 87       	std	Y+14, r25	; 0x0e
     1ca:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1cc:	8d 85       	ldd	r24, Y+13	; 0x0d
     1ce:	9e 85       	ldd	r25, Y+14	; 0x0e
     1d0:	01 97       	sbiw	r24, 0x01	; 1
     1d2:	f1 f7       	brne	.-4      	; 0x1d0 <CLCD_voidSendCommand+0x14e>
     1d4:	9e 87       	std	Y+14, r25	; 0x0e
     1d6:	8d 87       	std	Y+13, r24	; 0x0d
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
     1d8:	00 00       	nop
		_delay_ms(2);
		DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     1da:	40 e0       	ldi	r20, 0x00	; 0
     1dc:	62 e0       	ldi	r22, 0x02	; 2
     1de:	83 e0       	ldi	r24, 0x03	; 3
     1e0:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_u8SetPinValue>
				DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);

#else
#error "Wrong CLCD Mode Configurations"
#endif
}
     1e4:	00 00       	nop
     1e6:	a3 96       	adiw	r28, 0x23	; 35
     1e8:	0f b6       	in	r0, 0x3f	; 63
     1ea:	f8 94       	cli
     1ec:	de bf       	out	0x3e, r29	; 62
     1ee:	0f be       	out	0x3f, r0	; 63
     1f0:	cd bf       	out	0x3d, r28	; 61
     1f2:	df 91       	pop	r29
     1f4:	cf 91       	pop	r28
     1f6:	08 95       	ret

000001f8 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
     1f8:	cf 93       	push	r28
     1fa:	df 93       	push	r29
     1fc:	cd b7       	in	r28, 0x3d	; 61
     1fe:	de b7       	in	r29, 0x3e	; 62
     200:	a3 97       	sbiw	r28, 0x23	; 35
     202:	0f b6       	in	r0, 0x3f	; 63
     204:	f8 94       	cli
     206:	de bf       	out	0x3e, r29	; 62
     208:	0f be       	out	0x3f, r0	; 63
     20a:	cd bf       	out	0x3d, r28	; 61
     20c:	8f 87       	std	Y+15, r24	; 0x0f

#if CLCD_Mode == Eight_Bit_Mode

	/*set RS pin to LOW for Data*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
     20e:	41 e0       	ldi	r20, 0x01	; 1
     210:	60 e0       	ldi	r22, 0x00	; 0
     212:	83 e0       	ldi	r24, 0x03	; 3
     214:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_u8SetPinValue>

	/*set RW pin to HIGH for write*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     218:	40 e0       	ldi	r20, 0x00	; 0
     21a:	61 e0       	ldi	r22, 0x01	; 1
     21c:	83 e0       	ldi	r24, 0x03	; 3
     21e:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_u8SetPinValue>

	/*set data  to Data pins*/
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Data);
     222:	6f 85       	ldd	r22, Y+15	; 0x0f
     224:	80 e0       	ldi	r24, 0x00	; 0
     226:	0e 94 cc 04 	call	0x998	; 0x998 <DIO_u8SetPortValue>

	/*Send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     22a:	41 e0       	ldi	r20, 0x01	; 1
     22c:	62 e0       	ldi	r22, 0x02	; 2
     22e:	83 e0       	ldi	r24, 0x03	; 3
     230:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_u8SetPinValue>
     234:	80 e0       	ldi	r24, 0x00	; 0
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	a0 e0       	ldi	r26, 0x00	; 0
     23a:	b0 e4       	ldi	r27, 0x40	; 64
     23c:	89 83       	std	Y+1, r24	; 0x01
     23e:	9a 83       	std	Y+2, r25	; 0x02
     240:	ab 83       	std	Y+3, r26	; 0x03
     242:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     244:	20 e0       	ldi	r18, 0x00	; 0
     246:	30 e0       	ldi	r19, 0x00	; 0
     248:	4a ef       	ldi	r20, 0xFA	; 250
     24a:	54 e4       	ldi	r21, 0x44	; 68
     24c:	69 81       	ldd	r22, Y+1	; 0x01
     24e:	7a 81       	ldd	r23, Y+2	; 0x02
     250:	8b 81       	ldd	r24, Y+3	; 0x03
     252:	9c 81       	ldd	r25, Y+4	; 0x04
     254:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__mulsf3>
     258:	6c 8b       	std	Y+20, r22	; 0x14
     25a:	7d 8b       	std	Y+21, r23	; 0x15
     25c:	8e 8b       	std	Y+22, r24	; 0x16
     25e:	9f 8b       	std	Y+23, r25	; 0x17
     260:	8c 89       	ldd	r24, Y+20	; 0x14
     262:	9d 89       	ldd	r25, Y+21	; 0x15
     264:	ae 89       	ldd	r26, Y+22	; 0x16
     266:	bf 89       	ldd	r27, Y+23	; 0x17
     268:	8d 83       	std	Y+5, r24	; 0x05
     26a:	9e 83       	std	Y+6, r25	; 0x06
     26c:	af 83       	std	Y+7, r26	; 0x07
     26e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     270:	20 e0       	ldi	r18, 0x00	; 0
     272:	30 e0       	ldi	r19, 0x00	; 0
     274:	40 e8       	ldi	r20, 0x80	; 128
     276:	5f e3       	ldi	r21, 0x3F	; 63
     278:	6d 81       	ldd	r22, Y+5	; 0x05
     27a:	7e 81       	ldd	r23, Y+6	; 0x06
     27c:	8f 81       	ldd	r24, Y+7	; 0x07
     27e:	98 85       	ldd	r25, Y+8	; 0x08
     280:	0e 94 1c 0a 	call	0x1438	; 0x1438 <__cmpsf2>
     284:	88 23       	and	r24, r24
     286:	2c f4       	brge	.+10     	; 0x292 <CLCD_voidSendData+0x9a>
		__ticks = 1;
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	9a 87       	std	Y+10, r25	; 0x0a
     28e:	89 87       	std	Y+9, r24	; 0x09
     290:	54 c0       	rjmp	.+168    	; 0x33a <CLCD_voidSendData+0x142>
	else if (__tmp > 65535)
     292:	20 e0       	ldi	r18, 0x00	; 0
     294:	3f ef       	ldi	r19, 0xFF	; 255
     296:	4f e7       	ldi	r20, 0x7F	; 127
     298:	57 e4       	ldi	r21, 0x47	; 71
     29a:	6d 81       	ldd	r22, Y+5	; 0x05
     29c:	7e 81       	ldd	r23, Y+6	; 0x06
     29e:	8f 81       	ldd	r24, Y+7	; 0x07
     2a0:	98 85       	ldd	r25, Y+8	; 0x08
     2a2:	0e 94 9d 0a 	call	0x153a	; 0x153a <__gesf2>
     2a6:	18 16       	cp	r1, r24
     2a8:	d4 f5       	brge	.+116    	; 0x31e <CLCD_voidSendData+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     2aa:	20 e0       	ldi	r18, 0x00	; 0
     2ac:	30 e0       	ldi	r19, 0x00	; 0
     2ae:	40 e2       	ldi	r20, 0x20	; 32
     2b0:	51 e4       	ldi	r21, 0x41	; 65
     2b2:	69 81       	ldd	r22, Y+1	; 0x01
     2b4:	7a 81       	ldd	r23, Y+2	; 0x02
     2b6:	8b 81       	ldd	r24, Y+3	; 0x03
     2b8:	9c 81       	ldd	r25, Y+4	; 0x04
     2ba:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__mulsf3>
     2be:	68 8f       	std	Y+24, r22	; 0x18
     2c0:	79 8f       	std	Y+25, r23	; 0x19
     2c2:	8a 8f       	std	Y+26, r24	; 0x1a
     2c4:	9b 8f       	std	Y+27, r25	; 0x1b
     2c6:	88 8d       	ldd	r24, Y+24	; 0x18
     2c8:	99 8d       	ldd	r25, Y+25	; 0x19
     2ca:	aa 8d       	ldd	r26, Y+26	; 0x1a
     2cc:	bb 8d       	ldd	r27, Y+27	; 0x1b
     2ce:	88 8b       	std	Y+16, r24	; 0x10
     2d0:	99 8b       	std	Y+17, r25	; 0x11
     2d2:	aa 8b       	std	Y+18, r26	; 0x12
     2d4:	bb 8b       	std	Y+19, r27	; 0x13
     2d6:	68 89       	ldd	r22, Y+16	; 0x10
     2d8:	79 89       	ldd	r23, Y+17	; 0x11
     2da:	8a 89       	ldd	r24, Y+18	; 0x12
     2dc:	9b 89       	ldd	r25, Y+19	; 0x13
     2de:	0e 94 21 0a 	call	0x1442	; 0x1442 <__fixunssfsi>
     2e2:	6c 8f       	std	Y+28, r22	; 0x1c
     2e4:	7d 8f       	std	Y+29, r23	; 0x1d
     2e6:	8e 8f       	std	Y+30, r24	; 0x1e
     2e8:	9f 8f       	std	Y+31, r25	; 0x1f
     2ea:	ac 8d       	ldd	r26, Y+28	; 0x1c
     2ec:	bd 8d       	ldd	r27, Y+29	; 0x1d
     2ee:	ba 87       	std	Y+10, r27	; 0x0a
     2f0:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
     2f2:	10 c0       	rjmp	.+32     	; 0x314 <CLCD_voidSendData+0x11c>
     2f4:	88 ec       	ldi	r24, 0xC8	; 200
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	9c 87       	std	Y+12, r25	; 0x0c
     2fa:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2fc:	8b 85       	ldd	r24, Y+11	; 0x0b
     2fe:	9c 85       	ldd	r25, Y+12	; 0x0c
     300:	01 97       	sbiw	r24, 0x01	; 1
     302:	f1 f7       	brne	.-4      	; 0x300 <CLCD_voidSendData+0x108>
     304:	9c 87       	std	Y+12, r25	; 0x0c
     306:	8b 87       	std	Y+11, r24	; 0x0b
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
     308:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     30a:	89 85       	ldd	r24, Y+9	; 0x09
     30c:	9a 85       	ldd	r25, Y+10	; 0x0a
     30e:	01 97       	sbiw	r24, 0x01	; 1
     310:	9a 87       	std	Y+10, r25	; 0x0a
     312:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     314:	89 85       	ldd	r24, Y+9	; 0x09
     316:	9a 85       	ldd	r25, Y+10	; 0x0a
     318:	89 2b       	or	r24, r25
     31a:	61 f7       	brne	.-40     	; 0x2f4 <CLCD_voidSendData+0xfc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
     31c:	19 c0       	rjmp	.+50     	; 0x350 <CLCD_voidSendData+0x158>
	}
	else
		__ticks = (uint16_t)__tmp;
     31e:	6d 81       	ldd	r22, Y+5	; 0x05
     320:	7e 81       	ldd	r23, Y+6	; 0x06
     322:	8f 81       	ldd	r24, Y+7	; 0x07
     324:	98 85       	ldd	r25, Y+8	; 0x08
     326:	0e 94 21 0a 	call	0x1442	; 0x1442 <__fixunssfsi>
     32a:	68 a3       	std	Y+32, r22	; 0x20
     32c:	79 a3       	std	Y+33, r23	; 0x21
     32e:	8a a3       	std	Y+34, r24	; 0x22
     330:	9b a3       	std	Y+35, r25	; 0x23
     332:	88 a1       	ldd	r24, Y+32	; 0x20
     334:	99 a1       	ldd	r25, Y+33	; 0x21
     336:	9a 87       	std	Y+10, r25	; 0x0a
     338:	89 87       	std	Y+9, r24	; 0x09
     33a:	89 85       	ldd	r24, Y+9	; 0x09
     33c:	9a 85       	ldd	r25, Y+10	; 0x0a
     33e:	9e 87       	std	Y+14, r25	; 0x0e
     340:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     342:	8d 85       	ldd	r24, Y+13	; 0x0d
     344:	9e 85       	ldd	r25, Y+14	; 0x0e
     346:	01 97       	sbiw	r24, 0x01	; 1
     348:	f1 f7       	brne	.-4      	; 0x346 <CLCD_voidSendData+0x14e>
     34a:	9e 87       	std	Y+14, r25	; 0x0e
     34c:	8d 87       	std	Y+13, r24	; 0x0d
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
     34e:	00 00       	nop
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     350:	40 e0       	ldi	r20, 0x00	; 0
     352:	62 e0       	ldi	r22, 0x02	; 2
     354:	83 e0       	ldi	r24, 0x03	; 3
     356:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_u8SetPinValue>
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);

#endif

}
     35a:	00 00       	nop
     35c:	a3 96       	adiw	r28, 0x23	; 35
     35e:	0f b6       	in	r0, 0x3f	; 63
     360:	f8 94       	cli
     362:	de bf       	out	0x3e, r29	; 62
     364:	0f be       	out	0x3f, r0	; 63
     366:	cd bf       	out	0x3d, r28	; 61
     368:	df 91       	pop	r29
     36a:	cf 91       	pop	r28
     36c:	08 95       	ret

0000036e <CLCD_voidInit>:

void CLCD_voidInit(void)
{
     36e:	cf 93       	push	r28
     370:	df 93       	push	r29
     372:	cd b7       	in	r28, 0x3d	; 61
     374:	de b7       	in	r29, 0x3e	; 62
     376:	a2 97       	sbiw	r28, 0x22	; 34
     378:	0f b6       	in	r0, 0x3f	; 63
     37a:	f8 94       	cli
     37c:	de bf       	out	0x3e, r29	; 62
     37e:	0f be       	out	0x3f, r0	; 63
     380:	cd bf       	out	0x3d, r28	; 61
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	a0 e2       	ldi	r26, 0x20	; 32
     388:	b2 e4       	ldi	r27, 0x42	; 66
     38a:	89 83       	std	Y+1, r24	; 0x01
     38c:	9a 83       	std	Y+2, r25	; 0x02
     38e:	ab 83       	std	Y+3, r26	; 0x03
     390:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     392:	20 e0       	ldi	r18, 0x00	; 0
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	4a ef       	ldi	r20, 0xFA	; 250
     398:	54 e4       	ldi	r21, 0x44	; 68
     39a:	69 81       	ldd	r22, Y+1	; 0x01
     39c:	7a 81       	ldd	r23, Y+2	; 0x02
     39e:	8b 81       	ldd	r24, Y+3	; 0x03
     3a0:	9c 81       	ldd	r25, Y+4	; 0x04
     3a2:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__mulsf3>
     3a6:	6b 8b       	std	Y+19, r22	; 0x13
     3a8:	7c 8b       	std	Y+20, r23	; 0x14
     3aa:	8d 8b       	std	Y+21, r24	; 0x15
     3ac:	9e 8b       	std	Y+22, r25	; 0x16
     3ae:	8b 89       	ldd	r24, Y+19	; 0x13
     3b0:	9c 89       	ldd	r25, Y+20	; 0x14
     3b2:	ad 89       	ldd	r26, Y+21	; 0x15
     3b4:	be 89       	ldd	r27, Y+22	; 0x16
     3b6:	8d 83       	std	Y+5, r24	; 0x05
     3b8:	9e 83       	std	Y+6, r25	; 0x06
     3ba:	af 83       	std	Y+7, r26	; 0x07
     3bc:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     3be:	20 e0       	ldi	r18, 0x00	; 0
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	40 e8       	ldi	r20, 0x80	; 128
     3c4:	5f e3       	ldi	r21, 0x3F	; 63
     3c6:	6d 81       	ldd	r22, Y+5	; 0x05
     3c8:	7e 81       	ldd	r23, Y+6	; 0x06
     3ca:	8f 81       	ldd	r24, Y+7	; 0x07
     3cc:	98 85       	ldd	r25, Y+8	; 0x08
     3ce:	0e 94 1c 0a 	call	0x1438	; 0x1438 <__cmpsf2>
     3d2:	88 23       	and	r24, r24
     3d4:	2c f4       	brge	.+10     	; 0x3e0 <CLCD_voidInit+0x72>
		__ticks = 1;
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	9a 87       	std	Y+10, r25	; 0x0a
     3dc:	89 87       	std	Y+9, r24	; 0x09
     3de:	54 c0       	rjmp	.+168    	; 0x488 <__FUSE_REGION_LENGTH__+0x88>
	else if (__tmp > 65535)
     3e0:	20 e0       	ldi	r18, 0x00	; 0
     3e2:	3f ef       	ldi	r19, 0xFF	; 255
     3e4:	4f e7       	ldi	r20, 0x7F	; 127
     3e6:	57 e4       	ldi	r21, 0x47	; 71
     3e8:	6d 81       	ldd	r22, Y+5	; 0x05
     3ea:	7e 81       	ldd	r23, Y+6	; 0x06
     3ec:	8f 81       	ldd	r24, Y+7	; 0x07
     3ee:	98 85       	ldd	r25, Y+8	; 0x08
     3f0:	0e 94 9d 0a 	call	0x153a	; 0x153a <__gesf2>
     3f4:	18 16       	cp	r1, r24
     3f6:	d4 f5       	brge	.+116    	; 0x46c <__FUSE_REGION_LENGTH__+0x6c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3f8:	20 e0       	ldi	r18, 0x00	; 0
     3fa:	30 e0       	ldi	r19, 0x00	; 0
     3fc:	40 e2       	ldi	r20, 0x20	; 32
     3fe:	51 e4       	ldi	r21, 0x41	; 65
     400:	69 81       	ldd	r22, Y+1	; 0x01
     402:	7a 81       	ldd	r23, Y+2	; 0x02
     404:	8b 81       	ldd	r24, Y+3	; 0x03
     406:	9c 81       	ldd	r25, Y+4	; 0x04
     408:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__mulsf3>
     40c:	6f 8b       	std	Y+23, r22	; 0x17
     40e:	78 8f       	std	Y+24, r23	; 0x18
     410:	89 8f       	std	Y+25, r24	; 0x19
     412:	9a 8f       	std	Y+26, r25	; 0x1a
     414:	8f 89       	ldd	r24, Y+23	; 0x17
     416:	98 8d       	ldd	r25, Y+24	; 0x18
     418:	a9 8d       	ldd	r26, Y+25	; 0x19
     41a:	ba 8d       	ldd	r27, Y+26	; 0x1a
     41c:	8f 87       	std	Y+15, r24	; 0x0f
     41e:	98 8b       	std	Y+16, r25	; 0x10
     420:	a9 8b       	std	Y+17, r26	; 0x11
     422:	ba 8b       	std	Y+18, r27	; 0x12
     424:	6f 85       	ldd	r22, Y+15	; 0x0f
     426:	78 89       	ldd	r23, Y+16	; 0x10
     428:	89 89       	ldd	r24, Y+17	; 0x11
     42a:	9a 89       	ldd	r25, Y+18	; 0x12
     42c:	0e 94 21 0a 	call	0x1442	; 0x1442 <__fixunssfsi>
     430:	6b 8f       	std	Y+27, r22	; 0x1b
     432:	7c 8f       	std	Y+28, r23	; 0x1c
     434:	8d 8f       	std	Y+29, r24	; 0x1d
     436:	9e 8f       	std	Y+30, r25	; 0x1e
     438:	ab 8d       	ldd	r26, Y+27	; 0x1b
     43a:	bc 8d       	ldd	r27, Y+28	; 0x1c
     43c:	ba 87       	std	Y+10, r27	; 0x0a
     43e:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
     440:	10 c0       	rjmp	.+32     	; 0x462 <__FUSE_REGION_LENGTH__+0x62>
     442:	88 ec       	ldi	r24, 0xC8	; 200
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	9c 87       	std	Y+12, r25	; 0x0c
     448:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     44a:	8b 85       	ldd	r24, Y+11	; 0x0b
     44c:	9c 85       	ldd	r25, Y+12	; 0x0c
     44e:	01 97       	sbiw	r24, 0x01	; 1
     450:	f1 f7       	brne	.-4      	; 0x44e <__FUSE_REGION_LENGTH__+0x4e>
     452:	9c 87       	std	Y+12, r25	; 0x0c
     454:	8b 87       	std	Y+11, r24	; 0x0b
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
     456:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     458:	89 85       	ldd	r24, Y+9	; 0x09
     45a:	9a 85       	ldd	r25, Y+10	; 0x0a
     45c:	01 97       	sbiw	r24, 0x01	; 1
     45e:	9a 87       	std	Y+10, r25	; 0x0a
     460:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     462:	89 85       	ldd	r24, Y+9	; 0x09
     464:	9a 85       	ldd	r25, Y+10	; 0x0a
     466:	89 2b       	or	r24, r25
     468:	61 f7       	brne	.-40     	; 0x442 <__FUSE_REGION_LENGTH__+0x42>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
     46a:	19 c0       	rjmp	.+50     	; 0x49e <__FUSE_REGION_LENGTH__+0x9e>
	}
	else
		__ticks = (uint16_t)__tmp;
     46c:	6d 81       	ldd	r22, Y+5	; 0x05
     46e:	7e 81       	ldd	r23, Y+6	; 0x06
     470:	8f 81       	ldd	r24, Y+7	; 0x07
     472:	98 85       	ldd	r25, Y+8	; 0x08
     474:	0e 94 21 0a 	call	0x1442	; 0x1442 <__fixunssfsi>
     478:	6f 8f       	std	Y+31, r22	; 0x1f
     47a:	78 a3       	std	Y+32, r23	; 0x20
     47c:	89 a3       	std	Y+33, r24	; 0x21
     47e:	9a a3       	std	Y+34, r25	; 0x22
     480:	8f 8d       	ldd	r24, Y+31	; 0x1f
     482:	98 a1       	ldd	r25, Y+32	; 0x20
     484:	9a 87       	std	Y+10, r25	; 0x0a
     486:	89 87       	std	Y+9, r24	; 0x09
     488:	89 85       	ldd	r24, Y+9	; 0x09
     48a:	9a 85       	ldd	r25, Y+10	; 0x0a
     48c:	9e 87       	std	Y+14, r25	; 0x0e
     48e:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     490:	8d 85       	ldd	r24, Y+13	; 0x0d
     492:	9e 85       	ldd	r25, Y+14	; 0x0e
     494:	01 97       	sbiw	r24, 0x01	; 1
     496:	f1 f7       	brne	.-4      	; 0x494 <__FUSE_REGION_LENGTH__+0x94>
     498:	9e 87       	std	Y+14, r25	; 0x0e
     49a:	8d 87       	std	Y+13, r24	; 0x0d
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
     49c:	00 00       	nop

	/*wait for more than 30ms*/
	_delay_ms(40);

	/*function set command: 2 lines"1", 5*8 Font Size"0"*/
	CLCD_voidSendCommand(0b00111000);
     49e:	88 e3       	ldi	r24, 0x38	; 56
     4a0:	0e 94 41 00 	call	0x82	; 0x82 <CLCD_voidSendCommand>

	/*Display ON/OFF control: display enable, disable cursor, no blink cursor*/
	CLCD_voidSendCommand(0b00001100);
     4a4:	8c e0       	ldi	r24, 0x0C	; 12
     4a6:	0e 94 41 00 	call	0x82	; 0x82 <CLCD_voidSendCommand>

 	/*Display clear*/
	CLCD_voidSendCommand(1);
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	0e 94 41 00 	call	0x82	; 0x82 <CLCD_voidSendCommand>

		/*Display Clear*/
		CLCD_voidSendCommand(0b00000001);

#endif
}
     4b0:	00 00       	nop
     4b2:	a2 96       	adiw	r28, 0x22	; 34
     4b4:	0f b6       	in	r0, 0x3f	; 63
     4b6:	f8 94       	cli
     4b8:	de bf       	out	0x3e, r29	; 62
     4ba:	0f be       	out	0x3f, r0	; 63
     4bc:	cd bf       	out	0x3d, r28	; 61
     4be:	df 91       	pop	r29
     4c0:	cf 91       	pop	r28
     4c2:	08 95       	ret

000004c4 <CLCD_voidSendString>:

void CLCD_voidSendString(const char*Copy_pcString )
{
     4c4:	cf 93       	push	r28
     4c6:	df 93       	push	r29
     4c8:	00 d0       	rcall	.+0      	; 0x4ca <CLCD_voidSendString+0x6>
     4ca:	0f 92       	push	r0
     4cc:	cd b7       	in	r28, 0x3d	; 61
     4ce:	de b7       	in	r29, 0x3e	; 62
     4d0:	9b 83       	std	Y+3, r25	; 0x03
     4d2:	8a 83       	std	Y+2, r24	; 0x02
	//any variable carry ASCII value should be char not unsigned or signed
	u8 Local_u8Counter=0;
     4d4:	19 82       	std	Y+1, r1	; 0x01
	while(Copy_pcString[Local_u8Counter]!='\0')
     4d6:	0e c0       	rjmp	.+28     	; 0x4f4 <CLCD_voidSendString+0x30>
	{
	CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
     4d8:	89 81       	ldd	r24, Y+1	; 0x01
     4da:	88 2f       	mov	r24, r24
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	2a 81       	ldd	r18, Y+2	; 0x02
     4e0:	3b 81       	ldd	r19, Y+3	; 0x03
     4e2:	82 0f       	add	r24, r18
     4e4:	93 1f       	adc	r25, r19
     4e6:	fc 01       	movw	r30, r24
     4e8:	80 81       	ld	r24, Z
     4ea:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <CLCD_voidSendData>
	Local_u8Counter++;
     4ee:	89 81       	ldd	r24, Y+1	; 0x01
     4f0:	8f 5f       	subi	r24, 0xFF	; 255
     4f2:	89 83       	std	Y+1, r24	; 0x01

void CLCD_voidSendString(const char*Copy_pcString )
{
	//any variable carry ASCII value should be char not unsigned or signed
	u8 Local_u8Counter=0;
	while(Copy_pcString[Local_u8Counter]!='\0')
     4f4:	89 81       	ldd	r24, Y+1	; 0x01
     4f6:	88 2f       	mov	r24, r24
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	2a 81       	ldd	r18, Y+2	; 0x02
     4fc:	3b 81       	ldd	r19, Y+3	; 0x03
     4fe:	82 0f       	add	r24, r18
     500:	93 1f       	adc	r25, r19
     502:	fc 01       	movw	r30, r24
     504:	80 81       	ld	r24, Z
     506:	88 23       	and	r24, r24
     508:	39 f7       	brne	.-50     	; 0x4d8 <CLCD_voidSendString+0x14>
	{
	CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
	Local_u8Counter++;
	}

}
     50a:	00 00       	nop
     50c:	00 00       	nop
     50e:	0f 90       	pop	r0
     510:	0f 90       	pop	r0
     512:	0f 90       	pop	r0
     514:	df 91       	pop	r29
     516:	cf 91       	pop	r28
     518:	08 95       	ret

0000051a <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos)
{
     51a:	cf 93       	push	r28
     51c:	df 93       	push	r29
     51e:	00 d0       	rcall	.+0      	; 0x520 <CLCD_voidGoToXY+0x6>
     520:	0f 92       	push	r0
     522:	cd b7       	in	r28, 0x3d	; 61
     524:	de b7       	in	r29, 0x3e	; 62
     526:	8a 83       	std	Y+2, r24	; 0x02
     528:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if(Copy_u8XPos==0)
     52a:	8a 81       	ldd	r24, Y+2	; 0x02
     52c:	88 23       	and	r24, r24
     52e:	19 f4       	brne	.+6      	; 0x536 <CLCD_voidGoToXY+0x1c>
	{
		/*Location is at first line in CLCD 16*2*/
		Local_u8Address=Copy_u8YPos;
     530:	8b 81       	ldd	r24, Y+3	; 0x03
     532:	89 83       	std	Y+1, r24	; 0x01
     534:	06 c0       	rjmp	.+12     	; 0x542 <CLCD_voidGoToXY+0x28>
	}
	else if(Copy_u8XPos==1)
     536:	8a 81       	ldd	r24, Y+2	; 0x02
     538:	81 30       	cpi	r24, 0x01	; 1
     53a:	19 f4       	brne	.+6      	; 0x542 <CLCD_voidGoToXY+0x28>
	{
		/*Location is at Second line in CLCD 16*2*/
		Local_u8Address=Copy_u8YPos+0x40;
     53c:	8b 81       	ldd	r24, Y+3	; 0x03
     53e:	80 5c       	subi	r24, 0xC0	; 192
     540:	89 83       	std	Y+1, r24	; 0x01
	}
	/*set bit number 7 for set DDRAM Address command then send the command*/
	CLCD_voidSendCommand(Local_u8Address+128);
     542:	89 81       	ldd	r24, Y+1	; 0x01
     544:	80 58       	subi	r24, 0x80	; 128
     546:	0e 94 41 00 	call	0x82	; 0x82 <CLCD_voidSendCommand>
}
     54a:	00 00       	nop
     54c:	0f 90       	pop	r0
     54e:	0f 90       	pop	r0
     550:	0f 90       	pop	r0
     552:	df 91       	pop	r29
     554:	cf 91       	pop	r28
     556:	08 95       	ret

00000558 <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8*Copy_pu8Pattern,u8 Copy_u8PatternNumber,u8 Copy_u8XPos,u8 Copy_u8YPos)
{
     558:	cf 93       	push	r28
     55a:	df 93       	push	r29
     55c:	00 d0       	rcall	.+0      	; 0x55e <CLCD_voidWriteSpecialCharacter+0x6>
     55e:	00 d0       	rcall	.+0      	; 0x560 <CLCD_voidWriteSpecialCharacter+0x8>
     560:	00 d0       	rcall	.+0      	; 0x562 <CLCD_voidWriteSpecialCharacter+0xa>
     562:	0f 92       	push	r0
     564:	cd b7       	in	r28, 0x3d	; 61
     566:	de b7       	in	r29, 0x3e	; 62
     568:	9c 83       	std	Y+4, r25	; 0x04
     56a:	8b 83       	std	Y+3, r24	; 0x03
     56c:	6d 83       	std	Y+5, r22	; 0x05
     56e:	4e 83       	std	Y+6, r20	; 0x06
     570:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress=0,Local_u8Iterator;
     572:	1a 82       	std	Y+2, r1	; 0x02

	/*calculate the CGRAM Address whose each block is 8 bytes */
	Local_u8CGRAMAddress=Copy_u8PatternNumber*8;
     574:	8d 81       	ldd	r24, Y+5	; 0x05
     576:	88 0f       	add	r24, r24
     578:	88 0f       	add	r24, r24
     57a:	88 0f       	add	r24, r24
     57c:	8a 83       	std	Y+2, r24	; 0x02

	/*send CGRAM Address command to LCD, with setting bit 6,clearing bit 7*/
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);
     57e:	8a 81       	ldd	r24, Y+2	; 0x02
     580:	80 5c       	subi	r24, 0xC0	; 192
     582:	0e 94 41 00 	call	0x82	; 0x82 <CLCD_voidSendCommand>

	/*write pattern into CGRAM*/
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
     586:	19 82       	std	Y+1, r1	; 0x01
     588:	0e c0       	rjmp	.+28     	; 0x5a6 <CLCD_voidWriteSpecialCharacter+0x4e>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
     58a:	89 81       	ldd	r24, Y+1	; 0x01
     58c:	88 2f       	mov	r24, r24
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	2b 81       	ldd	r18, Y+3	; 0x03
     592:	3c 81       	ldd	r19, Y+4	; 0x04
     594:	82 0f       	add	r24, r18
     596:	93 1f       	adc	r25, r19
     598:	fc 01       	movw	r30, r24
     59a:	80 81       	ld	r24, Z
     59c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <CLCD_voidSendData>

	/*send CGRAM Address command to LCD, with setting bit 6,clearing bit 7*/
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);

	/*write pattern into CGRAM*/
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
     5a0:	89 81       	ldd	r24, Y+1	; 0x01
     5a2:	8f 5f       	subi	r24, 0xFF	; 255
     5a4:	89 83       	std	Y+1, r24	; 0x01
     5a6:	89 81       	ldd	r24, Y+1	; 0x01
     5a8:	88 30       	cpi	r24, 0x08	; 8
     5aa:	78 f3       	brcs	.-34     	; 0x58a <CLCD_voidWriteSpecialCharacter+0x32>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
	}

	/*Go back to the DDRAM to display the pattern*/
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
     5ac:	6f 81       	ldd	r22, Y+7	; 0x07
     5ae:	8e 81       	ldd	r24, Y+6	; 0x06
     5b0:	0e 94 8d 02 	call	0x51a	; 0x51a <CLCD_voidGoToXY>

	/*Display the pattern written in the CG RAM
	 * DDRAM treat with the CGRAM with location(block) number from 0 to 7*/
	CLCD_voidSendData(Copy_u8PatternNumber);
     5b4:	8d 81       	ldd	r24, Y+5	; 0x05
     5b6:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <CLCD_voidSendData>

}
     5ba:	00 00       	nop
     5bc:	27 96       	adiw	r28, 0x07	; 7
     5be:	0f b6       	in	r0, 0x3f	; 63
     5c0:	f8 94       	cli
     5c2:	de bf       	out	0x3e, r29	; 62
     5c4:	0f be       	out	0x3f, r0	; 63
     5c6:	cd bf       	out	0x3d, r28	; 61
     5c8:	df 91       	pop	r29
     5ca:	cf 91       	pop	r28
     5cc:	08 95       	ret

000005ce <CLCD_voidWriteNumber>:


void CLCD_voidWriteNumber(u32 Copy_u32Number)
{
     5ce:	cf 92       	push	r12
     5d0:	df 92       	push	r13
     5d2:	ef 92       	push	r14
     5d4:	ff 92       	push	r15
     5d6:	0f 93       	push	r16
     5d8:	1f 93       	push	r17
     5da:	cf 93       	push	r28
     5dc:	df 93       	push	r29
     5de:	cd b7       	in	r28, 0x3d	; 61
     5e0:	de b7       	in	r29, 0x3e	; 62
     5e2:	a0 97       	sbiw	r28, 0x20	; 32
     5e4:	0f b6       	in	r0, 0x3f	; 63
     5e6:	f8 94       	cli
     5e8:	de bf       	out	0x3e, r29	; 62
     5ea:	0f be       	out	0x3f, r0	; 63
     5ec:	cd bf       	out	0x3d, r28	; 61
     5ee:	6d 83       	std	Y+5, r22	; 0x05
     5f0:	7e 83       	std	Y+6, r23	; 0x06
     5f2:	8f 83       	std	Y+7, r24	; 0x07
     5f4:	98 87       	std	Y+8, r25	; 0x08
	u32 Local_u32Reserverd = 1;
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	a0 e0       	ldi	r26, 0x00	; 0
     5fc:	b0 e0       	ldi	r27, 0x00	; 0
     5fe:	89 83       	std	Y+1, r24	; 0x01
     600:	9a 83       	std	Y+2, r25	; 0x02
     602:	ab 83       	std	Y+3, r26	; 0x03
     604:	bc 83       	std	Y+4, r27	; 0x04

	while(Copy_u32Number !=0)
     606:	56 c0       	rjmp	.+172    	; 0x6b4 <CLCD_voidWriteNumber+0xe6>
	{
		Local_u32Reserverd = Local_u32Reserverd*10 + Copy_u32Number%10;
     608:	49 81       	ldd	r20, Y+1	; 0x01
     60a:	5a 81       	ldd	r21, Y+2	; 0x02
     60c:	6b 81       	ldd	r22, Y+3	; 0x03
     60e:	7c 81       	ldd	r23, Y+4	; 0x04
     610:	db 01       	movw	r26, r22
     612:	ca 01       	movw	r24, r20
     614:	88 0f       	add	r24, r24
     616:	99 1f       	adc	r25, r25
     618:	aa 1f       	adc	r26, r26
     61a:	bb 1f       	adc	r27, r27
     61c:	88 0f       	add	r24, r24
     61e:	99 1f       	adc	r25, r25
     620:	aa 1f       	adc	r26, r26
     622:	bb 1f       	adc	r27, r27
     624:	84 0f       	add	r24, r20
     626:	95 1f       	adc	r25, r21
     628:	a6 1f       	adc	r26, r22
     62a:	b7 1f       	adc	r27, r23
     62c:	88 0f       	add	r24, r24
     62e:	99 1f       	adc	r25, r25
     630:	aa 1f       	adc	r26, r26
     632:	bb 1f       	adc	r27, r27
     634:	6c 01       	movw	r12, r24
     636:	7d 01       	movw	r14, r26
     638:	8d 81       	ldd	r24, Y+5	; 0x05
     63a:	9e 81       	ldd	r25, Y+6	; 0x06
     63c:	af 81       	ldd	r26, Y+7	; 0x07
     63e:	b8 85       	ldd	r27, Y+8	; 0x08
     640:	89 87       	std	Y+9, r24	; 0x09
     642:	9a 87       	std	Y+10, r25	; 0x0a
     644:	ab 87       	std	Y+11, r26	; 0x0b
     646:	bc 87       	std	Y+12, r27	; 0x0c
     648:	0a e0       	ldi	r16, 0x0A	; 10
     64a:	10 e0       	ldi	r17, 0x00	; 0
     64c:	20 e0       	ldi	r18, 0x00	; 0
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	69 85       	ldd	r22, Y+9	; 0x09
     652:	7a 85       	ldd	r23, Y+10	; 0x0a
     654:	8b 85       	ldd	r24, Y+11	; 0x0b
     656:	9c 85       	ldd	r25, Y+12	; 0x0c
     658:	a9 01       	movw	r20, r18
     65a:	98 01       	movw	r18, r16
     65c:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <__udivmodsi4>
     660:	6d 87       	std	Y+13, r22	; 0x0d
     662:	7e 87       	std	Y+14, r23	; 0x0e
     664:	8f 87       	std	Y+15, r24	; 0x0f
     666:	98 8b       	std	Y+16, r25	; 0x10
     668:	8d 85       	ldd	r24, Y+13	; 0x0d
     66a:	9e 85       	ldd	r25, Y+14	; 0x0e
     66c:	af 85       	ldd	r26, Y+15	; 0x0f
     66e:	b8 89       	ldd	r27, Y+16	; 0x10
     670:	8c 0d       	add	r24, r12
     672:	9d 1d       	adc	r25, r13
     674:	ae 1d       	adc	r26, r14
     676:	bf 1d       	adc	r27, r15
     678:	89 83       	std	Y+1, r24	; 0x01
     67a:	9a 83       	std	Y+2, r25	; 0x02
     67c:	ab 83       	std	Y+3, r26	; 0x03
     67e:	bc 83       	std	Y+4, r27	; 0x04
		Copy_u32Number/=10;
     680:	8d 81       	ldd	r24, Y+5	; 0x05
     682:	9e 81       	ldd	r25, Y+6	; 0x06
     684:	af 81       	ldd	r26, Y+7	; 0x07
     686:	b8 85       	ldd	r27, Y+8	; 0x08
     688:	89 8b       	std	Y+17, r24	; 0x11
     68a:	9a 8b       	std	Y+18, r25	; 0x12
     68c:	ab 8b       	std	Y+19, r26	; 0x13
     68e:	bc 8b       	std	Y+20, r27	; 0x14
     690:	0a e0       	ldi	r16, 0x0A	; 10
     692:	10 e0       	ldi	r17, 0x00	; 0
     694:	20 e0       	ldi	r18, 0x00	; 0
     696:	30 e0       	ldi	r19, 0x00	; 0
     698:	69 89       	ldd	r22, Y+17	; 0x11
     69a:	7a 89       	ldd	r23, Y+18	; 0x12
     69c:	8b 89       	ldd	r24, Y+19	; 0x13
     69e:	9c 89       	ldd	r25, Y+20	; 0x14
     6a0:	a9 01       	movw	r20, r18
     6a2:	98 01       	movw	r18, r16
     6a4:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <__udivmodsi4>
     6a8:	da 01       	movw	r26, r20
     6aa:	c9 01       	movw	r24, r18
     6ac:	8d 83       	std	Y+5, r24	; 0x05
     6ae:	9e 83       	std	Y+6, r25	; 0x06
     6b0:	af 83       	std	Y+7, r26	; 0x07
     6b2:	b8 87       	std	Y+8, r27	; 0x08

void CLCD_voidWriteNumber(u32 Copy_u32Number)
{
	u32 Local_u32Reserverd = 1;

	while(Copy_u32Number !=0)
     6b4:	8d 81       	ldd	r24, Y+5	; 0x05
     6b6:	9e 81       	ldd	r25, Y+6	; 0x06
     6b8:	af 81       	ldd	r26, Y+7	; 0x07
     6ba:	b8 85       	ldd	r27, Y+8	; 0x08
     6bc:	89 2b       	or	r24, r25
     6be:	8a 2b       	or	r24, r26
     6c0:	8b 2b       	or	r24, r27
     6c2:	09 f0       	breq	.+2      	; 0x6c6 <CLCD_voidWriteNumber+0xf8>
     6c4:	a1 cf       	rjmp	.-190    	; 0x608 <CLCD_voidWriteNumber+0x3a>
		Copy_u32Number/=10;
	}

	do
	{
		CLCD_voidSendData((Local_u32Reserverd%10)+'0');
     6c6:	89 81       	ldd	r24, Y+1	; 0x01
     6c8:	9a 81       	ldd	r25, Y+2	; 0x02
     6ca:	ab 81       	ldd	r26, Y+3	; 0x03
     6cc:	bc 81       	ldd	r27, Y+4	; 0x04
     6ce:	8d 8b       	std	Y+21, r24	; 0x15
     6d0:	9e 8b       	std	Y+22, r25	; 0x16
     6d2:	af 8b       	std	Y+23, r26	; 0x17
     6d4:	b8 8f       	std	Y+24, r27	; 0x18
     6d6:	0a e0       	ldi	r16, 0x0A	; 10
     6d8:	10 e0       	ldi	r17, 0x00	; 0
     6da:	20 e0       	ldi	r18, 0x00	; 0
     6dc:	30 e0       	ldi	r19, 0x00	; 0
     6de:	6d 89       	ldd	r22, Y+21	; 0x15
     6e0:	7e 89       	ldd	r23, Y+22	; 0x16
     6e2:	8f 89       	ldd	r24, Y+23	; 0x17
     6e4:	98 8d       	ldd	r25, Y+24	; 0x18
     6e6:	a9 01       	movw	r20, r18
     6e8:	98 01       	movw	r18, r16
     6ea:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <__udivmodsi4>
     6ee:	69 8f       	std	Y+25, r22	; 0x19
     6f0:	7a 8f       	std	Y+26, r23	; 0x1a
     6f2:	8b 8f       	std	Y+27, r24	; 0x1b
     6f4:	9c 8f       	std	Y+28, r25	; 0x1c
     6f6:	89 8d       	ldd	r24, Y+25	; 0x19
     6f8:	9a 8d       	ldd	r25, Y+26	; 0x1a
     6fa:	ab 8d       	ldd	r26, Y+27	; 0x1b
     6fc:	bc 8d       	ldd	r27, Y+28	; 0x1c
     6fe:	80 5d       	subi	r24, 0xD0	; 208
     700:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <CLCD_voidSendData>
		Local_u32Reserverd/=10;
     704:	89 81       	ldd	r24, Y+1	; 0x01
     706:	9a 81       	ldd	r25, Y+2	; 0x02
     708:	ab 81       	ldd	r26, Y+3	; 0x03
     70a:	bc 81       	ldd	r27, Y+4	; 0x04
     70c:	8d 8f       	std	Y+29, r24	; 0x1d
     70e:	9e 8f       	std	Y+30, r25	; 0x1e
     710:	af 8f       	std	Y+31, r26	; 0x1f
     712:	b8 a3       	std	Y+32, r27	; 0x20
     714:	0a e0       	ldi	r16, 0x0A	; 10
     716:	10 e0       	ldi	r17, 0x00	; 0
     718:	20 e0       	ldi	r18, 0x00	; 0
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	6d 8d       	ldd	r22, Y+29	; 0x1d
     71e:	7e 8d       	ldd	r23, Y+30	; 0x1e
     720:	8f 8d       	ldd	r24, Y+31	; 0x1f
     722:	98 a1       	ldd	r25, Y+32	; 0x20
     724:	a9 01       	movw	r20, r18
     726:	98 01       	movw	r18, r16
     728:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <__udivmodsi4>
     72c:	da 01       	movw	r26, r20
     72e:	c9 01       	movw	r24, r18
     730:	89 83       	std	Y+1, r24	; 0x01
     732:	9a 83       	std	Y+2, r25	; 0x02
     734:	ab 83       	std	Y+3, r26	; 0x03
     736:	bc 83       	std	Y+4, r27	; 0x04

	}while(Local_u32Reserverd !=1);
     738:	89 81       	ldd	r24, Y+1	; 0x01
     73a:	9a 81       	ldd	r25, Y+2	; 0x02
     73c:	ab 81       	ldd	r26, Y+3	; 0x03
     73e:	bc 81       	ldd	r27, Y+4	; 0x04
     740:	01 97       	sbiw	r24, 0x01	; 1
     742:	a1 05       	cpc	r26, r1
     744:	b1 05       	cpc	r27, r1
     746:	09 f0       	breq	.+2      	; 0x74a <CLCD_voidWriteNumber+0x17c>
     748:	be cf       	rjmp	.-132    	; 0x6c6 <CLCD_voidWriteNumber+0xf8>
}
     74a:	00 00       	nop
     74c:	00 00       	nop
     74e:	a0 96       	adiw	r28, 0x20	; 32
     750:	0f b6       	in	r0, 0x3f	; 63
     752:	f8 94       	cli
     754:	de bf       	out	0x3e, r29	; 62
     756:	0f be       	out	0x3f, r0	; 63
     758:	cd bf       	out	0x3d, r28	; 61
     75a:	df 91       	pop	r29
     75c:	cf 91       	pop	r28
     75e:	1f 91       	pop	r17
     760:	0f 91       	pop	r16
     762:	ff 90       	pop	r15
     764:	ef 90       	pop	r14
     766:	df 90       	pop	r13
     768:	cf 90       	pop	r12
     76a:	08 95       	ret

0000076c <CLCD_voidClearScreen>:

void CLCD_voidClearScreen()
{
     76c:	cf 93       	push	r28
     76e:	df 93       	push	r29
     770:	cd b7       	in	r28, 0x3d	; 61
     772:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCommand(1);
     774:	81 e0       	ldi	r24, 0x01	; 1
     776:	0e 94 41 00 	call	0x82	; 0x82 <CLCD_voidSendCommand>
}
     77a:	00 00       	nop
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	08 95       	ret

00000782 <DIO_u8SetPinValue>:
#include"DIO_private.h"



u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
     782:	cf 93       	push	r28
     784:	df 93       	push	r29
     786:	00 d0       	rcall	.+0      	; 0x788 <DIO_u8SetPinValue+0x6>
     788:	00 d0       	rcall	.+0      	; 0x78a <DIO_u8SetPinValue+0x8>
     78a:	cd b7       	in	r28, 0x3d	; 61
     78c:	de b7       	in	r29, 0x3e	; 62
     78e:	8a 83       	std	Y+2, r24	; 0x02
     790:	6b 83       	std	Y+3, r22	; 0x03
     792:	4c 83       	std	Y+4, r20	; 0x04

u8 Local_u8ErrorState=0;
     794:	19 82       	std	Y+1, r1	; 0x01

if(Copy_u8Pin<=DIO_u8PIN7)
     796:	8b 81       	ldd	r24, Y+3	; 0x03
     798:	88 30       	cpi	r24, 0x08	; 8
     79a:	08 f0       	brcs	.+2      	; 0x79e <DIO_u8SetPinValue+0x1c>
     79c:	f3 c0       	rjmp	.+486    	; 0x984 <__stack+0x125>
{
	if(Copy_u8Value==DIO_u8PIN_HIGH)
     79e:	8c 81       	ldd	r24, Y+4	; 0x04
     7a0:	81 30       	cpi	r24, 0x01	; 1
     7a2:	09 f0       	breq	.+2      	; 0x7a6 <DIO_u8SetPinValue+0x24>
     7a4:	72 c0       	rjmp	.+228    	; 0x88a <__stack+0x2b>
		{
		switch(Copy_u8Port)
     7a6:	8a 81       	ldd	r24, Y+2	; 0x02
     7a8:	88 2f       	mov	r24, r24
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	84 30       	cpi	r24, 0x04	; 4
     7ae:	91 05       	cpc	r25, r1
     7b0:	09 f4       	brne	.+2      	; 0x7b4 <DIO_u8SetPinValue+0x32>
     7b2:	52 c0       	rjmp	.+164    	; 0x858 <DIO_u8SetPinValue+0xd6>
     7b4:	85 30       	cpi	r24, 0x05	; 5
     7b6:	91 05       	cpc	r25, r1
     7b8:	0c f0       	brlt	.+2      	; 0x7bc <DIO_u8SetPinValue+0x3a>
     7ba:	64 c0       	rjmp	.+200    	; 0x884 <__stack+0x25>
     7bc:	83 30       	cpi	r24, 0x03	; 3
     7be:	91 05       	cpc	r25, r1
     7c0:	a9 f1       	breq	.+106    	; 0x82c <DIO_u8SetPinValue+0xaa>
     7c2:	84 30       	cpi	r24, 0x04	; 4
     7c4:	91 05       	cpc	r25, r1
     7c6:	0c f0       	brlt	.+2      	; 0x7ca <DIO_u8SetPinValue+0x48>
     7c8:	5d c0       	rjmp	.+186    	; 0x884 <__stack+0x25>
     7ca:	00 97       	sbiw	r24, 0x00	; 0
     7cc:	19 f0       	breq	.+6      	; 0x7d4 <DIO_u8SetPinValue+0x52>
     7ce:	01 97       	sbiw	r24, 0x01	; 1
     7d0:	b9 f0       	breq	.+46     	; 0x800 <DIO_u8SetPinValue+0x7e>
     7d2:	58 c0       	rjmp	.+176    	; 0x884 <__stack+0x25>
		{
			case DIO_u8PORTA:SET_BIT(PORTA,Copy_u8Pin);break;
     7d4:	8b e3       	ldi	r24, 0x3B	; 59
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	fc 01       	movw	r30, r24
     7da:	80 81       	ld	r24, Z
     7dc:	48 2f       	mov	r20, r24
     7de:	8b 81       	ldd	r24, Y+3	; 0x03
     7e0:	28 2f       	mov	r18, r24
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	81 e0       	ldi	r24, 0x01	; 1
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	02 c0       	rjmp	.+4      	; 0x7ee <DIO_u8SetPinValue+0x6c>
     7ea:	88 0f       	add	r24, r24
     7ec:	99 1f       	adc	r25, r25
     7ee:	2a 95       	dec	r18
     7f0:	e2 f7       	brpl	.-8      	; 0x7ea <DIO_u8SetPinValue+0x68>
     7f2:	24 2f       	mov	r18, r20
     7f4:	28 2b       	or	r18, r24
     7f6:	8b e3       	ldi	r24, 0x3B	; 59
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	fc 01       	movw	r30, r24
     7fc:	20 83       	st	Z, r18
     7fe:	c4 c0       	rjmp	.+392    	; 0x988 <__stack+0x129>
			case DIO_u8PORTB:SET_BIT(PORTB,Copy_u8Pin);break;
     800:	88 e3       	ldi	r24, 0x38	; 56
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	fc 01       	movw	r30, r24
     806:	80 81       	ld	r24, Z
     808:	48 2f       	mov	r20, r24
     80a:	8b 81       	ldd	r24, Y+3	; 0x03
     80c:	28 2f       	mov	r18, r24
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	81 e0       	ldi	r24, 0x01	; 1
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	02 c0       	rjmp	.+4      	; 0x81a <DIO_u8SetPinValue+0x98>
     816:	88 0f       	add	r24, r24
     818:	99 1f       	adc	r25, r25
     81a:	2a 95       	dec	r18
     81c:	e2 f7       	brpl	.-8      	; 0x816 <DIO_u8SetPinValue+0x94>
     81e:	24 2f       	mov	r18, r20
     820:	28 2b       	or	r18, r24
     822:	88 e3       	ldi	r24, 0x38	; 56
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	fc 01       	movw	r30, r24
     828:	20 83       	st	Z, r18
     82a:	ae c0       	rjmp	.+348    	; 0x988 <__stack+0x129>
			case DIO_u8PORTC:SET_BIT(PORTC,Copy_u8Pin);break;
     82c:	85 e3       	ldi	r24, 0x35	; 53
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	fc 01       	movw	r30, r24
     832:	80 81       	ld	r24, Z
     834:	48 2f       	mov	r20, r24
     836:	8b 81       	ldd	r24, Y+3	; 0x03
     838:	28 2f       	mov	r18, r24
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	02 c0       	rjmp	.+4      	; 0x846 <DIO_u8SetPinValue+0xc4>
     842:	88 0f       	add	r24, r24
     844:	99 1f       	adc	r25, r25
     846:	2a 95       	dec	r18
     848:	e2 f7       	brpl	.-8      	; 0x842 <DIO_u8SetPinValue+0xc0>
     84a:	24 2f       	mov	r18, r20
     84c:	28 2b       	or	r18, r24
     84e:	85 e3       	ldi	r24, 0x35	; 53
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	fc 01       	movw	r30, r24
     854:	20 83       	st	Z, r18
     856:	98 c0       	rjmp	.+304    	; 0x988 <__stack+0x129>
			case DIO_u8PORTD:SET_BIT(PORTD,Copy_u8Pin);break;
     858:	82 e3       	ldi	r24, 0x32	; 50
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	fc 01       	movw	r30, r24
     85e:	80 81       	ld	r24, Z
     860:	48 2f       	mov	r20, r24
     862:	8b 81       	ldd	r24, Y+3	; 0x03
     864:	28 2f       	mov	r18, r24
     866:	30 e0       	ldi	r19, 0x00	; 0
     868:	81 e0       	ldi	r24, 0x01	; 1
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	02 c0       	rjmp	.+4      	; 0x872 <__stack+0x13>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	2a 95       	dec	r18
     874:	e2 f7       	brpl	.-8      	; 0x86e <__stack+0xf>
     876:	24 2f       	mov	r18, r20
     878:	28 2b       	or	r18, r24
     87a:	82 e3       	ldi	r24, 0x32	; 50
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	fc 01       	movw	r30, r24
     880:	20 83       	st	Z, r18
     882:	82 c0       	rjmp	.+260    	; 0x988 <__stack+0x129>
			default :Local_u8ErrorState=1;break;
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	89 83       	std	Y+1, r24	; 0x01
     888:	7f c0       	rjmp	.+254    	; 0x988 <__stack+0x129>
		}



		}
		else if(Copy_u8Value==DIO_u8PIN_LOW)
     88a:	8c 81       	ldd	r24, Y+4	; 0x04
     88c:	88 23       	and	r24, r24
     88e:	09 f0       	breq	.+2      	; 0x892 <__stack+0x33>
     890:	76 c0       	rjmp	.+236    	; 0x97e <__stack+0x11f>
		{
			switch(Copy_u8Port)
     892:	8a 81       	ldd	r24, Y+2	; 0x02
     894:	88 2f       	mov	r24, r24
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	84 30       	cpi	r24, 0x04	; 4
     89a:	91 05       	cpc	r25, r1
     89c:	09 f4       	brne	.+2      	; 0x8a0 <__stack+0x41>
     89e:	55 c0       	rjmp	.+170    	; 0x94a <__stack+0xeb>
     8a0:	85 30       	cpi	r24, 0x05	; 5
     8a2:	91 05       	cpc	r25, r1
     8a4:	0c f0       	brlt	.+2      	; 0x8a8 <__stack+0x49>
     8a6:	68 c0       	rjmp	.+208    	; 0x978 <__stack+0x119>
     8a8:	83 30       	cpi	r24, 0x03	; 3
     8aa:	91 05       	cpc	r25, r1
     8ac:	b9 f1       	breq	.+110    	; 0x91c <__stack+0xbd>
     8ae:	84 30       	cpi	r24, 0x04	; 4
     8b0:	91 05       	cpc	r25, r1
     8b2:	0c f0       	brlt	.+2      	; 0x8b6 <__stack+0x57>
     8b4:	61 c0       	rjmp	.+194    	; 0x978 <__stack+0x119>
     8b6:	00 97       	sbiw	r24, 0x00	; 0
     8b8:	19 f0       	breq	.+6      	; 0x8c0 <__stack+0x61>
     8ba:	01 97       	sbiw	r24, 0x01	; 1
     8bc:	c1 f0       	breq	.+48     	; 0x8ee <__stack+0x8f>
     8be:	5c c0       	rjmp	.+184    	; 0x978 <__stack+0x119>
			{
				case DIO_u8PORTA:CLR_BIT(PORTA,Copy_u8Pin);break;
     8c0:	8b e3       	ldi	r24, 0x3B	; 59
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	fc 01       	movw	r30, r24
     8c6:	80 81       	ld	r24, Z
     8c8:	48 2f       	mov	r20, r24
     8ca:	8b 81       	ldd	r24, Y+3	; 0x03
     8cc:	28 2f       	mov	r18, r24
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	02 c0       	rjmp	.+4      	; 0x8da <__stack+0x7b>
     8d6:	88 0f       	add	r24, r24
     8d8:	99 1f       	adc	r25, r25
     8da:	2a 95       	dec	r18
     8dc:	e2 f7       	brpl	.-8      	; 0x8d6 <__stack+0x77>
     8de:	80 95       	com	r24
     8e0:	24 2f       	mov	r18, r20
     8e2:	28 23       	and	r18, r24
     8e4:	8b e3       	ldi	r24, 0x3B	; 59
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	fc 01       	movw	r30, r24
     8ea:	20 83       	st	Z, r18
     8ec:	4d c0       	rjmp	.+154    	; 0x988 <__stack+0x129>
				case DIO_u8PORTB:CLR_BIT(PORTB,Copy_u8Pin);break;
     8ee:	88 e3       	ldi	r24, 0x38	; 56
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	fc 01       	movw	r30, r24
     8f4:	80 81       	ld	r24, Z
     8f6:	48 2f       	mov	r20, r24
     8f8:	8b 81       	ldd	r24, Y+3	; 0x03
     8fa:	28 2f       	mov	r18, r24
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	02 c0       	rjmp	.+4      	; 0x908 <__stack+0xa9>
     904:	88 0f       	add	r24, r24
     906:	99 1f       	adc	r25, r25
     908:	2a 95       	dec	r18
     90a:	e2 f7       	brpl	.-8      	; 0x904 <__stack+0xa5>
     90c:	80 95       	com	r24
     90e:	24 2f       	mov	r18, r20
     910:	28 23       	and	r18, r24
     912:	88 e3       	ldi	r24, 0x38	; 56
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	fc 01       	movw	r30, r24
     918:	20 83       	st	Z, r18
     91a:	36 c0       	rjmp	.+108    	; 0x988 <__stack+0x129>
				case DIO_u8PORTC:CLR_BIT(PORTC,Copy_u8Pin);break;
     91c:	85 e3       	ldi	r24, 0x35	; 53
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	fc 01       	movw	r30, r24
     922:	80 81       	ld	r24, Z
     924:	48 2f       	mov	r20, r24
     926:	8b 81       	ldd	r24, Y+3	; 0x03
     928:	28 2f       	mov	r18, r24
     92a:	30 e0       	ldi	r19, 0x00	; 0
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	02 c0       	rjmp	.+4      	; 0x936 <__stack+0xd7>
     932:	88 0f       	add	r24, r24
     934:	99 1f       	adc	r25, r25
     936:	2a 95       	dec	r18
     938:	e2 f7       	brpl	.-8      	; 0x932 <__stack+0xd3>
     93a:	80 95       	com	r24
     93c:	24 2f       	mov	r18, r20
     93e:	28 23       	and	r18, r24
     940:	85 e3       	ldi	r24, 0x35	; 53
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	fc 01       	movw	r30, r24
     946:	20 83       	st	Z, r18
     948:	1f c0       	rjmp	.+62     	; 0x988 <__stack+0x129>
				case DIO_u8PORTD:CLR_BIT(PORTD,Copy_u8Pin);break;
     94a:	82 e3       	ldi	r24, 0x32	; 50
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	fc 01       	movw	r30, r24
     950:	80 81       	ld	r24, Z
     952:	48 2f       	mov	r20, r24
     954:	8b 81       	ldd	r24, Y+3	; 0x03
     956:	28 2f       	mov	r18, r24
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	81 e0       	ldi	r24, 0x01	; 1
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	02 c0       	rjmp	.+4      	; 0x964 <__stack+0x105>
     960:	88 0f       	add	r24, r24
     962:	99 1f       	adc	r25, r25
     964:	2a 95       	dec	r18
     966:	e2 f7       	brpl	.-8      	; 0x960 <__stack+0x101>
     968:	80 95       	com	r24
     96a:	24 2f       	mov	r18, r20
     96c:	28 23       	and	r18, r24
     96e:	82 e3       	ldi	r24, 0x32	; 50
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	fc 01       	movw	r30, r24
     974:	20 83       	st	Z, r18
     976:	08 c0       	rjmp	.+16     	; 0x988 <__stack+0x129>
				default :Local_u8ErrorState=1;break;
     978:	81 e0       	ldi	r24, 0x01	; 1
     97a:	89 83       	std	Y+1, r24	; 0x01
     97c:	05 c0       	rjmp	.+10     	; 0x988 <__stack+0x129>
			}

		}
		else
		{
			Local_u8ErrorState=1;
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	89 83       	std	Y+1, r24	; 0x01
     982:	02 c0       	rjmp	.+4      	; 0x988 <__stack+0x129>
		}

}
else
{
	 Local_u8ErrorState=1;
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	89 83       	std	Y+1, r24	; 0x01
}

return Local_u8ErrorState;
     988:	89 81       	ldd	r24, Y+1	; 0x01
}
     98a:	0f 90       	pop	r0
     98c:	0f 90       	pop	r0
     98e:	0f 90       	pop	r0
     990:	0f 90       	pop	r0
     992:	df 91       	pop	r29
     994:	cf 91       	pop	r28
     996:	08 95       	ret

00000998 <DIO_u8SetPortValue>:


u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
     998:	cf 93       	push	r28
     99a:	df 93       	push	r29
     99c:	00 d0       	rcall	.+0      	; 0x99e <DIO_u8SetPortValue+0x6>
     99e:	0f 92       	push	r0
     9a0:	cd b7       	in	r28, 0x3d	; 61
     9a2:	de b7       	in	r29, 0x3e	; 62
     9a4:	8a 83       	std	Y+2, r24	; 0x02
     9a6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
     9a8:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
     9aa:	8a 81       	ldd	r24, Y+2	; 0x02
     9ac:	88 2f       	mov	r24, r24
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	84 30       	cpi	r24, 0x04	; 4
     9b2:	91 05       	cpc	r25, r1
     9b4:	01 f1       	breq	.+64     	; 0x9f6 <DIO_u8SetPortValue+0x5e>
     9b6:	85 30       	cpi	r24, 0x05	; 5
     9b8:	91 05       	cpc	r25, r1
     9ba:	1c f5       	brge	.+70     	; 0xa02 <DIO_u8SetPortValue+0x6a>
     9bc:	83 30       	cpi	r24, 0x03	; 3
     9be:	91 05       	cpc	r25, r1
     9c0:	a1 f0       	breq	.+40     	; 0x9ea <DIO_u8SetPortValue+0x52>
     9c2:	84 30       	cpi	r24, 0x04	; 4
     9c4:	91 05       	cpc	r25, r1
     9c6:	ec f4       	brge	.+58     	; 0xa02 <DIO_u8SetPortValue+0x6a>
     9c8:	00 97       	sbiw	r24, 0x00	; 0
     9ca:	19 f0       	breq	.+6      	; 0x9d2 <DIO_u8SetPortValue+0x3a>
     9cc:	01 97       	sbiw	r24, 0x01	; 1
     9ce:	39 f0       	breq	.+14     	; 0x9de <DIO_u8SetPortValue+0x46>
     9d0:	18 c0       	rjmp	.+48     	; 0xa02 <DIO_u8SetPortValue+0x6a>
	{
		case DIO_u8PORTA: PORTA=Copy_u8Value; break;
     9d2:	8b e3       	ldi	r24, 0x3B	; 59
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	2b 81       	ldd	r18, Y+3	; 0x03
     9d8:	fc 01       	movw	r30, r24
     9da:	20 83       	st	Z, r18
     9dc:	15 c0       	rjmp	.+42     	; 0xa08 <DIO_u8SetPortValue+0x70>
		case DIO_u8PORTB: PORTB=Copy_u8Value; break;
     9de:	88 e3       	ldi	r24, 0x38	; 56
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	2b 81       	ldd	r18, Y+3	; 0x03
     9e4:	fc 01       	movw	r30, r24
     9e6:	20 83       	st	Z, r18
     9e8:	0f c0       	rjmp	.+30     	; 0xa08 <DIO_u8SetPortValue+0x70>
		case DIO_u8PORTC: PORTC=Copy_u8Value; break;
     9ea:	85 e3       	ldi	r24, 0x35	; 53
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	2b 81       	ldd	r18, Y+3	; 0x03
     9f0:	fc 01       	movw	r30, r24
     9f2:	20 83       	st	Z, r18
     9f4:	09 c0       	rjmp	.+18     	; 0xa08 <DIO_u8SetPortValue+0x70>
		case DIO_u8PORTD: PORTD=Copy_u8Value; break;
     9f6:	82 e3       	ldi	r24, 0x32	; 50
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	2b 81       	ldd	r18, Y+3	; 0x03
     9fc:	fc 01       	movw	r30, r24
     9fe:	20 83       	st	Z, r18
     a00:	03 c0       	rjmp	.+6      	; 0xa08 <DIO_u8SetPortValue+0x70>
		default :Local_u8ErrorState=1; break;
     a02:	81 e0       	ldi	r24, 0x01	; 1
     a04:	89 83       	std	Y+1, r24	; 0x01
     a06:	00 00       	nop
	}

	return Local_u8ErrorState;
     a08:	89 81       	ldd	r24, Y+1	; 0x01
}
     a0a:	0f 90       	pop	r0
     a0c:	0f 90       	pop	r0
     a0e:	0f 90       	pop	r0
     a10:	df 91       	pop	r29
     a12:	cf 91       	pop	r28
     a14:	08 95       	ret

00000a16 <DIO_u8GetPinValue>:


u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8* Copy_pu8Value)
{
     a16:	cf 93       	push	r28
     a18:	df 93       	push	r29
     a1a:	00 d0       	rcall	.+0      	; 0xa1c <DIO_u8GetPinValue+0x6>
     a1c:	00 d0       	rcall	.+0      	; 0xa1e <DIO_u8GetPinValue+0x8>
     a1e:	0f 92       	push	r0
     a20:	cd b7       	in	r28, 0x3d	; 61
     a22:	de b7       	in	r29, 0x3e	; 62
     a24:	8a 83       	std	Y+2, r24	; 0x02
     a26:	6b 83       	std	Y+3, r22	; 0x03
     a28:	5d 83       	std	Y+5, r21	; 0x05
     a2a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
     a2c:	19 82       	std	Y+1, r1	; 0x01

	if( (Copy_pu8Value!=NULL) && (Copy_u8Pin<=DIO_u8PIN7) )
     a2e:	8c 81       	ldd	r24, Y+4	; 0x04
     a30:	9d 81       	ldd	r25, Y+5	; 0x05
     a32:	89 2b       	or	r24, r25
     a34:	09 f4       	brne	.+2      	; 0xa38 <DIO_u8GetPinValue+0x22>
     a36:	73 c0       	rjmp	.+230    	; 0xb1e <DIO_u8GetPinValue+0x108>
     a38:	8b 81       	ldd	r24, Y+3	; 0x03
     a3a:	88 30       	cpi	r24, 0x08	; 8
     a3c:	08 f0       	brcs	.+2      	; 0xa40 <DIO_u8GetPinValue+0x2a>
     a3e:	6f c0       	rjmp	.+222    	; 0xb1e <DIO_u8GetPinValue+0x108>
	{
		switch(Copy_u8Port)
     a40:	8a 81       	ldd	r24, Y+2	; 0x02
     a42:	88 2f       	mov	r24, r24
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	84 30       	cpi	r24, 0x04	; 4
     a48:	91 05       	cpc	r25, r1
     a4a:	09 f4       	brne	.+2      	; 0xa4e <DIO_u8GetPinValue+0x38>
     a4c:	4f c0       	rjmp	.+158    	; 0xaec <DIO_u8GetPinValue+0xd6>
     a4e:	85 30       	cpi	r24, 0x05	; 5
     a50:	91 05       	cpc	r25, r1
     a52:	0c f0       	brlt	.+2      	; 0xa56 <DIO_u8GetPinValue+0x40>
     a54:	60 c0       	rjmp	.+192    	; 0xb16 <DIO_u8GetPinValue+0x100>
     a56:	83 30       	cpi	r24, 0x03	; 3
     a58:	91 05       	cpc	r25, r1
     a5a:	99 f1       	breq	.+102    	; 0xac2 <DIO_u8GetPinValue+0xac>
     a5c:	84 30       	cpi	r24, 0x04	; 4
     a5e:	91 05       	cpc	r25, r1
     a60:	0c f0       	brlt	.+2      	; 0xa64 <DIO_u8GetPinValue+0x4e>
     a62:	59 c0       	rjmp	.+178    	; 0xb16 <DIO_u8GetPinValue+0x100>
     a64:	00 97       	sbiw	r24, 0x00	; 0
     a66:	19 f0       	breq	.+6      	; 0xa6e <DIO_u8GetPinValue+0x58>
     a68:	01 97       	sbiw	r24, 0x01	; 1
     a6a:	b1 f0       	breq	.+44     	; 0xa98 <DIO_u8GetPinValue+0x82>
     a6c:	54 c0       	rjmp	.+168    	; 0xb16 <DIO_u8GetPinValue+0x100>
		 {
			 case DIO_u8PORTA: *Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin); break;
     a6e:	89 e3       	ldi	r24, 0x39	; 57
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	fc 01       	movw	r30, r24
     a74:	80 81       	ld	r24, Z
     a76:	88 2f       	mov	r24, r24
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	2b 81       	ldd	r18, Y+3	; 0x03
     a7c:	22 2f       	mov	r18, r18
     a7e:	30 e0       	ldi	r19, 0x00	; 0
     a80:	02 c0       	rjmp	.+4      	; 0xa86 <DIO_u8GetPinValue+0x70>
     a82:	95 95       	asr	r25
     a84:	87 95       	ror	r24
     a86:	2a 95       	dec	r18
     a88:	e2 f7       	brpl	.-8      	; 0xa82 <DIO_u8GetPinValue+0x6c>
     a8a:	28 2f       	mov	r18, r24
     a8c:	21 70       	andi	r18, 0x01	; 1
     a8e:	8c 81       	ldd	r24, Y+4	; 0x04
     a90:	9d 81       	ldd	r25, Y+5	; 0x05
     a92:	fc 01       	movw	r30, r24
     a94:	20 83       	st	Z, r18
     a96:	42 c0       	rjmp	.+132    	; 0xb1c <DIO_u8GetPinValue+0x106>
			 case DIO_u8PORTB: *Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin); break;
     a98:	86 e3       	ldi	r24, 0x36	; 54
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	fc 01       	movw	r30, r24
     a9e:	80 81       	ld	r24, Z
     aa0:	88 2f       	mov	r24, r24
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	2b 81       	ldd	r18, Y+3	; 0x03
     aa6:	22 2f       	mov	r18, r18
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	02 c0       	rjmp	.+4      	; 0xab0 <DIO_u8GetPinValue+0x9a>
     aac:	95 95       	asr	r25
     aae:	87 95       	ror	r24
     ab0:	2a 95       	dec	r18
     ab2:	e2 f7       	brpl	.-8      	; 0xaac <DIO_u8GetPinValue+0x96>
     ab4:	28 2f       	mov	r18, r24
     ab6:	21 70       	andi	r18, 0x01	; 1
     ab8:	8c 81       	ldd	r24, Y+4	; 0x04
     aba:	9d 81       	ldd	r25, Y+5	; 0x05
     abc:	fc 01       	movw	r30, r24
     abe:	20 83       	st	Z, r18
     ac0:	2d c0       	rjmp	.+90     	; 0xb1c <DIO_u8GetPinValue+0x106>
			 case DIO_u8PORTC: *Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin); break;
     ac2:	83 e3       	ldi	r24, 0x33	; 51
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	fc 01       	movw	r30, r24
     ac8:	80 81       	ld	r24, Z
     aca:	88 2f       	mov	r24, r24
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	2b 81       	ldd	r18, Y+3	; 0x03
     ad0:	22 2f       	mov	r18, r18
     ad2:	30 e0       	ldi	r19, 0x00	; 0
     ad4:	02 c0       	rjmp	.+4      	; 0xada <DIO_u8GetPinValue+0xc4>
     ad6:	95 95       	asr	r25
     ad8:	87 95       	ror	r24
     ada:	2a 95       	dec	r18
     adc:	e2 f7       	brpl	.-8      	; 0xad6 <DIO_u8GetPinValue+0xc0>
     ade:	28 2f       	mov	r18, r24
     ae0:	21 70       	andi	r18, 0x01	; 1
     ae2:	8c 81       	ldd	r24, Y+4	; 0x04
     ae4:	9d 81       	ldd	r25, Y+5	; 0x05
     ae6:	fc 01       	movw	r30, r24
     ae8:	20 83       	st	Z, r18
     aea:	18 c0       	rjmp	.+48     	; 0xb1c <DIO_u8GetPinValue+0x106>
			 case DIO_u8PORTD: *Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin); break;
     aec:	80 e3       	ldi	r24, 0x30	; 48
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	fc 01       	movw	r30, r24
     af2:	80 81       	ld	r24, Z
     af4:	88 2f       	mov	r24, r24
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	2b 81       	ldd	r18, Y+3	; 0x03
     afa:	22 2f       	mov	r18, r18
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	02 c0       	rjmp	.+4      	; 0xb04 <DIO_u8GetPinValue+0xee>
     b00:	95 95       	asr	r25
     b02:	87 95       	ror	r24
     b04:	2a 95       	dec	r18
     b06:	e2 f7       	brpl	.-8      	; 0xb00 <DIO_u8GetPinValue+0xea>
     b08:	28 2f       	mov	r18, r24
     b0a:	21 70       	andi	r18, 0x01	; 1
     b0c:	8c 81       	ldd	r24, Y+4	; 0x04
     b0e:	9d 81       	ldd	r25, Y+5	; 0x05
     b10:	fc 01       	movw	r30, r24
     b12:	20 83       	st	Z, r18
     b14:	03 c0       	rjmp	.+6      	; 0xb1c <DIO_u8GetPinValue+0x106>
			 default : Local_u8ErrorState=1; break;
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	89 83       	std	Y+1, r24	; 0x01
     b1a:	00 00       	nop
{
	u8 Local_u8ErrorState=0;

	if( (Copy_pu8Value!=NULL) && (Copy_u8Pin<=DIO_u8PIN7) )
	{
		switch(Copy_u8Port)
     b1c:	02 c0       	rjmp	.+4      	; 0xb22 <DIO_u8GetPinValue+0x10c>

	}

	else
	{
		Local_u8ErrorState = 1;
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
     b22:	89 81       	ldd	r24, Y+1	; 0x01
}
     b24:	0f 90       	pop	r0
     b26:	0f 90       	pop	r0
     b28:	0f 90       	pop	r0
     b2a:	0f 90       	pop	r0
     b2c:	0f 90       	pop	r0
     b2e:	df 91       	pop	r29
     b30:	cf 91       	pop	r28
     b32:	08 95       	ret

00000b34 <KPD_u8GetPressedKey>:
#include"KPD_config.h"
#include"KPD_private.h"


u8 KPD_u8GetPressedKey(void)
{
     b34:	cf 93       	push	r28
     b36:	df 93       	push	r29
     b38:	00 d0       	rcall	.+0      	; 0xb3a <KPD_u8GetPressedKey+0x6>
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <KPD_u8GetPressedKey+0x8>
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
u8 Local_u8PressedKey = KPD_NO_PRESSED_KEY , Local_u8PinState , Local_u8ColumnIdx, Local_u8RowIdx;
     b40:	80 ef       	ldi	r24, 0xF0	; 240
     b42:	8b 83       	std	Y+3, r24	; 0x03
static u8 Local_u8KPDArr[KPD_ROW_NUM][KPD_COLUMN_NUM] = KPD_ARR_VAL;
static u8 Local_u8KPDColumnArr[KPD_COLUMN_NUM] = {KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};
static u8 Local_u8KPDRowArr[KPD_ROW_NUM] = {KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

for(Local_u8ColumnIdx=0; Local_u8ColumnIdx < KPD_COLUMN_NUM; Local_u8ColumnIdx++)
     b44:	19 82       	std	Y+1, r1	; 0x01
     b46:	59 c0       	rjmp	.+178    	; 0xbfa <KPD_u8GetPressedKey+0xc6>
{
		/*Activate current column*/
	DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx],DIO_u8PIN_LOW);
     b48:	89 81       	ldd	r24, Y+1	; 0x01
     b4a:	88 2f       	mov	r24, r24
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	80 5a       	subi	r24, 0xA0	; 160
     b50:	9f 4f       	sbci	r25, 0xFF	; 255
     b52:	fc 01       	movw	r30, r24
     b54:	80 81       	ld	r24, Z
     b56:	40 e0       	ldi	r20, 0x00	; 0
     b58:	68 2f       	mov	r22, r24
     b5a:	84 e0       	ldi	r24, 0x04	; 4
     b5c:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_u8SetPinValue>

	for(Local_u8RowIdx = 0; Local_u8RowIdx < KPD_ROW_NUM; Local_u8RowIdx++)
     b60:	1a 82       	std	Y+2, r1	; 0x02
     b62:	39 c0       	rjmp	.+114    	; 0xbd6 <KPD_u8GetPressedKey+0xa2>
	{
		/*Read the current row*/
		DIO_u8GetPinValue(KPD_PORT, Local_u8KPDRowArr[Local_u8RowIdx], &Local_u8PinState);
     b64:	8a 81       	ldd	r24, Y+2	; 0x02
     b66:	88 2f       	mov	r24, r24
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	8c 59       	subi	r24, 0x9C	; 156
     b6c:	9f 4f       	sbci	r25, 0xFF	; 255
     b6e:	fc 01       	movw	r30, r24
     b70:	20 81       	ld	r18, Z
     b72:	ce 01       	movw	r24, r28
     b74:	04 96       	adiw	r24, 0x04	; 4
     b76:	ac 01       	movw	r20, r24
     b78:	62 2f       	mov	r22, r18
     b7a:	84 e0       	ldi	r24, 0x04	; 4
     b7c:	0e 94 0b 05 	call	0xa16	; 0xa16 <DIO_u8GetPinValue>

		 /*Check switch is pressed*/
		if( Local_u8PinState == DIO_u8PIN_LOW)
     b80:	8c 81       	ldd	r24, Y+4	; 0x04
     b82:	88 23       	and	r24, r24
     b84:	29 f5       	brne	.+74     	; 0xbd0 <KPD_u8GetPressedKey+0x9c>
		{
			/*Switch is pressed*/
			Local_u8PressedKey = Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];
     b86:	8a 81       	ldd	r24, Y+2	; 0x02
     b88:	28 2f       	mov	r18, r24
     b8a:	30 e0       	ldi	r19, 0x00	; 0
     b8c:	89 81       	ldd	r24, Y+1	; 0x01
     b8e:	88 2f       	mov	r24, r24
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	22 0f       	add	r18, r18
     b94:	33 1f       	adc	r19, r19
     b96:	22 0f       	add	r18, r18
     b98:	33 1f       	adc	r19, r19
     b9a:	82 0f       	add	r24, r18
     b9c:	93 1f       	adc	r25, r19
     b9e:	88 59       	subi	r24, 0x98	; 152
     ba0:	9f 4f       	sbci	r25, 0xFF	; 255
     ba2:	fc 01       	movw	r30, r24
     ba4:	80 81       	ld	r24, Z
     ba6:	8b 83       	std	Y+3, r24	; 0x03

			/*polling (busy waiting) until the key is released*/
			while(DIO_u8PIN_LOW == Local_u8PinState)
     ba8:	0e c0       	rjmp	.+28     	; 0xbc6 <KPD_u8GetPressedKey+0x92>
			{
				DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIdx],&Local_u8PinState);
     baa:	8a 81       	ldd	r24, Y+2	; 0x02
     bac:	88 2f       	mov	r24, r24
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	8c 59       	subi	r24, 0x9C	; 156
     bb2:	9f 4f       	sbci	r25, 0xFF	; 255
     bb4:	fc 01       	movw	r30, r24
     bb6:	20 81       	ld	r18, Z
     bb8:	ce 01       	movw	r24, r28
     bba:	04 96       	adiw	r24, 0x04	; 4
     bbc:	ac 01       	movw	r20, r24
     bbe:	62 2f       	mov	r22, r18
     bc0:	84 e0       	ldi	r24, 0x04	; 4
     bc2:	0e 94 0b 05 	call	0xa16	; 0xa16 <DIO_u8GetPinValue>
		{
			/*Switch is pressed*/
			Local_u8PressedKey = Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];

			/*polling (busy waiting) until the key is released*/
			while(DIO_u8PIN_LOW == Local_u8PinState)
     bc6:	8c 81       	ldd	r24, Y+4	; 0x04
     bc8:	88 23       	and	r24, r24
     bca:	79 f3       	breq	.-34     	; 0xbaa <KPD_u8GetPressedKey+0x76>
			{
				DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIdx],&Local_u8PinState);
			}
			return Local_u8PressedKey;
     bcc:	8b 81       	ldd	r24, Y+3	; 0x03
     bce:	1a c0       	rjmp	.+52     	; 0xc04 <KPD_u8GetPressedKey+0xd0>
for(Local_u8ColumnIdx=0; Local_u8ColumnIdx < KPD_COLUMN_NUM; Local_u8ColumnIdx++)
{
		/*Activate current column*/
	DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx],DIO_u8PIN_LOW);

	for(Local_u8RowIdx = 0; Local_u8RowIdx < KPD_ROW_NUM; Local_u8RowIdx++)
     bd0:	8a 81       	ldd	r24, Y+2	; 0x02
     bd2:	8f 5f       	subi	r24, 0xFF	; 255
     bd4:	8a 83       	std	Y+2, r24	; 0x02
     bd6:	8a 81       	ldd	r24, Y+2	; 0x02
     bd8:	84 30       	cpi	r24, 0x04	; 4
     bda:	20 f2       	brcs	.-120    	; 0xb64 <KPD_u8GetPressedKey+0x30>
			return Local_u8PressedKey;
		}
	}

	/*Deactivate the current column*/
	DIO_u8SetPinValue(KPD_PORT, Local_u8KPDColumnArr[Local_u8ColumnIdx], DIO_u8PIN_HIGH);
     bdc:	89 81       	ldd	r24, Y+1	; 0x01
     bde:	88 2f       	mov	r24, r24
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	80 5a       	subi	r24, 0xA0	; 160
     be4:	9f 4f       	sbci	r25, 0xFF	; 255
     be6:	fc 01       	movw	r30, r24
     be8:	80 81       	ld	r24, Z
     bea:	41 e0       	ldi	r20, 0x01	; 1
     bec:	68 2f       	mov	r22, r24
     bee:	84 e0       	ldi	r24, 0x04	; 4
     bf0:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_u8SetPinValue>
u8 Local_u8PressedKey = KPD_NO_PRESSED_KEY , Local_u8PinState , Local_u8ColumnIdx, Local_u8RowIdx;
static u8 Local_u8KPDArr[KPD_ROW_NUM][KPD_COLUMN_NUM] = KPD_ARR_VAL;
static u8 Local_u8KPDColumnArr[KPD_COLUMN_NUM] = {KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};
static u8 Local_u8KPDRowArr[KPD_ROW_NUM] = {KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

for(Local_u8ColumnIdx=0; Local_u8ColumnIdx < KPD_COLUMN_NUM; Local_u8ColumnIdx++)
     bf4:	89 81       	ldd	r24, Y+1	; 0x01
     bf6:	8f 5f       	subi	r24, 0xFF	; 255
     bf8:	89 83       	std	Y+1, r24	; 0x01
     bfa:	89 81       	ldd	r24, Y+1	; 0x01
     bfc:	84 30       	cpi	r24, 0x04	; 4
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <KPD_u8GetPressedKey+0xce>
     c00:	a3 cf       	rjmp	.-186    	; 0xb48 <KPD_u8GetPressedKey+0x14>
	/*Deactivate the current column*/
	DIO_u8SetPinValue(KPD_PORT, Local_u8KPDColumnArr[Local_u8ColumnIdx], DIO_u8PIN_HIGH);

}

return Local_u8PressedKey;
     c02:	8b 81       	ldd	r24, Y+3	; 0x03
}
     c04:	0f 90       	pop	r0
     c06:	0f 90       	pop	r0
     c08:	0f 90       	pop	r0
     c0a:	0f 90       	pop	r0
     c0c:	df 91       	pop	r29
     c0e:	cf 91       	pop	r28
     c10:	08 95       	ret

00000c12 <PORT_voidInit>:
#include"PORT_interface.h"
#include"PORT_register.h"


void PORT_voidInit()
{
     c12:	cf 93       	push	r28
     c14:	df 93       	push	r29
     c16:	cd b7       	in	r28, 0x3d	; 61
     c18:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
     c1a:	8a e3       	ldi	r24, 0x3A	; 58
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	2f ef       	ldi	r18, 0xFF	; 255
     c20:	fc 01       	movw	r30, r24
     c22:	20 83       	st	Z, r18
	DDRB=PORTB_DIR;
     c24:	87 e3       	ldi	r24, 0x37	; 55
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	fc 01       	movw	r30, r24
     c2a:	10 82       	st	Z, r1
	DDRC=PORTC_DIR;
     c2c:	84 e3       	ldi	r24, 0x34	; 52
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	27 e0       	ldi	r18, 0x07	; 7
     c32:	fc 01       	movw	r30, r24
     c34:	20 83       	st	Z, r18
	DDRD=PORTD_DIR;
     c36:	81 e3       	ldi	r24, 0x31	; 49
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	2f e0       	ldi	r18, 0x0F	; 15
     c3c:	fc 01       	movw	r30, r24
     c3e:	20 83       	st	Z, r18

	PORTA=PORTA_InitVal;
     c40:	8b e3       	ldi	r24, 0x3B	; 59
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	fc 01       	movw	r30, r24
     c46:	10 82       	st	Z, r1
	PORTB=PORTB_InitVal;
     c48:	88 e3       	ldi	r24, 0x38	; 56
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	fc 01       	movw	r30, r24
     c4e:	10 82       	st	Z, r1
	PORTC=PORTC_InitVal;
     c50:	85 e3       	ldi	r24, 0x35	; 53
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	fc 01       	movw	r30, r24
     c56:	10 82       	st	Z, r1
	PORTD=PORTD_InitVal;
     c58:	82 e3       	ldi	r24, 0x32	; 50
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	2f ef       	ldi	r18, 0xFF	; 255
     c5e:	fc 01       	movw	r30, r24
     c60:	20 83       	st	Z, r18
}
     c62:	00 00       	nop
     c64:	df 91       	pop	r29
     c66:	cf 91       	pop	r28
     c68:	08 95       	ret

00000c6a <main>:
 *
 *button for reset
 * */

void main(void)
{
     c6a:	cf 93       	push	r28
     c6c:	df 93       	push	r29
     c6e:	cd b7       	in	r28, 0x3d	; 61
     c70:	de b7       	in	r29, 0x3e	; 62
     c72:	cd 55       	subi	r28, 0x5D	; 93
     c74:	d1 09       	sbc	r29, r1
     c76:	0f b6       	in	r0, 0x3f	; 63
     c78:	f8 94       	cli
     c7a:	de bf       	out	0x3e, r29	; 62
     c7c:	0f be       	out	0x3f, r0	; 63
     c7e:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8button;

	u8 Local_u8Arrow[8] = {0b00000100,
     c80:	88 e0       	ldi	r24, 0x08	; 8
     c82:	e8 e7       	ldi	r30, 0x78	; 120
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	de 01       	movw	r26, r28
     c88:	14 96       	adiw	r26, 0x04	; 4
     c8a:	01 90       	ld	r0, Z+
     c8c:	0d 92       	st	X+, r0
     c8e:	8a 95       	dec	r24
     c90:	e1 f7       	brne	.-8      	; 0xc8a <main+0x20>
			0b00000100,
			0b00000100,
			0b00000100,
			0b00000100};

	u8 Local_u8DeleteArrow[8] = {0b00000000,
     c92:	88 e0       	ldi	r24, 0x08	; 8
     c94:	e0 e8       	ldi	r30, 0x80	; 128
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	de 01       	movw	r26, r28
     c9a:	1c 96       	adiw	r26, 0x0c	; 12
     c9c:	01 90       	ld	r0, Z+
     c9e:	0d 92       	st	X+, r0
     ca0:	8a 95       	dec	r24
     ca2:	e1 f7       	brne	.-8      	; 0xc9c <main+0x32>
			0b00000000,
			0b00000000,
			0b00000000,
			0b00000000};

	u8 Local_u8DigitPos = 0;
     ca4:	19 82       	std	Y+1, r1	; 0x01

	u8 Local_u8Operation[4] = {'+','-','*','/'};
     ca6:	8b e2       	ldi	r24, 0x2B	; 43
     ca8:	9d e2       	ldi	r25, 0x2D	; 45
     caa:	9d 8b       	std	Y+21, r25	; 0x15
     cac:	8c 8b       	std	Y+20, r24	; 0x14
     cae:	8a e2       	ldi	r24, 0x2A	; 42
     cb0:	9f e2       	ldi	r25, 0x2F	; 47
     cb2:	9f 8b       	std	Y+23, r25	; 0x17
     cb4:	8e 8b       	std	Y+22, r24	; 0x16
	u8 index = 0;
     cb6:	1a 82       	std	Y+2, r1	; 0x02

	u8 Local_u8Numbers2[9] = {1,2,3,4,5,6,7,8,9};
     cb8:	89 e0       	ldi	r24, 0x09	; 9
     cba:	e8 e8       	ldi	r30, 0x88	; 136
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	de 01       	movw	r26, r28
     cc0:	58 96       	adiw	r26, 0x18	; 24
     cc2:	01 90       	ld	r0, Z+
     cc4:	0d 92       	st	X+, r0
     cc6:	8a 95       	dec	r24
     cc8:	e1 f7       	brne	.-8      	; 0xcc2 <main+0x58>

	u8 Local_u8Numbers1[9] = {1,2,3,4,5,6,7,8,9};
     cca:	89 e0       	ldi	r24, 0x09	; 9
     ccc:	e8 e8       	ldi	r30, 0x88	; 136
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	de 01       	movw	r26, r28
     cd2:	91 96       	adiw	r26, 0x21	; 33
     cd4:	01 90       	ld	r0, Z+
     cd6:	0d 92       	st	X+, r0
     cd8:	8a 95       	dec	r24
     cda:	e1 f7       	brne	.-8      	; 0xcd4 <main+0x6a>

	PORT_voidInit();
     cdc:	0e 94 09 06 	call	0xc12	; 0xc12 <PORT_voidInit>
	CLCD_voidInit();
     ce0:	0e 94 b7 01 	call	0x36e	; 0x36e <CLCD_voidInit>


	/*Display the Initial Form 1+1*/
	/*Display first Digit*/
	CLCD_voidGoToXY(0,0);
     ce4:	60 e0       	ldi	r22, 0x00	; 0
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	0e 94 8d 02 	call	0x51a	; 0x51a <CLCD_voidGoToXY>
	CLCD_voidWriteNumber(Local_u8Numbers1[0]);
     cec:	89 a1       	ldd	r24, Y+33	; 0x21
     cee:	28 2f       	mov	r18, r24
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	40 e0       	ldi	r20, 0x00	; 0
     cf4:	50 e0       	ldi	r21, 0x00	; 0
     cf6:	2a a7       	std	Y+42, r18	; 0x2a
     cf8:	3b a7       	std	Y+43, r19	; 0x2b
     cfa:	4c a7       	std	Y+44, r20	; 0x2c
     cfc:	5d a7       	std	Y+45, r21	; 0x2d
     cfe:	6a a5       	ldd	r22, Y+42	; 0x2a
     d00:	7b a5       	ldd	r23, Y+43	; 0x2b
     d02:	8c a5       	ldd	r24, Y+44	; 0x2c
     d04:	9d a5       	ldd	r25, Y+45	; 0x2d
     d06:	0e 94 e7 02 	call	0x5ce	; 0x5ce <CLCD_voidWriteNumber>

	/*Display the arrow on the 1st digit*/
	CLCD_voidWriteSpecialCharacter(&Local_u8Arrow,0,1,0);
     d0a:	ce 01       	movw	r24, r28
     d0c:	04 96       	adiw	r24, 0x04	; 4
     d0e:	20 e0       	ldi	r18, 0x00	; 0
     d10:	41 e0       	ldi	r20, 0x01	; 1
     d12:	60 e0       	ldi	r22, 0x00	; 0
     d14:	0e 94 ac 02 	call	0x558	; 0x558 <CLCD_voidWriteSpecialCharacter>

	/*Display the initial operation*/
	CLCD_voidGoToXY(0,1);
     d18:	61 e0       	ldi	r22, 0x01	; 1
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	0e 94 8d 02 	call	0x51a	; 0x51a <CLCD_voidGoToXY>
	CLCD_voidSendData(Local_u8Operation[0]);
     d20:	8c 89       	ldd	r24, Y+20	; 0x14
     d22:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <CLCD_voidSendData>

	/*Display the second digit*/
	CLCD_voidGoToXY(0,2);
     d26:	62 e0       	ldi	r22, 0x02	; 2
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	0e 94 8d 02 	call	0x51a	; 0x51a <CLCD_voidGoToXY>
	CLCD_voidWriteNumber(Local_u8Numbers2[0]);
     d2e:	88 8d       	ldd	r24, Y+24	; 0x18
     d30:	28 2f       	mov	r18, r24
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	40 e0       	ldi	r20, 0x00	; 0
     d36:	50 e0       	ldi	r21, 0x00	; 0
     d38:	2e a7       	std	Y+46, r18	; 0x2e
     d3a:	3f a7       	std	Y+47, r19	; 0x2f
     d3c:	48 ab       	std	Y+48, r20	; 0x30
     d3e:	59 ab       	std	Y+49, r21	; 0x31
     d40:	6e a5       	ldd	r22, Y+46	; 0x2e
     d42:	7f a5       	ldd	r23, Y+47	; 0x2f
     d44:	88 a9       	ldd	r24, Y+48	; 0x30
     d46:	99 a9       	ldd	r25, Y+49	; 0x31
     d48:	0e 94 e7 02 	call	0x5ce	; 0x5ce <CLCD_voidWriteNumber>
		/*1st digit Pos*/
		//	CLCD_voidGoToXY(0,0);
		/*read the button and store the return*/
		do
		{
			Local_u8button = KPD_u8GetPressedKey();
     d4c:	0e 94 9a 05 	call	0xb34	; 0xb34 <KPD_u8GetPressedKey>
     d50:	8b 83       	std	Y+3, r24	; 0x03

		}while(Local_u8button == KPD_NO_PRESSED_KEY);
     d52:	8b 81       	ldd	r24, Y+3	; 0x03
     d54:	80 3f       	cpi	r24, 0xF0	; 240
     d56:	d1 f3       	breq	.-12     	; 0xd4c <main+0xe2>

		/*check which digit we are*/
		if(Local_u8DigitPos == 0)
     d58:	89 81       	ldd	r24, Y+1	; 0x01
     d5a:	88 23       	and	r24, r24
     d5c:	09 f0       	breq	.+2      	; 0xd60 <main+0xf6>
     d5e:	c1 c0       	rjmp	.+386    	; 0xee2 <main+0x278>
		{
			/*check which Button is pressed*/
			//up button
			if(Local_u8button == '+')
     d60:	8b 81       	ldd	r24, Y+3	; 0x03
     d62:	8b 32       	cpi	r24, 0x2B	; 43
     d64:	09 f0       	breq	.+2      	; 0xd68 <main+0xfe>
     d66:	53 c0       	rjmp	.+166    	; 0xe0e <main+0x1a4>
			{
				CLCD_voidGoToXY(0,Local_u8DigitPos);
     d68:	69 81       	ldd	r22, Y+1	; 0x01
     d6a:	80 e0       	ldi	r24, 0x00	; 0
     d6c:	0e 94 8d 02 	call	0x51a	; 0x51a <CLCD_voidGoToXY>
				Local_u8Numbers1[index] ++;
     d70:	8a 81       	ldd	r24, Y+2	; 0x02
     d72:	88 2f       	mov	r24, r24
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	9e 01       	movw	r18, r28
     d78:	2f 5d       	subi	r18, 0xDF	; 223
     d7a:	3f 4f       	sbci	r19, 0xFF	; 255
     d7c:	28 0f       	add	r18, r24
     d7e:	39 1f       	adc	r19, r25
     d80:	f9 01       	movw	r30, r18
     d82:	20 81       	ld	r18, Z
     d84:	41 e0       	ldi	r20, 0x01	; 1
     d86:	42 0f       	add	r20, r18
     d88:	9e 01       	movw	r18, r28
     d8a:	2f 5d       	subi	r18, 0xDF	; 223
     d8c:	3f 4f       	sbci	r19, 0xFF	; 255
     d8e:	82 0f       	add	r24, r18
     d90:	93 1f       	adc	r25, r19
     d92:	fc 01       	movw	r30, r24
     d94:	40 83       	st	Z, r20
				CLCD_voidWriteNumber(Local_u8Numbers1[index]);
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	88 2f       	mov	r24, r24
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	9e 01       	movw	r18, r28
     d9e:	2f 5d       	subi	r18, 0xDF	; 223
     da0:	3f 4f       	sbci	r19, 0xFF	; 255
     da2:	82 0f       	add	r24, r18
     da4:	93 1f       	adc	r25, r19
     da6:	fc 01       	movw	r30, r24
     da8:	80 81       	ld	r24, Z
     daa:	28 2f       	mov	r18, r24
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	40 e0       	ldi	r20, 0x00	; 0
     db0:	50 e0       	ldi	r21, 0x00	; 0
     db2:	2a ab       	std	Y+50, r18	; 0x32
     db4:	3b ab       	std	Y+51, r19	; 0x33
     db6:	4c ab       	std	Y+52, r20	; 0x34
     db8:	5d ab       	std	Y+53, r21	; 0x35
     dba:	6a a9       	ldd	r22, Y+50	; 0x32
     dbc:	7b a9       	ldd	r23, Y+51	; 0x33
     dbe:	8c a9       	ldd	r24, Y+52	; 0x34
     dc0:	9d a9       	ldd	r25, Y+53	; 0x35
     dc2:	0e 94 e7 02 	call	0x5ce	; 0x5ce <CLCD_voidWriteNumber>

				/* Limits the numbers to 9*/
				if(Local_u8Numbers1[index] == 9)
     dc6:	8a 81       	ldd	r24, Y+2	; 0x02
     dc8:	88 2f       	mov	r24, r24
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	9e 01       	movw	r18, r28
     dce:	2f 5d       	subi	r18, 0xDF	; 223
     dd0:	3f 4f       	sbci	r19, 0xFF	; 255
     dd2:	82 0f       	add	r24, r18
     dd4:	93 1f       	adc	r25, r19
     dd6:	fc 01       	movw	r30, r24
     dd8:	80 81       	ld	r24, Z
     dda:	89 30       	cpi	r24, 0x09	; 9
     ddc:	09 f0       	breq	.+2      	; 0xde0 <main+0x176>
     dde:	b6 cf       	rjmp	.-148    	; 0xd4c <main+0xe2>
				{
					//index = 0;
					Local_u8Numbers1[index] -=9;
     de0:	8a 81       	ldd	r24, Y+2	; 0x02
     de2:	88 2f       	mov	r24, r24
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	9e 01       	movw	r18, r28
     de8:	2f 5d       	subi	r18, 0xDF	; 223
     dea:	3f 4f       	sbci	r19, 0xFF	; 255
     dec:	82 0f       	add	r24, r18
     dee:	93 1f       	adc	r25, r19
     df0:	fc 01       	movw	r30, r24
     df2:	20 81       	ld	r18, Z
     df4:	8a 81       	ldd	r24, Y+2	; 0x02
     df6:	88 2f       	mov	r24, r24
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	47 ef       	ldi	r20, 0xF7	; 247
     dfc:	42 0f       	add	r20, r18
     dfe:	9e 01       	movw	r18, r28
     e00:	2f 5d       	subi	r18, 0xDF	; 223
     e02:	3f 4f       	sbci	r19, 0xFF	; 255
     e04:	82 0f       	add	r24, r18
     e06:	93 1f       	adc	r25, r19
     e08:	fc 01       	movw	r30, r24
     e0a:	40 83       	st	Z, r20
     e0c:	9f cf       	rjmp	.-194    	; 0xd4c <main+0xe2>
				}

			}

			//down button
			else if(Local_u8button == '-')
     e0e:	8b 81       	ldd	r24, Y+3	; 0x03
     e10:	8d 32       	cpi	r24, 0x2D	; 45
     e12:	09 f0       	breq	.+2      	; 0xe16 <main+0x1ac>
     e14:	48 c0       	rjmp	.+144    	; 0xea6 <main+0x23c>
			{
				CLCD_voidGoToXY(0,Local_u8DigitPos);
     e16:	69 81       	ldd	r22, Y+1	; 0x01
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	0e 94 8d 02 	call	0x51a	; 0x51a <CLCD_voidGoToXY>

				/*handle  the numbers if we clicked down*/
				if(Local_u8Numbers1[index] == 1)
     e1e:	8a 81       	ldd	r24, Y+2	; 0x02
     e20:	88 2f       	mov	r24, r24
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	9e 01       	movw	r18, r28
     e26:	2f 5d       	subi	r18, 0xDF	; 223
     e28:	3f 4f       	sbci	r19, 0xFF	; 255
     e2a:	82 0f       	add	r24, r18
     e2c:	93 1f       	adc	r25, r19
     e2e:	fc 01       	movw	r30, r24
     e30:	80 81       	ld	r24, Z
     e32:	81 30       	cpi	r24, 0x01	; 1
     e34:	61 f4       	brne	.+24     	; 0xe4e <main+0x1e4>
				{
					Local_u8Numbers1[index] = 1;
     e36:	8a 81       	ldd	r24, Y+2	; 0x02
     e38:	88 2f       	mov	r24, r24
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	9e 01       	movw	r18, r28
     e3e:	2f 5d       	subi	r18, 0xDF	; 223
     e40:	3f 4f       	sbci	r19, 0xFF	; 255
     e42:	82 0f       	add	r24, r18
     e44:	93 1f       	adc	r25, r19
     e46:	21 e0       	ldi	r18, 0x01	; 1
     e48:	fc 01       	movw	r30, r24
     e4a:	20 83       	st	Z, r18
     e4c:	7f cf       	rjmp	.-258    	; 0xd4c <main+0xe2>
				}
				else
				{
					Local_u8Numbers1[index] --;
     e4e:	8a 81       	ldd	r24, Y+2	; 0x02
     e50:	88 2f       	mov	r24, r24
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	9e 01       	movw	r18, r28
     e56:	2f 5d       	subi	r18, 0xDF	; 223
     e58:	3f 4f       	sbci	r19, 0xFF	; 255
     e5a:	28 0f       	add	r18, r24
     e5c:	39 1f       	adc	r19, r25
     e5e:	f9 01       	movw	r30, r18
     e60:	20 81       	ld	r18, Z
     e62:	4f ef       	ldi	r20, 0xFF	; 255
     e64:	42 0f       	add	r20, r18
     e66:	9e 01       	movw	r18, r28
     e68:	2f 5d       	subi	r18, 0xDF	; 223
     e6a:	3f 4f       	sbci	r19, 0xFF	; 255
     e6c:	82 0f       	add	r24, r18
     e6e:	93 1f       	adc	r25, r19
     e70:	fc 01       	movw	r30, r24
     e72:	40 83       	st	Z, r20
					CLCD_voidWriteNumber(Local_u8Numbers1[index]);
     e74:	8a 81       	ldd	r24, Y+2	; 0x02
     e76:	88 2f       	mov	r24, r24
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	9e 01       	movw	r18, r28
     e7c:	2f 5d       	subi	r18, 0xDF	; 223
     e7e:	3f 4f       	sbci	r19, 0xFF	; 255
     e80:	82 0f       	add	r24, r18
     e82:	93 1f       	adc	r25, r19
     e84:	fc 01       	movw	r30, r24
     e86:	80 81       	ld	r24, Z
     e88:	28 2f       	mov	r18, r24
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	40 e0       	ldi	r20, 0x00	; 0
     e8e:	50 e0       	ldi	r21, 0x00	; 0
     e90:	2e ab       	std	Y+54, r18	; 0x36
     e92:	3f ab       	std	Y+55, r19	; 0x37
     e94:	48 af       	std	Y+56, r20	; 0x38
     e96:	59 af       	std	Y+57, r21	; 0x39
     e98:	6e a9       	ldd	r22, Y+54	; 0x36
     e9a:	7f a9       	ldd	r23, Y+55	; 0x37
     e9c:	88 ad       	ldd	r24, Y+56	; 0x38
     e9e:	99 ad       	ldd	r25, Y+57	; 0x39
     ea0:	0e 94 e7 02 	call	0x5ce	; 0x5ce <CLCD_voidWriteNumber>
     ea4:	53 cf       	rjmp	.-346    	; 0xd4c <main+0xe2>
				}

			}
			/*Enter button*/
			else if(Local_u8button == '.')
     ea6:	8b 81       	ldd	r24, Y+3	; 0x03
     ea8:	8e 32       	cpi	r24, 0x2E	; 46
     eaa:	09 f0       	breq	.+2      	; 0xeae <main+0x244>
     eac:	4f cf       	rjmp	.-354    	; 0xd4c <main+0xe2>
			{
				Local_u8DigitPos ++;
     eae:	89 81       	ldd	r24, Y+1	; 0x01
     eb0:	8f 5f       	subi	r24, 0xFF	; 255
     eb2:	89 83       	std	Y+1, r24	; 0x01

				if(Local_u8DigitPos == 3)
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
     eb6:	83 30       	cpi	r24, 0x03	; 3
     eb8:	09 f4       	brne	.+2      	; 0xebc <main+0x252>
				{
					Local_u8DigitPos = 0;
     eba:	19 82       	std	Y+1, r1	; 0x01
				}

				/* delete the arrow */
				CLCD_voidWriteSpecialCharacter(&Local_u8DeleteArrow,1,1,0);
     ebc:	ce 01       	movw	r24, r28
     ebe:	0c 96       	adiw	r24, 0x0c	; 12
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	41 e0       	ldi	r20, 0x01	; 1
     ec4:	61 e0       	ldi	r22, 0x01	; 1
     ec6:	0e 94 ac 02 	call	0x558	; 0x558 <CLCD_voidWriteSpecialCharacter>

				CLCD_voidGoToXY(1,Local_u8DigitPos);
     eca:	69 81       	ldd	r22, Y+1	; 0x01
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	0e 94 8d 02 	call	0x51a	; 0x51a <CLCD_voidGoToXY>
				CLCD_voidWriteSpecialCharacter(&Local_u8Arrow,0,1,Local_u8DigitPos);
     ed2:	ce 01       	movw	r24, r28
     ed4:	04 96       	adiw	r24, 0x04	; 4
     ed6:	29 81       	ldd	r18, Y+1	; 0x01
     ed8:	41 e0       	ldi	r20, 0x01	; 1
     eda:	60 e0       	ldi	r22, 0x00	; 0
     edc:	0e 94 ac 02 	call	0x558	; 0x558 <CLCD_voidWriteSpecialCharacter>
     ee0:	35 cf       	rjmp	.-406    	; 0xd4c <main+0xe2>

			}
		}

		else if(Local_u8DigitPos == 1)
     ee2:	89 81       	ldd	r24, Y+1	; 0x01
     ee4:	81 30       	cpi	r24, 0x01	; 1
     ee6:	09 f0       	breq	.+2      	; 0xeea <main+0x280>
     ee8:	73 c0       	rjmp	.+230    	; 0xfd0 <main+0x366>
		{
			/* up button */
			if(Local_u8button == '+')
     eea:	8b 81       	ldd	r24, Y+3	; 0x03
     eec:	8b 32       	cpi	r24, 0x2B	; 43
     eee:	21 f5       	brne	.+72     	; 0xf38 <main+0x2ce>
			{
				CLCD_voidGoToXY(0,1);
     ef0:	61 e0       	ldi	r22, 0x01	; 1
     ef2:	80 e0       	ldi	r24, 0x00	; 0
     ef4:	0e 94 8d 02 	call	0x51a	; 0x51a <CLCD_voidGoToXY>
				index ++;
     ef8:	8a 81       	ldd	r24, Y+2	; 0x02
     efa:	8f 5f       	subi	r24, 0xFF	; 255
     efc:	8a 83       	std	Y+2, r24	; 0x02
				CLCD_voidSendData(Local_u8Operation[index]);
     efe:	8a 81       	ldd	r24, Y+2	; 0x02
     f00:	88 2f       	mov	r24, r24
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	9e 01       	movw	r18, r28
     f06:	2c 5e       	subi	r18, 0xEC	; 236
     f08:	3f 4f       	sbci	r19, 0xFF	; 255
     f0a:	82 0f       	add	r24, r18
     f0c:	93 1f       	adc	r25, r19
     f0e:	fc 01       	movw	r30, r24
     f10:	80 81       	ld	r24, Z
     f12:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <CLCD_voidSendData>

				/* limits the operation */
				if(Local_u8Operation[index] == '/' )
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	88 2f       	mov	r24, r24
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	9e 01       	movw	r18, r28
     f1e:	2c 5e       	subi	r18, 0xEC	; 236
     f20:	3f 4f       	sbci	r19, 0xFF	; 255
     f22:	82 0f       	add	r24, r18
     f24:	93 1f       	adc	r25, r19
     f26:	fc 01       	movw	r30, r24
     f28:	80 81       	ld	r24, Z
     f2a:	8f 32       	cpi	r24, 0x2F	; 47
     f2c:	09 f0       	breq	.+2      	; 0xf30 <main+0x2c6>
     f2e:	0e cf       	rjmp	.-484    	; 0xd4c <main+0xe2>
				{
					index -= 4;
     f30:	8a 81       	ldd	r24, Y+2	; 0x02
     f32:	84 50       	subi	r24, 0x04	; 4
     f34:	8a 83       	std	Y+2, r24	; 0x02
     f36:	0a cf       	rjmp	.-492    	; 0xd4c <main+0xe2>
					// tip: Local_u8Operation[index] -=3;
				}
			}
			/* down button */
			else if(Local_u8button == '-')
     f38:	8b 81       	ldd	r24, Y+3	; 0x03
     f3a:	8d 32       	cpi	r24, 0x2D	; 45
     f3c:	59 f5       	brne	.+86     	; 0xf94 <main+0x32a>
			{
				CLCD_voidGoToXY(0,1);
     f3e:	61 e0       	ldi	r22, 0x01	; 1
     f40:	80 e0       	ldi	r24, 0x00	; 0
     f42:	0e 94 8d 02 	call	0x51a	; 0x51a <CLCD_voidGoToXY>

				/*handle the operation if we clicked down*/
				if(Local_u8Operation[index] == '-' )
     f46:	8a 81       	ldd	r24, Y+2	; 0x02
     f48:	88 2f       	mov	r24, r24
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	9e 01       	movw	r18, r28
     f4e:	2c 5e       	subi	r18, 0xEC	; 236
     f50:	3f 4f       	sbci	r19, 0xFF	; 255
     f52:	82 0f       	add	r24, r18
     f54:	93 1f       	adc	r25, r19
     f56:	fc 01       	movw	r30, r24
     f58:	80 81       	ld	r24, Z
     f5a:	8d 32       	cpi	r24, 0x2D	; 45
     f5c:	59 f4       	brne	.+22     	; 0xf74 <main+0x30a>
				{
					//index += 4;
					Local_u8Operation[index] = '+';
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	88 2f       	mov	r24, r24
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	9e 01       	movw	r18, r28
     f66:	2c 5e       	subi	r18, 0xEC	; 236
     f68:	3f 4f       	sbci	r19, 0xFF	; 255
     f6a:	82 0f       	add	r24, r18
     f6c:	93 1f       	adc	r25, r19
     f6e:	2b e2       	ldi	r18, 0x2B	; 43
     f70:	fc 01       	movw	r30, r24
     f72:	20 83       	st	Z, r18

				}

				index --;
     f74:	8a 81       	ldd	r24, Y+2	; 0x02
     f76:	81 50       	subi	r24, 0x01	; 1
     f78:	8a 83       	std	Y+2, r24	; 0x02
				CLCD_voidSendData(Local_u8Operation[index]);
     f7a:	8a 81       	ldd	r24, Y+2	; 0x02
     f7c:	88 2f       	mov	r24, r24
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	9e 01       	movw	r18, r28
     f82:	2c 5e       	subi	r18, 0xEC	; 236
     f84:	3f 4f       	sbci	r19, 0xFF	; 255
     f86:	82 0f       	add	r24, r18
     f88:	93 1f       	adc	r25, r19
     f8a:	fc 01       	movw	r30, r24
     f8c:	80 81       	ld	r24, Z
     f8e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <CLCD_voidSendData>
     f92:	dc ce       	rjmp	.-584    	; 0xd4c <main+0xe2>
			}
			/*Enter button*/
			else if(Local_u8button == '.')
     f94:	8b 81       	ldd	r24, Y+3	; 0x03
     f96:	8e 32       	cpi	r24, 0x2E	; 46
     f98:	09 f0       	breq	.+2      	; 0xf9c <main+0x332>
     f9a:	d8 ce       	rjmp	.-592    	; 0xd4c <main+0xe2>
			{
				Local_u8DigitPos ++;
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
     f9e:	8f 5f       	subi	r24, 0xFF	; 255
     fa0:	89 83       	std	Y+1, r24	; 0x01

				if(Local_u8DigitPos == 3)
     fa2:	89 81       	ldd	r24, Y+1	; 0x01
     fa4:	83 30       	cpi	r24, 0x03	; 3
     fa6:	09 f4       	brne	.+2      	; 0xfaa <main+0x340>
				{
					Local_u8DigitPos = 0;
     fa8:	19 82       	std	Y+1, r1	; 0x01
				}

				/* delete the arrow */
				CLCD_voidWriteSpecialCharacter(&Local_u8DeleteArrow,1,1,1);
     faa:	ce 01       	movw	r24, r28
     fac:	0c 96       	adiw	r24, 0x0c	; 12
     fae:	21 e0       	ldi	r18, 0x01	; 1
     fb0:	41 e0       	ldi	r20, 0x01	; 1
     fb2:	61 e0       	ldi	r22, 0x01	; 1
     fb4:	0e 94 ac 02 	call	0x558	; 0x558 <CLCD_voidWriteSpecialCharacter>

				CLCD_voidGoToXY(1,Local_u8DigitPos);
     fb8:	69 81       	ldd	r22, Y+1	; 0x01
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	0e 94 8d 02 	call	0x51a	; 0x51a <CLCD_voidGoToXY>
				CLCD_voidWriteSpecialCharacter(&Local_u8Arrow,0,1,Local_u8DigitPos);
     fc0:	ce 01       	movw	r24, r28
     fc2:	04 96       	adiw	r24, 0x04	; 4
     fc4:	29 81       	ldd	r18, Y+1	; 0x01
     fc6:	41 e0       	ldi	r20, 0x01	; 1
     fc8:	60 e0       	ldi	r22, 0x00	; 0
     fca:	0e 94 ac 02 	call	0x558	; 0x558 <CLCD_voidWriteSpecialCharacter>
     fce:	be ce       	rjmp	.-644    	; 0xd4c <main+0xe2>
			}
		}

		else if(Local_u8DigitPos == 2)
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	82 30       	cpi	r24, 0x02	; 2
     fd4:	09 f0       	breq	.+2      	; 0xfd8 <main+0x36e>
     fd6:	c1 c1       	rjmp	.+898    	; 0x135a <main+0x6f0>
		{
			//result button
			if(Local_u8button == '=')
     fd8:	8b 81       	ldd	r24, Y+3	; 0x03
     fda:	8d 33       	cpi	r24, 0x3D	; 61
     fdc:	09 f0       	breq	.+2      	; 0xfe0 <main+0x376>
     fde:	2a c1       	rjmp	.+596    	; 0x1234 <main+0x5ca>
			{
				CLCD_voidGoToXY(0,3);
     fe0:	63 e0       	ldi	r22, 0x03	; 3
     fe2:	80 e0       	ldi	r24, 0x00	; 0
     fe4:	0e 94 8d 02 	call	0x51a	; 0x51a <CLCD_voidGoToXY>
				CLCD_voidSendData('=');
     fe8:	8d e3       	ldi	r24, 0x3D	; 61
     fea:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <CLCD_voidSendData>
				CLCD_voidGoToXY(0,4);
     fee:	64 e0       	ldi	r22, 0x04	; 4
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	0e 94 8d 02 	call	0x51a	; 0x51a <CLCD_voidGoToXY>

				/*calculte the expersion and show it */

				switch(Local_u8Operation[index])
     ff6:	8a 81       	ldd	r24, Y+2	; 0x02
     ff8:	88 2f       	mov	r24, r24
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	9e 01       	movw	r18, r28
     ffe:	2c 5e       	subi	r18, 0xEC	; 236
    1000:	3f 4f       	sbci	r19, 0xFF	; 255
    1002:	82 0f       	add	r24, r18
    1004:	93 1f       	adc	r25, r19
    1006:	fc 01       	movw	r30, r24
    1008:	80 81       	ld	r24, Z
    100a:	88 2f       	mov	r24, r24
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	8f 32       	cpi	r24, 0x2F	; 47
    1010:	91 05       	cpc	r25, r1
    1012:	09 f4       	brne	.+2      	; 0x1016 <main+0x3ac>
    1014:	e4 c0       	rjmp	.+456    	; 0x11de <main+0x574>
    1016:	80 33       	cpi	r24, 0x30	; 48
    1018:	91 05       	cpc	r25, r1
    101a:	0c f0       	brlt	.+2      	; 0x101e <main+0x3b4>
    101c:	97 ce       	rjmp	.-722    	; 0xd4c <main+0xe2>
    101e:	8d 32       	cpi	r24, 0x2D	; 45
    1020:	91 05       	cpc	r25, r1
    1022:	a1 f1       	breq	.+104    	; 0x108c <main+0x422>
    1024:	8e 32       	cpi	r24, 0x2E	; 46
    1026:	91 05       	cpc	r25, r1
    1028:	0c f0       	brlt	.+2      	; 0x102c <main+0x3c2>
    102a:	90 ce       	rjmp	.-736    	; 0xd4c <main+0xe2>
    102c:	8a 32       	cpi	r24, 0x2A	; 42
    102e:	91 05       	cpc	r25, r1
    1030:	09 f4       	brne	.+2      	; 0x1034 <main+0x3ca>
    1032:	a3 c0       	rjmp	.+326    	; 0x117a <main+0x510>
    1034:	8b 97       	sbiw	r24, 0x2b	; 43
    1036:	09 f0       	breq	.+2      	; 0x103a <main+0x3d0>
    1038:	89 ce       	rjmp	.-750    	; 0xd4c <main+0xe2>
				{
				case '+': CLCD_voidWriteNumber(Local_u8Numbers1[index] + Local_u8Numbers2[index]); break;
    103a:	8a 81       	ldd	r24, Y+2	; 0x02
    103c:	88 2f       	mov	r24, r24
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	9e 01       	movw	r18, r28
    1042:	2f 5d       	subi	r18, 0xDF	; 223
    1044:	3f 4f       	sbci	r19, 0xFF	; 255
    1046:	82 0f       	add	r24, r18
    1048:	93 1f       	adc	r25, r19
    104a:	fc 01       	movw	r30, r24
    104c:	80 81       	ld	r24, Z
    104e:	28 2f       	mov	r18, r24
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	8a 81       	ldd	r24, Y+2	; 0x02
    1054:	88 2f       	mov	r24, r24
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	ae 01       	movw	r20, r28
    105a:	48 5e       	subi	r20, 0xE8	; 232
    105c:	5f 4f       	sbci	r21, 0xFF	; 255
    105e:	84 0f       	add	r24, r20
    1060:	95 1f       	adc	r25, r21
    1062:	fc 01       	movw	r30, r24
    1064:	80 81       	ld	r24, Z
    1066:	88 2f       	mov	r24, r24
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	82 0f       	add	r24, r18
    106c:	93 1f       	adc	r25, r19
    106e:	9c 01       	movw	r18, r24
    1070:	99 0f       	add	r25, r25
    1072:	44 0b       	sbc	r20, r20
    1074:	55 0b       	sbc	r21, r21
    1076:	2a af       	std	Y+58, r18	; 0x3a
    1078:	3b af       	std	Y+59, r19	; 0x3b
    107a:	4c af       	std	Y+60, r20	; 0x3c
    107c:	5d af       	std	Y+61, r21	; 0x3d
    107e:	6a ad       	ldd	r22, Y+58	; 0x3a
    1080:	7b ad       	ldd	r23, Y+59	; 0x3b
    1082:	8c ad       	ldd	r24, Y+60	; 0x3c
    1084:	9d ad       	ldd	r25, Y+61	; 0x3d
    1086:	0e 94 e7 02 	call	0x5ce	; 0x5ce <CLCD_voidWriteNumber>
    108a:	a7 c1       	rjmp	.+846    	; 0x13da <main+0x770>
				case '-':
					/*handle  the negative */
					if(Local_u8Numbers1[index] < Local_u8Numbers2[index])
    108c:	8a 81       	ldd	r24, Y+2	; 0x02
    108e:	88 2f       	mov	r24, r24
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	9e 01       	movw	r18, r28
    1094:	2f 5d       	subi	r18, 0xDF	; 223
    1096:	3f 4f       	sbci	r19, 0xFF	; 255
    1098:	82 0f       	add	r24, r18
    109a:	93 1f       	adc	r25, r19
    109c:	fc 01       	movw	r30, r24
    109e:	40 81       	ld	r20, Z
    10a0:	8a 81       	ldd	r24, Y+2	; 0x02
    10a2:	88 2f       	mov	r24, r24
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	9e 01       	movw	r18, r28
    10a8:	28 5e       	subi	r18, 0xE8	; 232
    10aa:	3f 4f       	sbci	r19, 0xFF	; 255
    10ac:	82 0f       	add	r24, r18
    10ae:	93 1f       	adc	r25, r19
    10b0:	fc 01       	movw	r30, r24
    10b2:	80 81       	ld	r24, Z
    10b4:	48 17       	cp	r20, r24
    10b6:	90 f5       	brcc	.+100    	; 0x111c <main+0x4b2>
					{
						CLCD_voidSendData('-');
    10b8:	8d e2       	ldi	r24, 0x2D	; 45
    10ba:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <CLCD_voidSendData>
						CLCD_voidWriteNumber(Local_u8Numbers2[index] - Local_u8Numbers1[index]); break;
    10be:	8a 81       	ldd	r24, Y+2	; 0x02
    10c0:	88 2f       	mov	r24, r24
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	9e 01       	movw	r18, r28
    10c6:	28 5e       	subi	r18, 0xE8	; 232
    10c8:	3f 4f       	sbci	r19, 0xFF	; 255
    10ca:	82 0f       	add	r24, r18
    10cc:	93 1f       	adc	r25, r19
    10ce:	fc 01       	movw	r30, r24
    10d0:	80 81       	ld	r24, Z
    10d2:	28 2f       	mov	r18, r24
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	8a 81       	ldd	r24, Y+2	; 0x02
    10d8:	88 2f       	mov	r24, r24
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	ae 01       	movw	r20, r28
    10de:	4f 5d       	subi	r20, 0xDF	; 223
    10e0:	5f 4f       	sbci	r21, 0xFF	; 255
    10e2:	84 0f       	add	r24, r20
    10e4:	95 1f       	adc	r25, r21
    10e6:	fc 01       	movw	r30, r24
    10e8:	80 81       	ld	r24, Z
    10ea:	88 2f       	mov	r24, r24
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	a9 01       	movw	r20, r18
    10f0:	48 1b       	sub	r20, r24
    10f2:	59 0b       	sbc	r21, r25
    10f4:	ca 01       	movw	r24, r20
    10f6:	9c 01       	movw	r18, r24
    10f8:	99 0f       	add	r25, r25
    10fa:	44 0b       	sbc	r20, r20
    10fc:	55 0b       	sbc	r21, r21
    10fe:	22 96       	adiw	r28, 0x02	; 2
    1100:	2c af       	std	Y+60, r18	; 0x3c
    1102:	3d af       	std	Y+61, r19	; 0x3d
    1104:	4e af       	std	Y+62, r20	; 0x3e
    1106:	5f af       	std	Y+63, r21	; 0x3f
    1108:	22 97       	sbiw	r28, 0x02	; 2
    110a:	22 96       	adiw	r28, 0x02	; 2
    110c:	6c ad       	ldd	r22, Y+60	; 0x3c
    110e:	7d ad       	ldd	r23, Y+61	; 0x3d
    1110:	8e ad       	ldd	r24, Y+62	; 0x3e
    1112:	9f ad       	ldd	r25, Y+63	; 0x3f
    1114:	22 97       	sbiw	r28, 0x02	; 2
    1116:	0e 94 e7 02 	call	0x5ce	; 0x5ce <CLCD_voidWriteNumber>
    111a:	5f c1       	rjmp	.+702    	; 0x13da <main+0x770>
					}
					else
					{
						CLCD_voidWriteNumber(Local_u8Numbers1[index] - Local_u8Numbers2[index]); break;
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	88 2f       	mov	r24, r24
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	9e 01       	movw	r18, r28
    1124:	2f 5d       	subi	r18, 0xDF	; 223
    1126:	3f 4f       	sbci	r19, 0xFF	; 255
    1128:	82 0f       	add	r24, r18
    112a:	93 1f       	adc	r25, r19
    112c:	fc 01       	movw	r30, r24
    112e:	80 81       	ld	r24, Z
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	88 2f       	mov	r24, r24
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	ae 01       	movw	r20, r28
    113c:	48 5e       	subi	r20, 0xE8	; 232
    113e:	5f 4f       	sbci	r21, 0xFF	; 255
    1140:	84 0f       	add	r24, r20
    1142:	95 1f       	adc	r25, r21
    1144:	fc 01       	movw	r30, r24
    1146:	80 81       	ld	r24, Z
    1148:	88 2f       	mov	r24, r24
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	a9 01       	movw	r20, r18
    114e:	48 1b       	sub	r20, r24
    1150:	59 0b       	sbc	r21, r25
    1152:	ca 01       	movw	r24, r20
    1154:	9c 01       	movw	r18, r24
    1156:	99 0f       	add	r25, r25
    1158:	44 0b       	sbc	r20, r20
    115a:	55 0b       	sbc	r21, r21
    115c:	26 96       	adiw	r28, 0x06	; 6
    115e:	2c af       	std	Y+60, r18	; 0x3c
    1160:	3d af       	std	Y+61, r19	; 0x3d
    1162:	4e af       	std	Y+62, r20	; 0x3e
    1164:	5f af       	std	Y+63, r21	; 0x3f
    1166:	26 97       	sbiw	r28, 0x06	; 6
    1168:	26 96       	adiw	r28, 0x06	; 6
    116a:	6c ad       	ldd	r22, Y+60	; 0x3c
    116c:	7d ad       	ldd	r23, Y+61	; 0x3d
    116e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1170:	9f ad       	ldd	r25, Y+63	; 0x3f
    1172:	26 97       	sbiw	r28, 0x06	; 6
    1174:	0e 94 e7 02 	call	0x5ce	; 0x5ce <CLCD_voidWriteNumber>
    1178:	30 c1       	rjmp	.+608    	; 0x13da <main+0x770>
					}

				case '*': CLCD_voidWriteNumber(Local_u8Numbers1[index] * Local_u8Numbers2[index]); break;
    117a:	8a 81       	ldd	r24, Y+2	; 0x02
    117c:	88 2f       	mov	r24, r24
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	9e 01       	movw	r18, r28
    1182:	2f 5d       	subi	r18, 0xDF	; 223
    1184:	3f 4f       	sbci	r19, 0xFF	; 255
    1186:	82 0f       	add	r24, r18
    1188:	93 1f       	adc	r25, r19
    118a:	fc 01       	movw	r30, r24
    118c:	80 81       	ld	r24, Z
    118e:	48 2f       	mov	r20, r24
    1190:	50 e0       	ldi	r21, 0x00	; 0
    1192:	8a 81       	ldd	r24, Y+2	; 0x02
    1194:	88 2f       	mov	r24, r24
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	9e 01       	movw	r18, r28
    119a:	28 5e       	subi	r18, 0xE8	; 232
    119c:	3f 4f       	sbci	r19, 0xFF	; 255
    119e:	82 0f       	add	r24, r18
    11a0:	93 1f       	adc	r25, r19
    11a2:	fc 01       	movw	r30, r24
    11a4:	80 81       	ld	r24, Z
    11a6:	28 2f       	mov	r18, r24
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	42 9f       	mul	r20, r18
    11ac:	c0 01       	movw	r24, r0
    11ae:	43 9f       	mul	r20, r19
    11b0:	90 0d       	add	r25, r0
    11b2:	52 9f       	mul	r21, r18
    11b4:	90 0d       	add	r25, r0
    11b6:	11 24       	eor	r1, r1
    11b8:	9c 01       	movw	r18, r24
    11ba:	99 0f       	add	r25, r25
    11bc:	44 0b       	sbc	r20, r20
    11be:	55 0b       	sbc	r21, r21
    11c0:	2a 96       	adiw	r28, 0x0a	; 10
    11c2:	2c af       	std	Y+60, r18	; 0x3c
    11c4:	3d af       	std	Y+61, r19	; 0x3d
    11c6:	4e af       	std	Y+62, r20	; 0x3e
    11c8:	5f af       	std	Y+63, r21	; 0x3f
    11ca:	2a 97       	sbiw	r28, 0x0a	; 10
    11cc:	2a 96       	adiw	r28, 0x0a	; 10
    11ce:	6c ad       	ldd	r22, Y+60	; 0x3c
    11d0:	7d ad       	ldd	r23, Y+61	; 0x3d
    11d2:	8e ad       	ldd	r24, Y+62	; 0x3e
    11d4:	9f ad       	ldd	r25, Y+63	; 0x3f
    11d6:	2a 97       	sbiw	r28, 0x0a	; 10
    11d8:	0e 94 e7 02 	call	0x5ce	; 0x5ce <CLCD_voidWriteNumber>
    11dc:	fe c0       	rjmp	.+508    	; 0x13da <main+0x770>
				case '/':
					/*handle  the negative and floating numbers*/

					CLCD_voidWriteNumber(Local_u8Numbers1[index] / Local_u8Numbers2[index]); break;
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
    11e0:	88 2f       	mov	r24, r24
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	9e 01       	movw	r18, r28
    11e6:	2f 5d       	subi	r18, 0xDF	; 223
    11e8:	3f 4f       	sbci	r19, 0xFF	; 255
    11ea:	82 0f       	add	r24, r18
    11ec:	93 1f       	adc	r25, r19
    11ee:	fc 01       	movw	r30, r24
    11f0:	40 81       	ld	r20, Z
    11f2:	8a 81       	ldd	r24, Y+2	; 0x02
    11f4:	88 2f       	mov	r24, r24
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	9e 01       	movw	r18, r28
    11fa:	28 5e       	subi	r18, 0xE8	; 232
    11fc:	3f 4f       	sbci	r19, 0xFF	; 255
    11fe:	82 0f       	add	r24, r18
    1200:	93 1f       	adc	r25, r19
    1202:	fc 01       	movw	r30, r24
    1204:	90 81       	ld	r25, Z
    1206:	84 2f       	mov	r24, r20
    1208:	69 2f       	mov	r22, r25
    120a:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__udivmodqi4>
    120e:	28 2f       	mov	r18, r24
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	40 e0       	ldi	r20, 0x00	; 0
    1214:	50 e0       	ldi	r21, 0x00	; 0
    1216:	2e 96       	adiw	r28, 0x0e	; 14
    1218:	2c af       	std	Y+60, r18	; 0x3c
    121a:	3d af       	std	Y+61, r19	; 0x3d
    121c:	4e af       	std	Y+62, r20	; 0x3e
    121e:	5f af       	std	Y+63, r21	; 0x3f
    1220:	2e 97       	sbiw	r28, 0x0e	; 14
    1222:	2e 96       	adiw	r28, 0x0e	; 14
    1224:	6c ad       	ldd	r22, Y+60	; 0x3c
    1226:	7d ad       	ldd	r23, Y+61	; 0x3d
    1228:	8e ad       	ldd	r24, Y+62	; 0x3e
    122a:	9f ad       	ldd	r25, Y+63	; 0x3f
    122c:	2e 97       	sbiw	r28, 0x0e	; 14
    122e:	0e 94 e7 02 	call	0x5ce	; 0x5ce <CLCD_voidWriteNumber>
    1232:	d3 c0       	rjmp	.+422    	; 0x13da <main+0x770>
				}
			}

			//up button
			else if(Local_u8button == '+')
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	8b 32       	cpi	r24, 0x2B	; 43
    1238:	09 f0       	breq	.+2      	; 0x123c <main+0x5d2>
    123a:	57 c0       	rjmp	.+174    	; 0x12ea <main+0x680>
			{
				CLCD_voidGoToXY(0,Local_u8DigitPos);
    123c:	69 81       	ldd	r22, Y+1	; 0x01
    123e:	80 e0       	ldi	r24, 0x00	; 0
    1240:	0e 94 8d 02 	call	0x51a	; 0x51a <CLCD_voidGoToXY>
				Local_u8Numbers2[index] ++;
    1244:	8a 81       	ldd	r24, Y+2	; 0x02
    1246:	88 2f       	mov	r24, r24
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	9e 01       	movw	r18, r28
    124c:	28 5e       	subi	r18, 0xE8	; 232
    124e:	3f 4f       	sbci	r19, 0xFF	; 255
    1250:	28 0f       	add	r18, r24
    1252:	39 1f       	adc	r19, r25
    1254:	f9 01       	movw	r30, r18
    1256:	20 81       	ld	r18, Z
    1258:	41 e0       	ldi	r20, 0x01	; 1
    125a:	42 0f       	add	r20, r18
    125c:	9e 01       	movw	r18, r28
    125e:	28 5e       	subi	r18, 0xE8	; 232
    1260:	3f 4f       	sbci	r19, 0xFF	; 255
    1262:	82 0f       	add	r24, r18
    1264:	93 1f       	adc	r25, r19
    1266:	fc 01       	movw	r30, r24
    1268:	40 83       	st	Z, r20
				CLCD_voidWriteNumber(Local_u8Numbers2[index]);
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	88 2f       	mov	r24, r24
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	9e 01       	movw	r18, r28
    1272:	28 5e       	subi	r18, 0xE8	; 232
    1274:	3f 4f       	sbci	r19, 0xFF	; 255
    1276:	82 0f       	add	r24, r18
    1278:	93 1f       	adc	r25, r19
    127a:	fc 01       	movw	r30, r24
    127c:	80 81       	ld	r24, Z
    127e:	28 2f       	mov	r18, r24
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	40 e0       	ldi	r20, 0x00	; 0
    1284:	50 e0       	ldi	r21, 0x00	; 0
    1286:	62 96       	adiw	r28, 0x12	; 18
    1288:	2c af       	std	Y+60, r18	; 0x3c
    128a:	3d af       	std	Y+61, r19	; 0x3d
    128c:	4e af       	std	Y+62, r20	; 0x3e
    128e:	5f af       	std	Y+63, r21	; 0x3f
    1290:	62 97       	sbiw	r28, 0x12	; 18
    1292:	62 96       	adiw	r28, 0x12	; 18
    1294:	6c ad       	ldd	r22, Y+60	; 0x3c
    1296:	7d ad       	ldd	r23, Y+61	; 0x3d
    1298:	8e ad       	ldd	r24, Y+62	; 0x3e
    129a:	9f ad       	ldd	r25, Y+63	; 0x3f
    129c:	62 97       	sbiw	r28, 0x12	; 18
    129e:	0e 94 e7 02 	call	0x5ce	; 0x5ce <CLCD_voidWriteNumber>

				/* Limits the numbers to 9*/
				if(Local_u8Numbers2[index] == 9)
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	88 2f       	mov	r24, r24
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	9e 01       	movw	r18, r28
    12aa:	28 5e       	subi	r18, 0xE8	; 232
    12ac:	3f 4f       	sbci	r19, 0xFF	; 255
    12ae:	82 0f       	add	r24, r18
    12b0:	93 1f       	adc	r25, r19
    12b2:	fc 01       	movw	r30, r24
    12b4:	80 81       	ld	r24, Z
    12b6:	89 30       	cpi	r24, 0x09	; 9
    12b8:	09 f0       	breq	.+2      	; 0x12bc <main+0x652>
    12ba:	48 cd       	rjmp	.-1392   	; 0xd4c <main+0xe2>
				{
					//index = 0;
					Local_u8Numbers2[index] -=9;
    12bc:	8a 81       	ldd	r24, Y+2	; 0x02
    12be:	88 2f       	mov	r24, r24
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	9e 01       	movw	r18, r28
    12c4:	28 5e       	subi	r18, 0xE8	; 232
    12c6:	3f 4f       	sbci	r19, 0xFF	; 255
    12c8:	82 0f       	add	r24, r18
    12ca:	93 1f       	adc	r25, r19
    12cc:	fc 01       	movw	r30, r24
    12ce:	20 81       	ld	r18, Z
    12d0:	8a 81       	ldd	r24, Y+2	; 0x02
    12d2:	88 2f       	mov	r24, r24
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	47 ef       	ldi	r20, 0xF7	; 247
    12d8:	42 0f       	add	r20, r18
    12da:	9e 01       	movw	r18, r28
    12dc:	28 5e       	subi	r18, 0xE8	; 232
    12de:	3f 4f       	sbci	r19, 0xFF	; 255
    12e0:	82 0f       	add	r24, r18
    12e2:	93 1f       	adc	r25, r19
    12e4:	fc 01       	movw	r30, r24
    12e6:	40 83       	st	Z, r20
    12e8:	31 cd       	rjmp	.-1438   	; 0xd4c <main+0xe2>
				}
			}

			//down button
			else if(Local_u8button == '-')
    12ea:	8b 81       	ldd	r24, Y+3	; 0x03
    12ec:	8d 32       	cpi	r24, 0x2D	; 45
    12ee:	09 f0       	breq	.+2      	; 0x12f2 <main+0x688>
    12f0:	2d cd       	rjmp	.-1446   	; 0xd4c <main+0xe2>
			{
				CLCD_voidGoToXY(0,Local_u8DigitPos);
    12f2:	69 81       	ldd	r22, Y+1	; 0x01
    12f4:	80 e0       	ldi	r24, 0x00	; 0
    12f6:	0e 94 8d 02 	call	0x51a	; 0x51a <CLCD_voidGoToXY>
				Local_u8Numbers2[index] --;
    12fa:	8a 81       	ldd	r24, Y+2	; 0x02
    12fc:	88 2f       	mov	r24, r24
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	9e 01       	movw	r18, r28
    1302:	28 5e       	subi	r18, 0xE8	; 232
    1304:	3f 4f       	sbci	r19, 0xFF	; 255
    1306:	28 0f       	add	r18, r24
    1308:	39 1f       	adc	r19, r25
    130a:	f9 01       	movw	r30, r18
    130c:	20 81       	ld	r18, Z
    130e:	4f ef       	ldi	r20, 0xFF	; 255
    1310:	42 0f       	add	r20, r18
    1312:	9e 01       	movw	r18, r28
    1314:	28 5e       	subi	r18, 0xE8	; 232
    1316:	3f 4f       	sbci	r19, 0xFF	; 255
    1318:	82 0f       	add	r24, r18
    131a:	93 1f       	adc	r25, r19
    131c:	fc 01       	movw	r30, r24
    131e:	40 83       	st	Z, r20
				CLCD_voidWriteNumber(Local_u8Numbers2[index]);
    1320:	8a 81       	ldd	r24, Y+2	; 0x02
    1322:	88 2f       	mov	r24, r24
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	9e 01       	movw	r18, r28
    1328:	28 5e       	subi	r18, 0xE8	; 232
    132a:	3f 4f       	sbci	r19, 0xFF	; 255
    132c:	82 0f       	add	r24, r18
    132e:	93 1f       	adc	r25, r19
    1330:	fc 01       	movw	r30, r24
    1332:	80 81       	ld	r24, Z
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	40 e0       	ldi	r20, 0x00	; 0
    133a:	50 e0       	ldi	r21, 0x00	; 0
    133c:	66 96       	adiw	r28, 0x16	; 22
    133e:	2c af       	std	Y+60, r18	; 0x3c
    1340:	3d af       	std	Y+61, r19	; 0x3d
    1342:	4e af       	std	Y+62, r20	; 0x3e
    1344:	5f af       	std	Y+63, r21	; 0x3f
    1346:	66 97       	sbiw	r28, 0x16	; 22
    1348:	66 96       	adiw	r28, 0x16	; 22
    134a:	6c ad       	ldd	r22, Y+60	; 0x3c
    134c:	7d ad       	ldd	r23, Y+61	; 0x3d
    134e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1350:	9f ad       	ldd	r25, Y+63	; 0x3f
    1352:	66 97       	sbiw	r28, 0x16	; 22
    1354:	0e 94 e7 02 	call	0x5ce	; 0x5ce <CLCD_voidWriteNumber>
    1358:	f9 cc       	rjmp	.-1550   	; 0xd4c <main+0xe2>

		}



		else if(Local_u8button == '5')
    135a:	8b 81       	ldd	r24, Y+3	; 0x03
    135c:	85 33       	cpi	r24, 0x35	; 53
    135e:	09 f0       	breq	.+2      	; 0x1362 <main+0x6f8>
    1360:	f5 cc       	rjmp	.-1558   	; 0xd4c <main+0xe2>
		{
			/*Reset button*/
			/*Display first Digit*/
			CLCD_voidGoToXY(0,Local_u8DigitPos);
    1362:	69 81       	ldd	r22, Y+1	; 0x01
    1364:	80 e0       	ldi	r24, 0x00	; 0
    1366:	0e 94 8d 02 	call	0x51a	; 0x51a <CLCD_voidGoToXY>
			CLCD_voidWriteNumber(Local_u8Numbers1[0]);
    136a:	89 a1       	ldd	r24, Y+33	; 0x21
    136c:	28 2f       	mov	r18, r24
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	40 e0       	ldi	r20, 0x00	; 0
    1372:	50 e0       	ldi	r21, 0x00	; 0
    1374:	6a 96       	adiw	r28, 0x1a	; 26
    1376:	2c af       	std	Y+60, r18	; 0x3c
    1378:	3d af       	std	Y+61, r19	; 0x3d
    137a:	4e af       	std	Y+62, r20	; 0x3e
    137c:	5f af       	std	Y+63, r21	; 0x3f
    137e:	6a 97       	sbiw	r28, 0x1a	; 26
    1380:	6a 96       	adiw	r28, 0x1a	; 26
    1382:	6c ad       	ldd	r22, Y+60	; 0x3c
    1384:	7d ad       	ldd	r23, Y+61	; 0x3d
    1386:	8e ad       	ldd	r24, Y+62	; 0x3e
    1388:	9f ad       	ldd	r25, Y+63	; 0x3f
    138a:	6a 97       	sbiw	r28, 0x1a	; 26
    138c:	0e 94 e7 02 	call	0x5ce	; 0x5ce <CLCD_voidWriteNumber>

			/*Display the arrow on the first digit*/
			CLCD_voidWriteSpecialCharacter(&Local_u8Arrow,0,1,0);
    1390:	ce 01       	movw	r24, r28
    1392:	04 96       	adiw	r24, 0x04	; 4
    1394:	20 e0       	ldi	r18, 0x00	; 0
    1396:	41 e0       	ldi	r20, 0x01	; 1
    1398:	60 e0       	ldi	r22, 0x00	; 0
    139a:	0e 94 ac 02 	call	0x558	; 0x558 <CLCD_voidWriteSpecialCharacter>

			/*Display the initial operation*/
			CLCD_voidGoToXY(0,1);
    139e:	61 e0       	ldi	r22, 0x01	; 1
    13a0:	80 e0       	ldi	r24, 0x00	; 0
    13a2:	0e 94 8d 02 	call	0x51a	; 0x51a <CLCD_voidGoToXY>
			CLCD_voidSendData('+');
    13a6:	8b e2       	ldi	r24, 0x2B	; 43
    13a8:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <CLCD_voidSendData>

			/*Display the second digit*/
			CLCD_voidGoToXY(0,2);
    13ac:	62 e0       	ldi	r22, 0x02	; 2
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	0e 94 8d 02 	call	0x51a	; 0x51a <CLCD_voidGoToXY>
			CLCD_voidWriteNumber(Local_u8Numbers2[0]);
    13b4:	88 8d       	ldd	r24, Y+24	; 0x18
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	40 e0       	ldi	r20, 0x00	; 0
    13bc:	50 e0       	ldi	r21, 0x00	; 0
    13be:	6e 96       	adiw	r28, 0x1e	; 30
    13c0:	2c af       	std	Y+60, r18	; 0x3c
    13c2:	3d af       	std	Y+61, r19	; 0x3d
    13c4:	4e af       	std	Y+62, r20	; 0x3e
    13c6:	5f af       	std	Y+63, r21	; 0x3f
    13c8:	6e 97       	sbiw	r28, 0x1e	; 30
    13ca:	6e 96       	adiw	r28, 0x1e	; 30
    13cc:	6c ad       	ldd	r22, Y+60	; 0x3c
    13ce:	7d ad       	ldd	r23, Y+61	; 0x3d
    13d0:	8e ad       	ldd	r24, Y+62	; 0x3e
    13d2:	9f ad       	ldd	r25, Y+63	; 0x3f
    13d4:	6e 97       	sbiw	r28, 0x1e	; 30
    13d6:	0e 94 e7 02 	call	0x5ce	; 0x5ce <CLCD_voidWriteNumber>
	/*Display the second digit*/
	CLCD_voidGoToXY(0,2);
	CLCD_voidWriteNumber(Local_u8Numbers2[0]);


	while(1)
    13da:	b8 cc       	rjmp	.-1680   	; 0xd4c <main+0xe2>

000013dc <__udivmodqi4>:
    13dc:	99 1b       	sub	r25, r25
    13de:	79 e0       	ldi	r23, 0x09	; 9
    13e0:	04 c0       	rjmp	.+8      	; 0x13ea <__udivmodqi4_ep>

000013e2 <__udivmodqi4_loop>:
    13e2:	99 1f       	adc	r25, r25
    13e4:	96 17       	cp	r25, r22
    13e6:	08 f0       	brcs	.+2      	; 0x13ea <__udivmodqi4_ep>
    13e8:	96 1b       	sub	r25, r22

000013ea <__udivmodqi4_ep>:
    13ea:	88 1f       	adc	r24, r24
    13ec:	7a 95       	dec	r23
    13ee:	c9 f7       	brne	.-14     	; 0x13e2 <__udivmodqi4_loop>
    13f0:	80 95       	com	r24
    13f2:	08 95       	ret

000013f4 <__udivmodsi4>:
    13f4:	a1 e2       	ldi	r26, 0x21	; 33
    13f6:	1a 2e       	mov	r1, r26
    13f8:	aa 1b       	sub	r26, r26
    13fa:	bb 1b       	sub	r27, r27
    13fc:	fd 01       	movw	r30, r26
    13fe:	0d c0       	rjmp	.+26     	; 0x141a <__udivmodsi4_ep>

00001400 <__udivmodsi4_loop>:
    1400:	aa 1f       	adc	r26, r26
    1402:	bb 1f       	adc	r27, r27
    1404:	ee 1f       	adc	r30, r30
    1406:	ff 1f       	adc	r31, r31
    1408:	a2 17       	cp	r26, r18
    140a:	b3 07       	cpc	r27, r19
    140c:	e4 07       	cpc	r30, r20
    140e:	f5 07       	cpc	r31, r21
    1410:	20 f0       	brcs	.+8      	; 0x141a <__udivmodsi4_ep>
    1412:	a2 1b       	sub	r26, r18
    1414:	b3 0b       	sbc	r27, r19
    1416:	e4 0b       	sbc	r30, r20
    1418:	f5 0b       	sbc	r31, r21

0000141a <__udivmodsi4_ep>:
    141a:	66 1f       	adc	r22, r22
    141c:	77 1f       	adc	r23, r23
    141e:	88 1f       	adc	r24, r24
    1420:	99 1f       	adc	r25, r25
    1422:	1a 94       	dec	r1
    1424:	69 f7       	brne	.-38     	; 0x1400 <__udivmodsi4_loop>
    1426:	60 95       	com	r22
    1428:	70 95       	com	r23
    142a:	80 95       	com	r24
    142c:	90 95       	com	r25
    142e:	9b 01       	movw	r18, r22
    1430:	ac 01       	movw	r20, r24
    1432:	bd 01       	movw	r22, r26
    1434:	cf 01       	movw	r24, r30
    1436:	08 95       	ret

00001438 <__cmpsf2>:
    1438:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__fp_cmp>
    143c:	08 f4       	brcc	.+2      	; 0x1440 <__cmpsf2+0x8>
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	08 95       	ret

00001442 <__fixunssfsi>:
    1442:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <__fp_splitA>
    1446:	88 f0       	brcs	.+34     	; 0x146a <__fixunssfsi+0x28>
    1448:	9f 57       	subi	r25, 0x7F	; 127
    144a:	98 f0       	brcs	.+38     	; 0x1472 <__fixunssfsi+0x30>
    144c:	b9 2f       	mov	r27, r25
    144e:	99 27       	eor	r25, r25
    1450:	b7 51       	subi	r27, 0x17	; 23
    1452:	b0 f0       	brcs	.+44     	; 0x1480 <__fixunssfsi+0x3e>
    1454:	e1 f0       	breq	.+56     	; 0x148e <__fixunssfsi+0x4c>
    1456:	66 0f       	add	r22, r22
    1458:	77 1f       	adc	r23, r23
    145a:	88 1f       	adc	r24, r24
    145c:	99 1f       	adc	r25, r25
    145e:	1a f0       	brmi	.+6      	; 0x1466 <__fixunssfsi+0x24>
    1460:	ba 95       	dec	r27
    1462:	c9 f7       	brne	.-14     	; 0x1456 <__fixunssfsi+0x14>
    1464:	14 c0       	rjmp	.+40     	; 0x148e <__fixunssfsi+0x4c>
    1466:	b1 30       	cpi	r27, 0x01	; 1
    1468:	91 f0       	breq	.+36     	; 0x148e <__fixunssfsi+0x4c>
    146a:	0e 94 96 0a 	call	0x152c	; 0x152c <__fp_zero>
    146e:	b1 e0       	ldi	r27, 0x01	; 1
    1470:	08 95       	ret
    1472:	0c 94 96 0a 	jmp	0x152c	; 0x152c <__fp_zero>
    1476:	67 2f       	mov	r22, r23
    1478:	78 2f       	mov	r23, r24
    147a:	88 27       	eor	r24, r24
    147c:	b8 5f       	subi	r27, 0xF8	; 248
    147e:	39 f0       	breq	.+14     	; 0x148e <__fixunssfsi+0x4c>
    1480:	b9 3f       	cpi	r27, 0xF9	; 249
    1482:	cc f3       	brlt	.-14     	; 0x1476 <__fixunssfsi+0x34>
    1484:	86 95       	lsr	r24
    1486:	77 95       	ror	r23
    1488:	67 95       	ror	r22
    148a:	b3 95       	inc	r27
    148c:	d9 f7       	brne	.-10     	; 0x1484 <__fixunssfsi+0x42>
    148e:	3e f4       	brtc	.+14     	; 0x149e <__fixunssfsi+0x5c>
    1490:	90 95       	com	r25
    1492:	80 95       	com	r24
    1494:	70 95       	com	r23
    1496:	61 95       	neg	r22
    1498:	7f 4f       	sbci	r23, 0xFF	; 255
    149a:	8f 4f       	sbci	r24, 0xFF	; 255
    149c:	9f 4f       	sbci	r25, 0xFF	; 255
    149e:	08 95       	ret

000014a0 <__fp_cmp>:
    14a0:	99 0f       	add	r25, r25
    14a2:	00 08       	sbc	r0, r0
    14a4:	55 0f       	add	r21, r21
    14a6:	aa 0b       	sbc	r26, r26
    14a8:	e0 e8       	ldi	r30, 0x80	; 128
    14aa:	fe ef       	ldi	r31, 0xFE	; 254
    14ac:	16 16       	cp	r1, r22
    14ae:	17 06       	cpc	r1, r23
    14b0:	e8 07       	cpc	r30, r24
    14b2:	f9 07       	cpc	r31, r25
    14b4:	c0 f0       	brcs	.+48     	; 0x14e6 <__fp_cmp+0x46>
    14b6:	12 16       	cp	r1, r18
    14b8:	13 06       	cpc	r1, r19
    14ba:	e4 07       	cpc	r30, r20
    14bc:	f5 07       	cpc	r31, r21
    14be:	98 f0       	brcs	.+38     	; 0x14e6 <__fp_cmp+0x46>
    14c0:	62 1b       	sub	r22, r18
    14c2:	73 0b       	sbc	r23, r19
    14c4:	84 0b       	sbc	r24, r20
    14c6:	95 0b       	sbc	r25, r21
    14c8:	39 f4       	brne	.+14     	; 0x14d8 <__fp_cmp+0x38>
    14ca:	0a 26       	eor	r0, r26
    14cc:	61 f0       	breq	.+24     	; 0x14e6 <__fp_cmp+0x46>
    14ce:	23 2b       	or	r18, r19
    14d0:	24 2b       	or	r18, r20
    14d2:	25 2b       	or	r18, r21
    14d4:	21 f4       	brne	.+8      	; 0x14de <__fp_cmp+0x3e>
    14d6:	08 95       	ret
    14d8:	0a 26       	eor	r0, r26
    14da:	09 f4       	brne	.+2      	; 0x14de <__fp_cmp+0x3e>
    14dc:	a1 40       	sbci	r26, 0x01	; 1
    14de:	a6 95       	lsr	r26
    14e0:	8f ef       	ldi	r24, 0xFF	; 255
    14e2:	81 1d       	adc	r24, r1
    14e4:	81 1d       	adc	r24, r1
    14e6:	08 95       	ret

000014e8 <__fp_split3>:
    14e8:	57 fd       	sbrc	r21, 7
    14ea:	90 58       	subi	r25, 0x80	; 128
    14ec:	44 0f       	add	r20, r20
    14ee:	55 1f       	adc	r21, r21
    14f0:	59 f0       	breq	.+22     	; 0x1508 <__fp_splitA+0x10>
    14f2:	5f 3f       	cpi	r21, 0xFF	; 255
    14f4:	71 f0       	breq	.+28     	; 0x1512 <__fp_splitA+0x1a>
    14f6:	47 95       	ror	r20

000014f8 <__fp_splitA>:
    14f8:	88 0f       	add	r24, r24
    14fa:	97 fb       	bst	r25, 7
    14fc:	99 1f       	adc	r25, r25
    14fe:	61 f0       	breq	.+24     	; 0x1518 <__fp_splitA+0x20>
    1500:	9f 3f       	cpi	r25, 0xFF	; 255
    1502:	79 f0       	breq	.+30     	; 0x1522 <__fp_splitA+0x2a>
    1504:	87 95       	ror	r24
    1506:	08 95       	ret
    1508:	12 16       	cp	r1, r18
    150a:	13 06       	cpc	r1, r19
    150c:	14 06       	cpc	r1, r20
    150e:	55 1f       	adc	r21, r21
    1510:	f2 cf       	rjmp	.-28     	; 0x14f6 <__fp_split3+0xe>
    1512:	46 95       	lsr	r20
    1514:	f1 df       	rcall	.-30     	; 0x14f8 <__fp_splitA>
    1516:	08 c0       	rjmp	.+16     	; 0x1528 <__fp_splitA+0x30>
    1518:	16 16       	cp	r1, r22
    151a:	17 06       	cpc	r1, r23
    151c:	18 06       	cpc	r1, r24
    151e:	99 1f       	adc	r25, r25
    1520:	f1 cf       	rjmp	.-30     	; 0x1504 <__fp_splitA+0xc>
    1522:	86 95       	lsr	r24
    1524:	71 05       	cpc	r23, r1
    1526:	61 05       	cpc	r22, r1
    1528:	08 94       	sec
    152a:	08 95       	ret

0000152c <__fp_zero>:
    152c:	e8 94       	clt

0000152e <__fp_szero>:
    152e:	bb 27       	eor	r27, r27
    1530:	66 27       	eor	r22, r22
    1532:	77 27       	eor	r23, r23
    1534:	cb 01       	movw	r24, r22
    1536:	97 f9       	bld	r25, 7
    1538:	08 95       	ret

0000153a <__gesf2>:
    153a:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__fp_cmp>
    153e:	08 f4       	brcc	.+2      	; 0x1542 <__gesf2+0x8>
    1540:	8f ef       	ldi	r24, 0xFF	; 255
    1542:	08 95       	ret

00001544 <__mulsf3>:
    1544:	0e 94 b5 0a 	call	0x156a	; 0x156a <__mulsf3x>
    1548:	0c 94 26 0b 	jmp	0x164c	; 0x164c <__fp_round>
    154c:	0e 94 18 0b 	call	0x1630	; 0x1630 <__fp_pscA>
    1550:	38 f0       	brcs	.+14     	; 0x1560 <__mulsf3+0x1c>
    1552:	0e 94 1f 0b 	call	0x163e	; 0x163e <__fp_pscB>
    1556:	20 f0       	brcs	.+8      	; 0x1560 <__mulsf3+0x1c>
    1558:	95 23       	and	r25, r21
    155a:	11 f0       	breq	.+4      	; 0x1560 <__mulsf3+0x1c>
    155c:	0c 94 0f 0b 	jmp	0x161e	; 0x161e <__fp_inf>
    1560:	0c 94 15 0b 	jmp	0x162a	; 0x162a <__fp_nan>
    1564:	11 24       	eor	r1, r1
    1566:	0c 94 97 0a 	jmp	0x152e	; 0x152e <__fp_szero>

0000156a <__mulsf3x>:
    156a:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__fp_split3>
    156e:	70 f3       	brcs	.-36     	; 0x154c <__mulsf3+0x8>

00001570 <__mulsf3_pse>:
    1570:	95 9f       	mul	r25, r21
    1572:	c1 f3       	breq	.-16     	; 0x1564 <__mulsf3+0x20>
    1574:	95 0f       	add	r25, r21
    1576:	50 e0       	ldi	r21, 0x00	; 0
    1578:	55 1f       	adc	r21, r21
    157a:	62 9f       	mul	r22, r18
    157c:	f0 01       	movw	r30, r0
    157e:	72 9f       	mul	r23, r18
    1580:	bb 27       	eor	r27, r27
    1582:	f0 0d       	add	r31, r0
    1584:	b1 1d       	adc	r27, r1
    1586:	63 9f       	mul	r22, r19
    1588:	aa 27       	eor	r26, r26
    158a:	f0 0d       	add	r31, r0
    158c:	b1 1d       	adc	r27, r1
    158e:	aa 1f       	adc	r26, r26
    1590:	64 9f       	mul	r22, r20
    1592:	66 27       	eor	r22, r22
    1594:	b0 0d       	add	r27, r0
    1596:	a1 1d       	adc	r26, r1
    1598:	66 1f       	adc	r22, r22
    159a:	82 9f       	mul	r24, r18
    159c:	22 27       	eor	r18, r18
    159e:	b0 0d       	add	r27, r0
    15a0:	a1 1d       	adc	r26, r1
    15a2:	62 1f       	adc	r22, r18
    15a4:	73 9f       	mul	r23, r19
    15a6:	b0 0d       	add	r27, r0
    15a8:	a1 1d       	adc	r26, r1
    15aa:	62 1f       	adc	r22, r18
    15ac:	83 9f       	mul	r24, r19
    15ae:	a0 0d       	add	r26, r0
    15b0:	61 1d       	adc	r22, r1
    15b2:	22 1f       	adc	r18, r18
    15b4:	74 9f       	mul	r23, r20
    15b6:	33 27       	eor	r19, r19
    15b8:	a0 0d       	add	r26, r0
    15ba:	61 1d       	adc	r22, r1
    15bc:	23 1f       	adc	r18, r19
    15be:	84 9f       	mul	r24, r20
    15c0:	60 0d       	add	r22, r0
    15c2:	21 1d       	adc	r18, r1
    15c4:	82 2f       	mov	r24, r18
    15c6:	76 2f       	mov	r23, r22
    15c8:	6a 2f       	mov	r22, r26
    15ca:	11 24       	eor	r1, r1
    15cc:	9f 57       	subi	r25, 0x7F	; 127
    15ce:	50 40       	sbci	r21, 0x00	; 0
    15d0:	9a f0       	brmi	.+38     	; 0x15f8 <__mulsf3_pse+0x88>
    15d2:	f1 f0       	breq	.+60     	; 0x1610 <__mulsf3_pse+0xa0>
    15d4:	88 23       	and	r24, r24
    15d6:	4a f0       	brmi	.+18     	; 0x15ea <__mulsf3_pse+0x7a>
    15d8:	ee 0f       	add	r30, r30
    15da:	ff 1f       	adc	r31, r31
    15dc:	bb 1f       	adc	r27, r27
    15de:	66 1f       	adc	r22, r22
    15e0:	77 1f       	adc	r23, r23
    15e2:	88 1f       	adc	r24, r24
    15e4:	91 50       	subi	r25, 0x01	; 1
    15e6:	50 40       	sbci	r21, 0x00	; 0
    15e8:	a9 f7       	brne	.-22     	; 0x15d4 <__mulsf3_pse+0x64>
    15ea:	9e 3f       	cpi	r25, 0xFE	; 254
    15ec:	51 05       	cpc	r21, r1
    15ee:	80 f0       	brcs	.+32     	; 0x1610 <__mulsf3_pse+0xa0>
    15f0:	0c 94 0f 0b 	jmp	0x161e	; 0x161e <__fp_inf>
    15f4:	0c 94 97 0a 	jmp	0x152e	; 0x152e <__fp_szero>
    15f8:	5f 3f       	cpi	r21, 0xFF	; 255
    15fa:	e4 f3       	brlt	.-8      	; 0x15f4 <__mulsf3_pse+0x84>
    15fc:	98 3e       	cpi	r25, 0xE8	; 232
    15fe:	d4 f3       	brlt	.-12     	; 0x15f4 <__mulsf3_pse+0x84>
    1600:	86 95       	lsr	r24
    1602:	77 95       	ror	r23
    1604:	67 95       	ror	r22
    1606:	b7 95       	ror	r27
    1608:	f7 95       	ror	r31
    160a:	e7 95       	ror	r30
    160c:	9f 5f       	subi	r25, 0xFF	; 255
    160e:	c1 f7       	brne	.-16     	; 0x1600 <__mulsf3_pse+0x90>
    1610:	fe 2b       	or	r31, r30
    1612:	88 0f       	add	r24, r24
    1614:	91 1d       	adc	r25, r1
    1616:	96 95       	lsr	r25
    1618:	87 95       	ror	r24
    161a:	97 f9       	bld	r25, 7
    161c:	08 95       	ret

0000161e <__fp_inf>:
    161e:	97 f9       	bld	r25, 7
    1620:	9f 67       	ori	r25, 0x7F	; 127
    1622:	80 e8       	ldi	r24, 0x80	; 128
    1624:	70 e0       	ldi	r23, 0x00	; 0
    1626:	60 e0       	ldi	r22, 0x00	; 0
    1628:	08 95       	ret

0000162a <__fp_nan>:
    162a:	9f ef       	ldi	r25, 0xFF	; 255
    162c:	80 ec       	ldi	r24, 0xC0	; 192
    162e:	08 95       	ret

00001630 <__fp_pscA>:
    1630:	00 24       	eor	r0, r0
    1632:	0a 94       	dec	r0
    1634:	16 16       	cp	r1, r22
    1636:	17 06       	cpc	r1, r23
    1638:	18 06       	cpc	r1, r24
    163a:	09 06       	cpc	r0, r25
    163c:	08 95       	ret

0000163e <__fp_pscB>:
    163e:	00 24       	eor	r0, r0
    1640:	0a 94       	dec	r0
    1642:	12 16       	cp	r1, r18
    1644:	13 06       	cpc	r1, r19
    1646:	14 06       	cpc	r1, r20
    1648:	05 06       	cpc	r0, r21
    164a:	08 95       	ret

0000164c <__fp_round>:
    164c:	09 2e       	mov	r0, r25
    164e:	03 94       	inc	r0
    1650:	00 0c       	add	r0, r0
    1652:	11 f4       	brne	.+4      	; 0x1658 <__fp_round+0xc>
    1654:	88 23       	and	r24, r24
    1656:	52 f0       	brmi	.+20     	; 0x166c <__fp_round+0x20>
    1658:	bb 0f       	add	r27, r27
    165a:	40 f4       	brcc	.+16     	; 0x166c <__fp_round+0x20>
    165c:	bf 2b       	or	r27, r31
    165e:	11 f4       	brne	.+4      	; 0x1664 <__fp_round+0x18>
    1660:	60 ff       	sbrs	r22, 0
    1662:	04 c0       	rjmp	.+8      	; 0x166c <__fp_round+0x20>
    1664:	6f 5f       	subi	r22, 0xFF	; 255
    1666:	7f 4f       	sbci	r23, 0xFF	; 255
    1668:	8f 4f       	sbci	r24, 0xFF	; 255
    166a:	9f 4f       	sbci	r25, 0xFF	; 255
    166c:	08 95       	ret

0000166e <_exit>:
    166e:	f8 94       	cli

00001670 <__stop_program>:
    1670:	ff cf       	rjmp	.-2      	; 0x1670 <__stop_program>
