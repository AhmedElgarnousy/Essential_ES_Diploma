
RTOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c0e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000c0e  00000ca2  2**0
                  ALLOC, LOAD, DATA
  2 .bss          00000016  00800060  00800060  00000ca2  2**0
                  ALLOC
  3 .stab         00001dc4  00000000  00000000  00000ca4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010e1  00000000  00000000  00002a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00003b49  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003b5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000060  00000000  00000000  00003b98  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00000558  00000000  00000000  00003bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000004df  00000000  00000000  00004150  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000001d0  00000000  00000000  0000462f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001f4  00000000  00000000  000047ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 aa 03 	jmp	0x754	; 0x754 <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 37       	cpi	r26, 0x76	; 118
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 df 03 	call	0x7be	; 0x7be <main>
  74:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_u8SetPinValue>:
#include"DIO_private.h"



u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	00 d0       	rcall	.+0      	; 0x82 <DIO_u8SetPinValue+0x6>
  82:	00 d0       	rcall	.+0      	; 0x84 <DIO_u8SetPinValue+0x8>
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
  88:	8a 83       	std	Y+2, r24	; 0x02
  8a:	6b 83       	std	Y+3, r22	; 0x03
  8c:	4c 83       	std	Y+4, r20	; 0x04

u8 Local_u8ErrorState=0;
  8e:	19 82       	std	Y+1, r1	; 0x01

if(Copy_u8Pin<=DIO_u8PIN7)
  90:	8b 81       	ldd	r24, Y+3	; 0x03
  92:	88 30       	cpi	r24, 0x08	; 8
  94:	08 f0       	brcs	.+2      	; 0x98 <DIO_u8SetPinValue+0x1c>
  96:	f3 c0       	rjmp	.+486    	; 0x27e <DIO_u8SetPinValue+0x202>
{
	if(Copy_u8Value==DIO_u8PIN_HIGH)
  98:	8c 81       	ldd	r24, Y+4	; 0x04
  9a:	81 30       	cpi	r24, 0x01	; 1
  9c:	09 f0       	breq	.+2      	; 0xa0 <DIO_u8SetPinValue+0x24>
  9e:	72 c0       	rjmp	.+228    	; 0x184 <DIO_u8SetPinValue+0x108>
		{
		switch(Copy_u8Port)
  a0:	8a 81       	ldd	r24, Y+2	; 0x02
  a2:	88 2f       	mov	r24, r24
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	84 30       	cpi	r24, 0x04	; 4
  a8:	91 05       	cpc	r25, r1
  aa:	09 f4       	brne	.+2      	; 0xae <DIO_u8SetPinValue+0x32>
  ac:	52 c0       	rjmp	.+164    	; 0x152 <DIO_u8SetPinValue+0xd6>
  ae:	85 30       	cpi	r24, 0x05	; 5
  b0:	91 05       	cpc	r25, r1
  b2:	0c f0       	brlt	.+2      	; 0xb6 <DIO_u8SetPinValue+0x3a>
  b4:	64 c0       	rjmp	.+200    	; 0x17e <DIO_u8SetPinValue+0x102>
  b6:	83 30       	cpi	r24, 0x03	; 3
  b8:	91 05       	cpc	r25, r1
  ba:	a9 f1       	breq	.+106    	; 0x126 <DIO_u8SetPinValue+0xaa>
  bc:	84 30       	cpi	r24, 0x04	; 4
  be:	91 05       	cpc	r25, r1
  c0:	0c f0       	brlt	.+2      	; 0xc4 <DIO_u8SetPinValue+0x48>
  c2:	5d c0       	rjmp	.+186    	; 0x17e <DIO_u8SetPinValue+0x102>
  c4:	00 97       	sbiw	r24, 0x00	; 0
  c6:	19 f0       	breq	.+6      	; 0xce <DIO_u8SetPinValue+0x52>
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	b9 f0       	breq	.+46     	; 0xfa <DIO_u8SetPinValue+0x7e>
  cc:	58 c0       	rjmp	.+176    	; 0x17e <DIO_u8SetPinValue+0x102>
		{
			case DIO_u8PORTA:SET_BIT(PORTA,Copy_u8Pin);break;
  ce:	8b e3       	ldi	r24, 0x3B	; 59
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	fc 01       	movw	r30, r24
  d4:	80 81       	ld	r24, Z
  d6:	48 2f       	mov	r20, r24
  d8:	8b 81       	ldd	r24, Y+3	; 0x03
  da:	28 2f       	mov	r18, r24
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_u8SetPinValue+0x6c>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	2a 95       	dec	r18
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_u8SetPinValue+0x68>
  ec:	24 2f       	mov	r18, r20
  ee:	28 2b       	or	r18, r24
  f0:	8b e3       	ldi	r24, 0x3B	; 59
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	fc 01       	movw	r30, r24
  f6:	20 83       	st	Z, r18
  f8:	c4 c0       	rjmp	.+392    	; 0x282 <DIO_u8SetPinValue+0x206>
			case DIO_u8PORTB:SET_BIT(PORTB,Copy_u8Pin);break;
  fa:	88 e3       	ldi	r24, 0x38	; 56
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	fc 01       	movw	r30, r24
 100:	80 81       	ld	r24, Z
 102:	48 2f       	mov	r20, r24
 104:	8b 81       	ldd	r24, Y+3	; 0x03
 106:	28 2f       	mov	r18, r24
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_u8SetPinValue+0x98>
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	2a 95       	dec	r18
 116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_u8SetPinValue+0x94>
 118:	24 2f       	mov	r18, r20
 11a:	28 2b       	or	r18, r24
 11c:	88 e3       	ldi	r24, 0x38	; 56
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	fc 01       	movw	r30, r24
 122:	20 83       	st	Z, r18
 124:	ae c0       	rjmp	.+348    	; 0x282 <DIO_u8SetPinValue+0x206>
			case DIO_u8PORTC:SET_BIT(PORTC,Copy_u8Pin);break;
 126:	85 e3       	ldi	r24, 0x35	; 53
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	fc 01       	movw	r30, r24
 12c:	80 81       	ld	r24, Z
 12e:	48 2f       	mov	r20, r24
 130:	8b 81       	ldd	r24, Y+3	; 0x03
 132:	28 2f       	mov	r18, r24
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_u8SetPinValue+0xc4>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	2a 95       	dec	r18
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_u8SetPinValue+0xc0>
 144:	24 2f       	mov	r18, r20
 146:	28 2b       	or	r18, r24
 148:	85 e3       	ldi	r24, 0x35	; 53
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	fc 01       	movw	r30, r24
 14e:	20 83       	st	Z, r18
 150:	98 c0       	rjmp	.+304    	; 0x282 <DIO_u8SetPinValue+0x206>
			case DIO_u8PORTD:SET_BIT(PORTD,Copy_u8Pin);break;
 152:	82 e3       	ldi	r24, 0x32	; 50
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	fc 01       	movw	r30, r24
 158:	80 81       	ld	r24, Z
 15a:	48 2f       	mov	r20, r24
 15c:	8b 81       	ldd	r24, Y+3	; 0x03
 15e:	28 2f       	mov	r18, r24
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_u8SetPinValue+0xf0>
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	2a 95       	dec	r18
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_u8SetPinValue+0xec>
 170:	24 2f       	mov	r18, r20
 172:	28 2b       	or	r18, r24
 174:	82 e3       	ldi	r24, 0x32	; 50
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	fc 01       	movw	r30, r24
 17a:	20 83       	st	Z, r18
 17c:	82 c0       	rjmp	.+260    	; 0x282 <DIO_u8SetPinValue+0x206>
			default :Local_u8ErrorState=1;break;
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	89 83       	std	Y+1, r24	; 0x01
 182:	7f c0       	rjmp	.+254    	; 0x282 <DIO_u8SetPinValue+0x206>
		}



		}
		else if(Copy_u8Value==DIO_u8PIN_LOW)
 184:	8c 81       	ldd	r24, Y+4	; 0x04
 186:	88 23       	and	r24, r24
 188:	09 f0       	breq	.+2      	; 0x18c <DIO_u8SetPinValue+0x110>
 18a:	76 c0       	rjmp	.+236    	; 0x278 <DIO_u8SetPinValue+0x1fc>
		{
			switch(Copy_u8Port)
 18c:	8a 81       	ldd	r24, Y+2	; 0x02
 18e:	88 2f       	mov	r24, r24
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	84 30       	cpi	r24, 0x04	; 4
 194:	91 05       	cpc	r25, r1
 196:	09 f4       	brne	.+2      	; 0x19a <DIO_u8SetPinValue+0x11e>
 198:	55 c0       	rjmp	.+170    	; 0x244 <DIO_u8SetPinValue+0x1c8>
 19a:	85 30       	cpi	r24, 0x05	; 5
 19c:	91 05       	cpc	r25, r1
 19e:	0c f0       	brlt	.+2      	; 0x1a2 <DIO_u8SetPinValue+0x126>
 1a0:	68 c0       	rjmp	.+208    	; 0x272 <DIO_u8SetPinValue+0x1f6>
 1a2:	83 30       	cpi	r24, 0x03	; 3
 1a4:	91 05       	cpc	r25, r1
 1a6:	b9 f1       	breq	.+110    	; 0x216 <DIO_u8SetPinValue+0x19a>
 1a8:	84 30       	cpi	r24, 0x04	; 4
 1aa:	91 05       	cpc	r25, r1
 1ac:	0c f0       	brlt	.+2      	; 0x1b0 <DIO_u8SetPinValue+0x134>
 1ae:	61 c0       	rjmp	.+194    	; 0x272 <DIO_u8SetPinValue+0x1f6>
 1b0:	00 97       	sbiw	r24, 0x00	; 0
 1b2:	19 f0       	breq	.+6      	; 0x1ba <DIO_u8SetPinValue+0x13e>
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	c1 f0       	breq	.+48     	; 0x1e8 <DIO_u8SetPinValue+0x16c>
 1b8:	5c c0       	rjmp	.+184    	; 0x272 <DIO_u8SetPinValue+0x1f6>
		{
			case DIO_u8PORTA:CLR_BIT(PORTA,Copy_u8Pin);break;
 1ba:	8b e3       	ldi	r24, 0x3B	; 59
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	fc 01       	movw	r30, r24
 1c0:	80 81       	ld	r24, Z
 1c2:	48 2f       	mov	r20, r24
 1c4:	8b 81       	ldd	r24, Y+3	; 0x03
 1c6:	28 2f       	mov	r18, r24
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_u8SetPinValue+0x158>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	2a 95       	dec	r18
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_u8SetPinValue+0x154>
 1d8:	80 95       	com	r24
 1da:	24 2f       	mov	r18, r20
 1dc:	28 23       	and	r18, r24
 1de:	8b e3       	ldi	r24, 0x3B	; 59
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	fc 01       	movw	r30, r24
 1e4:	20 83       	st	Z, r18
 1e6:	4d c0       	rjmp	.+154    	; 0x282 <DIO_u8SetPinValue+0x206>
			case DIO_u8PORTB:CLR_BIT(PORTB,Copy_u8Pin);break;
 1e8:	88 e3       	ldi	r24, 0x38	; 56
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	fc 01       	movw	r30, r24
 1ee:	80 81       	ld	r24, Z
 1f0:	48 2f       	mov	r20, r24
 1f2:	8b 81       	ldd	r24, Y+3	; 0x03
 1f4:	28 2f       	mov	r18, r24
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_u8SetPinValue+0x186>
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	2a 95       	dec	r18
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_u8SetPinValue+0x182>
 206:	80 95       	com	r24
 208:	24 2f       	mov	r18, r20
 20a:	28 23       	and	r18, r24
 20c:	88 e3       	ldi	r24, 0x38	; 56
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	fc 01       	movw	r30, r24
 212:	20 83       	st	Z, r18
 214:	36 c0       	rjmp	.+108    	; 0x282 <DIO_u8SetPinValue+0x206>
			case DIO_u8PORTC:CLR_BIT(PORTC,Copy_u8Pin);break;
 216:	85 e3       	ldi	r24, 0x35	; 53
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	fc 01       	movw	r30, r24
 21c:	80 81       	ld	r24, Z
 21e:	48 2f       	mov	r20, r24
 220:	8b 81       	ldd	r24, Y+3	; 0x03
 222:	28 2f       	mov	r18, r24
 224:	30 e0       	ldi	r19, 0x00	; 0
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_u8SetPinValue+0x1b4>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	2a 95       	dec	r18
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_u8SetPinValue+0x1b0>
 234:	80 95       	com	r24
 236:	24 2f       	mov	r18, r20
 238:	28 23       	and	r18, r24
 23a:	85 e3       	ldi	r24, 0x35	; 53
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	fc 01       	movw	r30, r24
 240:	20 83       	st	Z, r18
 242:	1f c0       	rjmp	.+62     	; 0x282 <DIO_u8SetPinValue+0x206>
			case DIO_u8PORTD:CLR_BIT(PORTD,Copy_u8Pin);break;
 244:	82 e3       	ldi	r24, 0x32	; 50
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	fc 01       	movw	r30, r24
 24a:	80 81       	ld	r24, Z
 24c:	48 2f       	mov	r20, r24
 24e:	8b 81       	ldd	r24, Y+3	; 0x03
 250:	28 2f       	mov	r18, r24
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	02 c0       	rjmp	.+4      	; 0x25e <DIO_u8SetPinValue+0x1e2>
 25a:	88 0f       	add	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	2a 95       	dec	r18
 260:	e2 f7       	brpl	.-8      	; 0x25a <DIO_u8SetPinValue+0x1de>
 262:	80 95       	com	r24
 264:	24 2f       	mov	r18, r20
 266:	28 23       	and	r18, r24
 268:	82 e3       	ldi	r24, 0x32	; 50
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	fc 01       	movw	r30, r24
 26e:	20 83       	st	Z, r18
 270:	08 c0       	rjmp	.+16     	; 0x282 <DIO_u8SetPinValue+0x206>
			default :Local_u8ErrorState=1;break;
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	89 83       	std	Y+1, r24	; 0x01
 276:	05 c0       	rjmp	.+10     	; 0x282 <DIO_u8SetPinValue+0x206>


		}
		else
		{
		Local_u8ErrorState=1;
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	89 83       	std	Y+1, r24	; 0x01
 27c:	02 c0       	rjmp	.+4      	; 0x282 <DIO_u8SetPinValue+0x206>
		}
		
}
else
{
	 Local_u8ErrorState=1;
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	89 83       	std	Y+1, r24	; 0x01
}

return Local_u8ErrorState;
 282:	89 81       	ldd	r24, Y+1	; 0x01
}
 284:	0f 90       	pop	r0
 286:	0f 90       	pop	r0
 288:	0f 90       	pop	r0
 28a:	0f 90       	pop	r0
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	08 95       	ret

00000292 <DIO_u8SetPortValue>:


u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
 292:	cf 93       	push	r28
 294:	df 93       	push	r29
 296:	00 d0       	rcall	.+0      	; 0x298 <DIO_u8SetPortValue+0x6>
 298:	0f 92       	push	r0
 29a:	cd b7       	in	r28, 0x3d	; 61
 29c:	de b7       	in	r29, 0x3e	; 62
 29e:	8a 83       	std	Y+2, r24	; 0x02
 2a0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
 2a2:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
 2a4:	8a 81       	ldd	r24, Y+2	; 0x02
 2a6:	88 2f       	mov	r24, r24
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	84 30       	cpi	r24, 0x04	; 4
 2ac:	91 05       	cpc	r25, r1
 2ae:	01 f1       	breq	.+64     	; 0x2f0 <DIO_u8SetPortValue+0x5e>
 2b0:	85 30       	cpi	r24, 0x05	; 5
 2b2:	91 05       	cpc	r25, r1
 2b4:	1c f5       	brge	.+70     	; 0x2fc <DIO_u8SetPortValue+0x6a>
 2b6:	83 30       	cpi	r24, 0x03	; 3
 2b8:	91 05       	cpc	r25, r1
 2ba:	a1 f0       	breq	.+40     	; 0x2e4 <DIO_u8SetPortValue+0x52>
 2bc:	84 30       	cpi	r24, 0x04	; 4
 2be:	91 05       	cpc	r25, r1
 2c0:	ec f4       	brge	.+58     	; 0x2fc <DIO_u8SetPortValue+0x6a>
 2c2:	00 97       	sbiw	r24, 0x00	; 0
 2c4:	19 f0       	breq	.+6      	; 0x2cc <DIO_u8SetPortValue+0x3a>
 2c6:	01 97       	sbiw	r24, 0x01	; 1
 2c8:	39 f0       	breq	.+14     	; 0x2d8 <DIO_u8SetPortValue+0x46>
 2ca:	18 c0       	rjmp	.+48     	; 0x2fc <DIO_u8SetPortValue+0x6a>
				{
					case DIO_u8PORTA: PORTA=Copy_u8Value; break;
 2cc:	8b e3       	ldi	r24, 0x3B	; 59
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	2b 81       	ldd	r18, Y+3	; 0x03
 2d2:	fc 01       	movw	r30, r24
 2d4:	20 83       	st	Z, r18
 2d6:	15 c0       	rjmp	.+42     	; 0x302 <DIO_u8SetPortValue+0x70>
				    case DIO_u8PORTB: PORTB=Copy_u8Value; break;
 2d8:	88 e3       	ldi	r24, 0x38	; 56
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	2b 81       	ldd	r18, Y+3	; 0x03
 2de:	fc 01       	movw	r30, r24
 2e0:	20 83       	st	Z, r18
 2e2:	0f c0       	rjmp	.+30     	; 0x302 <DIO_u8SetPortValue+0x70>
				    case DIO_u8PORTC: PORTC=Copy_u8Value; break;
 2e4:	85 e3       	ldi	r24, 0x35	; 53
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	2b 81       	ldd	r18, Y+3	; 0x03
 2ea:	fc 01       	movw	r30, r24
 2ec:	20 83       	st	Z, r18
 2ee:	09 c0       	rjmp	.+18     	; 0x302 <DIO_u8SetPortValue+0x70>
				    case DIO_u8PORTD: PORTD=Copy_u8Value; break;
 2f0:	82 e3       	ldi	r24, 0x32	; 50
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	2b 81       	ldd	r18, Y+3	; 0x03
 2f6:	fc 01       	movw	r30, r24
 2f8:	20 83       	st	Z, r18
 2fa:	03 c0       	rjmp	.+6      	; 0x302 <DIO_u8SetPortValue+0x70>
				    default :Local_u8ErrorState=1; break;
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	89 83       	std	Y+1, r24	; 0x01
 300:	00 00       	nop
				}


	return Local_u8ErrorState;
 302:	89 81       	ldd	r24, Y+1	; 0x01

}
 304:	0f 90       	pop	r0
 306:	0f 90       	pop	r0
 308:	0f 90       	pop	r0
 30a:	df 91       	pop	r29
 30c:	cf 91       	pop	r28
 30e:	08 95       	ret

00000310 <DIO_u8GetPinValue>:



u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8* Copy_pu8Value)
{
 310:	cf 93       	push	r28
 312:	df 93       	push	r29
 314:	00 d0       	rcall	.+0      	; 0x316 <DIO_u8GetPinValue+0x6>
 316:	00 d0       	rcall	.+0      	; 0x318 <DIO_u8GetPinValue+0x8>
 318:	0f 92       	push	r0
 31a:	cd b7       	in	r28, 0x3d	; 61
 31c:	de b7       	in	r29, 0x3e	; 62
 31e:	8a 83       	std	Y+2, r24	; 0x02
 320:	6b 83       	std	Y+3, r22	; 0x03
 322:	5d 83       	std	Y+5, r21	; 0x05
 324:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState=0;
 326:	19 82       	std	Y+1, r1	; 0x01
	if( (Copy_pu8Value!=NULL) && (Copy_u8Pin<=DIO_u8PIN7) )
 328:	8c 81       	ldd	r24, Y+4	; 0x04
 32a:	9d 81       	ldd	r25, Y+5	; 0x05
 32c:	89 2b       	or	r24, r25
 32e:	09 f4       	brne	.+2      	; 0x332 <DIO_u8GetPinValue+0x22>
 330:	73 c0       	rjmp	.+230    	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
 332:	8b 81       	ldd	r24, Y+3	; 0x03
 334:	88 30       	cpi	r24, 0x08	; 8
 336:	08 f0       	brcs	.+2      	; 0x33a <DIO_u8GetPinValue+0x2a>
 338:	6f c0       	rjmp	.+222    	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
		{
			switch(Copy_u8Port)
 33a:	8a 81       	ldd	r24, Y+2	; 0x02
 33c:	88 2f       	mov	r24, r24
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	84 30       	cpi	r24, 0x04	; 4
 342:	91 05       	cpc	r25, r1
 344:	09 f4       	brne	.+2      	; 0x348 <DIO_u8GetPinValue+0x38>
 346:	4f c0       	rjmp	.+158    	; 0x3e6 <DIO_u8GetPinValue+0xd6>
 348:	85 30       	cpi	r24, 0x05	; 5
 34a:	91 05       	cpc	r25, r1
 34c:	0c f0       	brlt	.+2      	; 0x350 <DIO_u8GetPinValue+0x40>
 34e:	60 c0       	rjmp	.+192    	; 0x410 <__FUSE_REGION_LENGTH__+0x10>
 350:	83 30       	cpi	r24, 0x03	; 3
 352:	91 05       	cpc	r25, r1
 354:	99 f1       	breq	.+102    	; 0x3bc <DIO_u8GetPinValue+0xac>
 356:	84 30       	cpi	r24, 0x04	; 4
 358:	91 05       	cpc	r25, r1
 35a:	0c f0       	brlt	.+2      	; 0x35e <DIO_u8GetPinValue+0x4e>
 35c:	59 c0       	rjmp	.+178    	; 0x410 <__FUSE_REGION_LENGTH__+0x10>
 35e:	00 97       	sbiw	r24, 0x00	; 0
 360:	19 f0       	breq	.+6      	; 0x368 <DIO_u8GetPinValue+0x58>
 362:	01 97       	sbiw	r24, 0x01	; 1
 364:	b1 f0       	breq	.+44     	; 0x392 <DIO_u8GetPinValue+0x82>
 366:	54 c0       	rjmp	.+168    	; 0x410 <__FUSE_REGION_LENGTH__+0x10>
			{
				case DIO_u8PORTA: *Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin); break;
 368:	89 e3       	ldi	r24, 0x39	; 57
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	fc 01       	movw	r30, r24
 36e:	80 81       	ld	r24, Z
 370:	88 2f       	mov	r24, r24
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	2b 81       	ldd	r18, Y+3	; 0x03
 376:	22 2f       	mov	r18, r18
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	02 c0       	rjmp	.+4      	; 0x380 <DIO_u8GetPinValue+0x70>
 37c:	95 95       	asr	r25
 37e:	87 95       	ror	r24
 380:	2a 95       	dec	r18
 382:	e2 f7       	brpl	.-8      	; 0x37c <DIO_u8GetPinValue+0x6c>
 384:	28 2f       	mov	r18, r24
 386:	21 70       	andi	r18, 0x01	; 1
 388:	8c 81       	ldd	r24, Y+4	; 0x04
 38a:	9d 81       	ldd	r25, Y+5	; 0x05
 38c:	fc 01       	movw	r30, r24
 38e:	20 83       	st	Z, r18
 390:	42 c0       	rjmp	.+132    	; 0x416 <__FUSE_REGION_LENGTH__+0x16>
			    case DIO_u8PORTB: *Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin); break;
 392:	86 e3       	ldi	r24, 0x36	; 54
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	fc 01       	movw	r30, r24
 398:	80 81       	ld	r24, Z
 39a:	88 2f       	mov	r24, r24
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	2b 81       	ldd	r18, Y+3	; 0x03
 3a0:	22 2f       	mov	r18, r18
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <DIO_u8GetPinValue+0x9a>
 3a6:	95 95       	asr	r25
 3a8:	87 95       	ror	r24
 3aa:	2a 95       	dec	r18
 3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <DIO_u8GetPinValue+0x96>
 3ae:	28 2f       	mov	r18, r24
 3b0:	21 70       	andi	r18, 0x01	; 1
 3b2:	8c 81       	ldd	r24, Y+4	; 0x04
 3b4:	9d 81       	ldd	r25, Y+5	; 0x05
 3b6:	fc 01       	movw	r30, r24
 3b8:	20 83       	st	Z, r18
 3ba:	2d c0       	rjmp	.+90     	; 0x416 <__FUSE_REGION_LENGTH__+0x16>
			    case DIO_u8PORTC: *Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin); break;
 3bc:	83 e3       	ldi	r24, 0x33	; 51
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	fc 01       	movw	r30, r24
 3c2:	80 81       	ld	r24, Z
 3c4:	88 2f       	mov	r24, r24
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	2b 81       	ldd	r18, Y+3	; 0x03
 3ca:	22 2f       	mov	r18, r18
 3cc:	30 e0       	ldi	r19, 0x00	; 0
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <DIO_u8GetPinValue+0xc4>
 3d0:	95 95       	asr	r25
 3d2:	87 95       	ror	r24
 3d4:	2a 95       	dec	r18
 3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <DIO_u8GetPinValue+0xc0>
 3d8:	28 2f       	mov	r18, r24
 3da:	21 70       	andi	r18, 0x01	; 1
 3dc:	8c 81       	ldd	r24, Y+4	; 0x04
 3de:	9d 81       	ldd	r25, Y+5	; 0x05
 3e0:	fc 01       	movw	r30, r24
 3e2:	20 83       	st	Z, r18
 3e4:	18 c0       	rjmp	.+48     	; 0x416 <__FUSE_REGION_LENGTH__+0x16>
			    case DIO_u8PORTD: *Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin); break;
 3e6:	80 e3       	ldi	r24, 0x30	; 48
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	fc 01       	movw	r30, r24
 3ec:	80 81       	ld	r24, Z
 3ee:	88 2f       	mov	r24, r24
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	2b 81       	ldd	r18, Y+3	; 0x03
 3f4:	22 2f       	mov	r18, r18
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <DIO_u8GetPinValue+0xee>
 3fa:	95 95       	asr	r25
 3fc:	87 95       	ror	r24
 3fe:	2a 95       	dec	r18
 400:	e2 f7       	brpl	.-8      	; 0x3fa <DIO_u8GetPinValue+0xea>
 402:	28 2f       	mov	r18, r24
 404:	21 70       	andi	r18, 0x01	; 1
 406:	8c 81       	ldd	r24, Y+4	; 0x04
 408:	9d 81       	ldd	r25, Y+5	; 0x05
 40a:	fc 01       	movw	r30, r24
 40c:	20 83       	st	Z, r18
 40e:	03 c0       	rjmp	.+6      	; 0x416 <__FUSE_REGION_LENGTH__+0x16>
			    default : Local_u8ErrorState=1; break;
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	89 83       	std	Y+1, r24	; 0x01
 414:	00 00       	nop
{

	u8 Local_u8ErrorState=0;
	if( (Copy_pu8Value!=NULL) && (Copy_u8Pin<=DIO_u8PIN7) )
		{
			switch(Copy_u8Port)
 416:	02 c0       	rjmp	.+4      	; 0x41c <__FUSE_REGION_LENGTH__+0x1c>
			}

		}
		else
		{
		Local_u8ErrorState=1;
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	89 83       	std	Y+1, r24	; 0x01

		}

	return Local_u8ErrorState;
 41c:	89 81       	ldd	r24, Y+1	; 0x01
}
 41e:	0f 90       	pop	r0
 420:	0f 90       	pop	r0
 422:	0f 90       	pop	r0
 424:	0f 90       	pop	r0
 426:	0f 90       	pop	r0
 428:	df 91       	pop	r29
 42a:	cf 91       	pop	r28
 42c:	08 95       	ret

0000042e <GIE_voidEnable>:
#include"GIE_interface.h"
#include"GIE_register.h"


void GIE_voidEnable(void)
{
 42e:	cf 93       	push	r28
 430:	df 93       	push	r29
 432:	cd b7       	in	r28, 0x3d	; 61
 434:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
 436:	8f e5       	ldi	r24, 0x5F	; 95
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	fc 01       	movw	r30, r24
 43c:	20 81       	ld	r18, Z
 43e:	8f e5       	ldi	r24, 0x5F	; 95
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	20 68       	ori	r18, 0x80	; 128
 444:	fc 01       	movw	r30, r24
 446:	20 83       	st	Z, r18
	
}
 448:	00 00       	nop
 44a:	df 91       	pop	r29
 44c:	cf 91       	pop	r28
 44e:	08 95       	ret

00000450 <GIE_voidDisable>:
void GIE_voidDisable(void)
{
 450:	cf 93       	push	r28
 452:	df 93       	push	r29
 454:	cd b7       	in	r28, 0x3d	; 61
 456:	de b7       	in	r29, 0x3e	; 62
	
	CLR_BIT(SREG,SREG_I);
 458:	8f e5       	ldi	r24, 0x5F	; 95
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	fc 01       	movw	r30, r24
 45e:	20 81       	ld	r18, Z
 460:	8f e5       	ldi	r24, 0x5F	; 95
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	2f 77       	andi	r18, 0x7F	; 127
 466:	fc 01       	movw	r30, r24
 468:	20 83       	st	Z, r18
	
 46a:	00 00       	nop
 46c:	df 91       	pop	r29
 46e:	cf 91       	pop	r28
 470:	08 95       	ret

00000472 <PORT_voidInit>:
#include"PORT_interface.h"
#include"PORT_register.h"


void PORT_voidInit()
{
 472:	cf 93       	push	r28
 474:	df 93       	push	r29
 476:	cd b7       	in	r28, 0x3d	; 61
 478:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
 47a:	8a e3       	ldi	r24, 0x3A	; 58
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	27 e0       	ldi	r18, 0x07	; 7
 480:	fc 01       	movw	r30, r24
 482:	20 83       	st	Z, r18
	DDRB=PORTB_DIR;
 484:	87 e3       	ldi	r24, 0x37	; 55
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	fc 01       	movw	r30, r24
 48a:	10 82       	st	Z, r1
	DDRC=PORTC_DIR;
 48c:	84 e3       	ldi	r24, 0x34	; 52
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	27 e0       	ldi	r18, 0x07	; 7
 492:	fc 01       	movw	r30, r24
 494:	20 83       	st	Z, r18
	DDRD=PORTD_DIR;
 496:	81 e3       	ldi	r24, 0x31	; 49
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	fc 01       	movw	r30, r24
 49c:	10 82       	st	Z, r1

	PORTA=PORTA_InitVal;
 49e:	8b e3       	ldi	r24, 0x3B	; 59
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	fc 01       	movw	r30, r24
 4a4:	10 82       	st	Z, r1
	PORTB=PORTB_InitVal;
 4a6:	88 e3       	ldi	r24, 0x38	; 56
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	fc 01       	movw	r30, r24
 4ac:	10 82       	st	Z, r1
	PORTC=PORTC_InitVal;
 4ae:	85 e3       	ldi	r24, 0x35	; 53
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	fc 01       	movw	r30, r24
 4b4:	10 82       	st	Z, r1
	PORTD=PORTD_InitVal;
 4b6:	82 e3       	ldi	r24, 0x32	; 50
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	fc 01       	movw	r30, r24
 4bc:	10 82       	st	Z, r1
}
 4be:	00 00       	nop
 4c0:	df 91       	pop	r29
 4c2:	cf 91       	pop	r28
 4c4:	08 95       	ret

000004c6 <RTOS_voidStart>:


Task_t SystemTasks[TASK_NUM] = {{NULL}};

void RTOS_voidStart(void)
{
 4c6:	cf 93       	push	r28
 4c8:	df 93       	push	r29
 4ca:	cd b7       	in	r28, 0x3d	; 61
 4cc:	de b7       	in	r29, 0x3e	; 62
	/**/
	TIMER0_u8SetCallBack(&voidScheduler);
 4ce:	8b ee       	ldi	r24, 0xEB	; 235
 4d0:	92 e0       	ldi	r25, 0x02	; 2
 4d2:	0e 94 8d 03 	call	0x71a	; 0x71a <TIMER0_u8SetCallBack>
	GIE_voidEnable();
 4d6:	0e 94 17 02 	call	0x42e	; 0x42e <GIE_voidEnable>
	TIMER0_voidInit();
 4da:	0e 94 53 03 	call	0x6a6	; 0x6a6 <TIMER0_voidInit>
}
 4de:	00 00       	nop
 4e0:	df 91       	pop	r29
 4e2:	cf 91       	pop	r28
 4e4:	08 95       	ret

000004e6 <RTOS_voidCreateTask>:

void RTOS_voidCreateTask(u8 Copy_u8Priority, u16 Copy_u16Periodicity, void(*Copy_pvTaskFunc)(void))
{
 4e6:	cf 93       	push	r28
 4e8:	df 93       	push	r29
 4ea:	00 d0       	rcall	.+0      	; 0x4ec <RTOS_voidCreateTask+0x6>
 4ec:	00 d0       	rcall	.+0      	; 0x4ee <RTOS_voidCreateTask+0x8>
 4ee:	0f 92       	push	r0
 4f0:	cd b7       	in	r28, 0x3d	; 61
 4f2:	de b7       	in	r29, 0x3e	; 62
 4f4:	89 83       	std	Y+1, r24	; 0x01
 4f6:	7b 83       	std	Y+3, r23	; 0x03
 4f8:	6a 83       	std	Y+2, r22	; 0x02
 4fa:	5d 83       	std	Y+5, r21	; 0x05
 4fc:	4c 83       	std	Y+4, r20	; 0x04
	SystemTasks[Copy_u8Priority].Periodicity = Copy_u16Periodicity;
 4fe:	89 81       	ldd	r24, Y+1	; 0x01
 500:	28 2f       	mov	r18, r24
 502:	30 e0       	ldi	r19, 0x00	; 0
 504:	c9 01       	movw	r24, r18
 506:	88 0f       	add	r24, r24
 508:	99 1f       	adc	r25, r25
 50a:	88 0f       	add	r24, r24
 50c:	99 1f       	adc	r25, r25
 50e:	82 0f       	add	r24, r18
 510:	93 1f       	adc	r25, r19
 512:	80 5a       	subi	r24, 0xA0	; 160
 514:	9f 4f       	sbci	r25, 0xFF	; 255
 516:	2a 81       	ldd	r18, Y+2	; 0x02
 518:	3b 81       	ldd	r19, Y+3	; 0x03
 51a:	fc 01       	movw	r30, r24
 51c:	31 83       	std	Z+1, r19	; 0x01
 51e:	20 83       	st	Z, r18
	SystemTasks[Copy_u8Priority].TaskFunc = Copy_pvTaskFunc;
 520:	89 81       	ldd	r24, Y+1	; 0x01
 522:	28 2f       	mov	r18, r24
 524:	30 e0       	ldi	r19, 0x00	; 0
 526:	c9 01       	movw	r24, r18
 528:	88 0f       	add	r24, r24
 52a:	99 1f       	adc	r25, r25
 52c:	88 0f       	add	r24, r24
 52e:	99 1f       	adc	r25, r25
 530:	82 0f       	add	r24, r18
 532:	93 1f       	adc	r25, r19
 534:	8e 59       	subi	r24, 0x9E	; 158
 536:	9f 4f       	sbci	r25, 0xFF	; 255
 538:	2c 81       	ldd	r18, Y+4	; 0x04
 53a:	3d 81       	ldd	r19, Y+5	; 0x05
 53c:	fc 01       	movw	r30, r24
 53e:	31 83       	std	Z+1, r19	; 0x01
 540:	20 83       	st	Z, r18
	SystemTasks[Copy_u8Priority].State = TASK_RESUMED;  // Initaializ task state
 542:	89 81       	ldd	r24, Y+1	; 0x01
 544:	28 2f       	mov	r18, r24
 546:	30 e0       	ldi	r19, 0x00	; 0
 548:	c9 01       	movw	r24, r18
 54a:	88 0f       	add	r24, r24
 54c:	99 1f       	adc	r25, r25
 54e:	88 0f       	add	r24, r24
 550:	99 1f       	adc	r25, r25
 552:	82 0f       	add	r24, r18
 554:	93 1f       	adc	r25, r19
 556:	8c 59       	subi	r24, 0x9C	; 156
 558:	9f 4f       	sbci	r25, 0xFF	; 255
 55a:	fc 01       	movw	r30, r24
 55c:	10 82       	st	Z, r1
}
 55e:	00 00       	nop
 560:	0f 90       	pop	r0
 562:	0f 90       	pop	r0
 564:	0f 90       	pop	r0
 566:	0f 90       	pop	r0
 568:	0f 90       	pop	r0
 56a:	df 91       	pop	r29
 56c:	cf 91       	pop	r28
 56e:	08 95       	ret

00000570 <RTOS_voidSuspendTask>:

void RTOS_voidSuspendTask(u8 Copy_u8Priority)
{
 570:	cf 93       	push	r28
 572:	df 93       	push	r29
 574:	0f 92       	push	r0
 576:	cd b7       	in	r28, 0x3d	; 61
 578:	de b7       	in	r29, 0x3e	; 62
 57a:	89 83       	std	Y+1, r24	; 0x01
	SystemTasks[Copy_u8Priority].State = TASK_SUSPENDED;
 57c:	89 81       	ldd	r24, Y+1	; 0x01
 57e:	28 2f       	mov	r18, r24
 580:	30 e0       	ldi	r19, 0x00	; 0
 582:	c9 01       	movw	r24, r18
 584:	88 0f       	add	r24, r24
 586:	99 1f       	adc	r25, r25
 588:	88 0f       	add	r24, r24
 58a:	99 1f       	adc	r25, r25
 58c:	82 0f       	add	r24, r18
 58e:	93 1f       	adc	r25, r19
 590:	8c 59       	subi	r24, 0x9C	; 156
 592:	9f 4f       	sbci	r25, 0xFF	; 255
 594:	21 e0       	ldi	r18, 0x01	; 1
 596:	fc 01       	movw	r30, r24
 598:	20 83       	st	Z, r18
}
 59a:	00 00       	nop
 59c:	0f 90       	pop	r0
 59e:	df 91       	pop	r29
 5a0:	cf 91       	pop	r28
 5a2:	08 95       	ret

000005a4 <RTOS_voidResumeTask>:

void RTOS_voidResumeTask(u8 Copy_u8Priority)
{
 5a4:	cf 93       	push	r28
 5a6:	df 93       	push	r29
 5a8:	0f 92       	push	r0
 5aa:	cd b7       	in	r28, 0x3d	; 61
 5ac:	de b7       	in	r29, 0x3e	; 62
 5ae:	89 83       	std	Y+1, r24	; 0x01
	SystemTasks[Copy_u8Priority].State = TASK_RESUMED ;
 5b0:	89 81       	ldd	r24, Y+1	; 0x01
 5b2:	28 2f       	mov	r18, r24
 5b4:	30 e0       	ldi	r19, 0x00	; 0
 5b6:	c9 01       	movw	r24, r18
 5b8:	88 0f       	add	r24, r24
 5ba:	99 1f       	adc	r25, r25
 5bc:	88 0f       	add	r24, r24
 5be:	99 1f       	adc	r25, r25
 5c0:	82 0f       	add	r24, r18
 5c2:	93 1f       	adc	r25, r19
 5c4:	8c 59       	subi	r24, 0x9C	; 156
 5c6:	9f 4f       	sbci	r25, 0xFF	; 255
 5c8:	fc 01       	movw	r30, r24
 5ca:	10 82       	st	Z, r1
}
 5cc:	00 00       	nop
 5ce:	0f 90       	pop	r0
 5d0:	df 91       	pop	r29
 5d2:	cf 91       	pop	r28
 5d4:	08 95       	ret

000005d6 <voidScheduler>:

static void voidScheduler(void)
{
 5d6:	cf 93       	push	r28
 5d8:	df 93       	push	r29
 5da:	0f 92       	push	r0
 5dc:	cd b7       	in	r28, 0x3d	; 61
 5de:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16TickCounter=0;
	u8 Local_u8TaskCounter;

	Local_u16TickCounter++;
 5e0:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Local_u16TickCounter.1510>
 5e4:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <Local_u16TickCounter.1510+0x1>
 5e8:	01 96       	adiw	r24, 0x01	; 1
 5ea:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <Local_u16TickCounter.1510+0x1>
 5ee:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <Local_u16TickCounter.1510>

	/*Loop on all tasks to check their periodicity*/
	for(Local_u8TaskCounter=0; Local_u8TaskCounter < TASK_NUM; Local_u8TaskCounter++)
 5f2:	19 82       	std	Y+1, r1	; 0x01
 5f4:	4e c0       	rjmp	.+156    	; 0x692 <voidScheduler+0xbc>
	{
		/*check if the task is suspended or not*/
		if(SystemTasks[Local_u8TaskCounter].State == TASK_RESUMED)
 5f6:	89 81       	ldd	r24, Y+1	; 0x01
 5f8:	28 2f       	mov	r18, r24
 5fa:	30 e0       	ldi	r19, 0x00	; 0
 5fc:	c9 01       	movw	r24, r18
 5fe:	88 0f       	add	r24, r24
 600:	99 1f       	adc	r25, r25
 602:	88 0f       	add	r24, r24
 604:	99 1f       	adc	r25, r25
 606:	82 0f       	add	r24, r18
 608:	93 1f       	adc	r25, r19
 60a:	8c 59       	subi	r24, 0x9C	; 156
 60c:	9f 4f       	sbci	r25, 0xFF	; 255
 60e:	fc 01       	movw	r30, r24
 610:	80 81       	ld	r24, Z
 612:	88 23       	and	r24, r24
 614:	d9 f5       	brne	.+118    	; 0x68c <voidScheduler+0xb6>
		{
			if((Local_u16TickCounter % SystemTasks[Local_u8TaskCounter].Periodicity) == 0)
 616:	40 91 6f 00 	lds	r20, 0x006F	; 0x80006f <Local_u16TickCounter.1510>
 61a:	50 91 70 00 	lds	r21, 0x0070	; 0x800070 <Local_u16TickCounter.1510+0x1>
 61e:	89 81       	ldd	r24, Y+1	; 0x01
 620:	28 2f       	mov	r18, r24
 622:	30 e0       	ldi	r19, 0x00	; 0
 624:	c9 01       	movw	r24, r18
 626:	88 0f       	add	r24, r24
 628:	99 1f       	adc	r25, r25
 62a:	88 0f       	add	r24, r24
 62c:	99 1f       	adc	r25, r25
 62e:	82 0f       	add	r24, r18
 630:	93 1f       	adc	r25, r19
 632:	80 5a       	subi	r24, 0xA0	; 160
 634:	9f 4f       	sbci	r25, 0xFF	; 255
 636:	fc 01       	movw	r30, r24
 638:	20 81       	ld	r18, Z
 63a:	31 81       	ldd	r19, Z+1	; 0x01
 63c:	ca 01       	movw	r24, r20
 63e:	b9 01       	movw	r22, r18
 640:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__udivmodhi4>
 644:	89 2b       	or	r24, r25
 646:	11 f5       	brne	.+68     	; 0x68c <voidScheduler+0xb6>
			{
				/*Invoke the task function*/
				if( SystemTasks[Local_u8TaskCounter].TaskFunc != NULL )
 648:	89 81       	ldd	r24, Y+1	; 0x01
 64a:	28 2f       	mov	r18, r24
 64c:	30 e0       	ldi	r19, 0x00	; 0
 64e:	c9 01       	movw	r24, r18
 650:	88 0f       	add	r24, r24
 652:	99 1f       	adc	r25, r25
 654:	88 0f       	add	r24, r24
 656:	99 1f       	adc	r25, r25
 658:	82 0f       	add	r24, r18
 65a:	93 1f       	adc	r25, r19
 65c:	8e 59       	subi	r24, 0x9E	; 158
 65e:	9f 4f       	sbci	r25, 0xFF	; 255
 660:	fc 01       	movw	r30, r24
 662:	80 81       	ld	r24, Z
 664:	91 81       	ldd	r25, Z+1	; 0x01
 666:	89 2b       	or	r24, r25
 668:	89 f0       	breq	.+34     	; 0x68c <voidScheduler+0xb6>
				{
					SystemTasks[Local_u8TaskCounter].TaskFunc();
 66a:	89 81       	ldd	r24, Y+1	; 0x01
 66c:	28 2f       	mov	r18, r24
 66e:	30 e0       	ldi	r19, 0x00	; 0
 670:	c9 01       	movw	r24, r18
 672:	88 0f       	add	r24, r24
 674:	99 1f       	adc	r25, r25
 676:	88 0f       	add	r24, r24
 678:	99 1f       	adc	r25, r25
 67a:	82 0f       	add	r24, r18
 67c:	93 1f       	adc	r25, r19
 67e:	8e 59       	subi	r24, 0x9E	; 158
 680:	9f 4f       	sbci	r25, 0xFF	; 255
 682:	fc 01       	movw	r30, r24
 684:	80 81       	ld	r24, Z
 686:	91 81       	ldd	r25, Z+1	; 0x01
 688:	fc 01       	movw	r30, r24
 68a:	09 95       	icall
	u8 Local_u8TaskCounter;

	Local_u16TickCounter++;

	/*Loop on all tasks to check their periodicity*/
	for(Local_u8TaskCounter=0; Local_u8TaskCounter < TASK_NUM; Local_u8TaskCounter++)
 68c:	89 81       	ldd	r24, Y+1	; 0x01
 68e:	8f 5f       	subi	r24, 0xFF	; 255
 690:	89 83       	std	Y+1, r24	; 0x01
 692:	89 81       	ldd	r24, Y+1	; 0x01
 694:	83 30       	cpi	r24, 0x03	; 3
 696:	08 f4       	brcc	.+2      	; 0x69a <voidScheduler+0xc4>
 698:	ae cf       	rjmp	.-164    	; 0x5f6 <voidScheduler+0x20>
		else
		{
			/*Task is suspended, do nothing*/
		}
	}
}
 69a:	00 00       	nop
 69c:	00 00       	nop
 69e:	0f 90       	pop	r0
 6a0:	df 91       	pop	r29
 6a2:	cf 91       	pop	r28
 6a4:	08 95       	ret

000006a6 <TIMER0_voidInit>:

/*Global Array of PointerToFunc
static void (*TIMER_pvCallBackFunc[8])(void)={NULL};*/

void TIMER0_voidInit(void)
{
 6a6:	cf 93       	push	r28
 6a8:	df 93       	push	r29
 6aa:	cd b7       	in	r28, 0x3d	; 61
 6ac:	de b7       	in	r29, 0x3e	; 62
	/*choose CTC Mode*/
	CLR_BIT(TCCR0,TCCR0_WGM00);
 6ae:	83 e5       	ldi	r24, 0x53	; 83
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	fc 01       	movw	r30, r24
 6b4:	20 81       	ld	r18, Z
 6b6:	83 e5       	ldi	r24, 0x53	; 83
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	2f 7b       	andi	r18, 0xBF	; 191
 6bc:	fc 01       	movw	r30, r24
 6be:	20 83       	st	Z, r18
	SET_BIT(TCCR0,TCCR0_WGM01);
 6c0:	83 e5       	ldi	r24, 0x53	; 83
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	fc 01       	movw	r30, r24
 6c6:	20 81       	ld	r18, Z
 6c8:	83 e5       	ldi	r24, 0x53	; 83
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	28 60       	ori	r18, 0x08	; 8
 6ce:	fc 01       	movw	r30, r24
 6d0:	20 83       	st	Z, r18
	
	/*set the required compare  Match Value*/
	OCR0=TIMER0_u8COMP_MATCH_VAL;
 6d2:	8c e5       	ldi	r24, 0x5C	; 92
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	2d e7       	ldi	r18, 0x7D	; 125
 6d8:	fc 01       	movw	r30, r24
 6da:	20 83       	st	Z, r18

	/*Set prescaler(Bit Masking) */
	TCCR0 &=TIMER_PRESC_MASK;
 6dc:	83 e5       	ldi	r24, 0x53	; 83
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	fc 01       	movw	r30, r24
 6e2:	20 81       	ld	r18, Z
 6e4:	83 e5       	ldi	r24, 0x53	; 83
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	28 7f       	andi	r18, 0xF8	; 248
 6ea:	fc 01       	movw	r30, r24
 6ec:	20 83       	st	Z, r18
	TCCR0 |=CLK_PRESCALER;
 6ee:	83 e5       	ldi	r24, 0x53	; 83
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	fc 01       	movw	r30, r24
 6f4:	20 81       	ld	r18, Z
 6f6:	83 e5       	ldi	r24, 0x53	; 83
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	23 60       	ori	r18, 0x03	; 3
 6fc:	fc 01       	movw	r30, r24
 6fe:	20 83       	st	Z, r18

	/*Output Compare Match Interrupt Enable*/
	SET_BIT(TIMSK,TIMSK_OCIE0);
 700:	89 e5       	ldi	r24, 0x59	; 89
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	fc 01       	movw	r30, r24
 706:	20 81       	ld	r18, Z
 708:	89 e5       	ldi	r24, 0x59	; 89
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	22 60       	ori	r18, 0x02	; 2
 70e:	fc 01       	movw	r30, r24
 710:	20 83       	st	Z, r18
}
 712:	00 00       	nop
 714:	df 91       	pop	r29
 716:	cf 91       	pop	r28
 718:	08 95       	ret

0000071a <TIMER0_u8SetCallBack>:

u8 TIMER0_u8SetCallBack(void (*Copy_pvCallBackFunc)(void))
{
 71a:	cf 93       	push	r28
 71c:	df 93       	push	r29
 71e:	00 d0       	rcall	.+0      	; 0x720 <TIMER0_u8SetCallBack+0x6>
 720:	0f 92       	push	r0
 722:	cd b7       	in	r28, 0x3d	; 61
 724:	de b7       	in	r29, 0x3e	; 62
 726:	9b 83       	std	Y+3, r25	; 0x03
 728:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
 72a:	19 82       	std	Y+1, r1	; 0x01
	
	if(Copy_pvCallBackFunc!=NULL)
 72c:	8a 81       	ldd	r24, Y+2	; 0x02
 72e:	9b 81       	ldd	r25, Y+3	; 0x03
 730:	89 2b       	or	r24, r25
 732:	39 f0       	breq	.+14     	; 0x742 <TIMER0_u8SetCallBack+0x28>
	{
		TIMER0_pvCallBackFunc=Copy_pvCallBackFunc;
 734:	8a 81       	ldd	r24, Y+2	; 0x02
 736:	9b 81       	ldd	r25, Y+3	; 0x03
 738:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <TIMER0_pvCallBackFunc+0x1>
 73c:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <TIMER0_pvCallBackFunc>
 740:	02 c0       	rjmp	.+4      	; 0x746 <TIMER0_u8SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState=NULL_POINTER;
 742:	81 e0       	ldi	r24, 0x01	; 1
 744:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 746:	89 81       	ldd	r24, Y+1	; 0x01
}
 748:	0f 90       	pop	r0
 74a:	0f 90       	pop	r0
 74c:	0f 90       	pop	r0
 74e:	df 91       	pop	r29
 750:	cf 91       	pop	r28
 752:	08 95       	ret

00000754 <__vector_10>:


/*::::::::::::TIMER0 COMP::::::::::::*/
void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
 754:	1f 92       	push	r1
 756:	0f 92       	push	r0
 758:	0f b6       	in	r0, 0x3f	; 63
 75a:	0f 92       	push	r0
 75c:	11 24       	eor	r1, r1
 75e:	2f 93       	push	r18
 760:	3f 93       	push	r19
 762:	4f 93       	push	r20
 764:	5f 93       	push	r21
 766:	6f 93       	push	r22
 768:	7f 93       	push	r23
 76a:	8f 93       	push	r24
 76c:	9f 93       	push	r25
 76e:	af 93       	push	r26
 770:	bf 93       	push	r27
 772:	ef 93       	push	r30
 774:	ff 93       	push	r31
 776:	cf 93       	push	r28
 778:	df 93       	push	r29
 77a:	cd b7       	in	r28, 0x3d	; 61
 77c:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pvCallBackFunc != NULL)
 77e:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <TIMER0_pvCallBackFunc>
 782:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <TIMER0_pvCallBackFunc+0x1>
 786:	89 2b       	or	r24, r25
 788:	31 f0       	breq	.+12     	; 0x796 <__vector_10+0x42>
	{
		TIMER0_pvCallBackFunc();
 78a:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <TIMER0_pvCallBackFunc>
 78e:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <TIMER0_pvCallBackFunc+0x1>
 792:	fc 01       	movw	r30, r24
 794:	09 95       	icall
	}
}
 796:	00 00       	nop
 798:	df 91       	pop	r29
 79a:	cf 91       	pop	r28
 79c:	ff 91       	pop	r31
 79e:	ef 91       	pop	r30
 7a0:	bf 91       	pop	r27
 7a2:	af 91       	pop	r26
 7a4:	9f 91       	pop	r25
 7a6:	8f 91       	pop	r24
 7a8:	7f 91       	pop	r23
 7aa:	6f 91       	pop	r22
 7ac:	5f 91       	pop	r21
 7ae:	4f 91       	pop	r20
 7b0:	3f 91       	pop	r19
 7b2:	2f 91       	pop	r18
 7b4:	0f 90       	pop	r0
 7b6:	0f be       	out	0x3f, r0	; 63
 7b8:	0f 90       	pop	r0
 7ba:	1f 90       	pop	r1
 7bc:	18 95       	reti

000007be <main>:
void LED2();
void LED3();


void main()
{
 7be:	cf 93       	push	r28
 7c0:	df 93       	push	r29
 7c2:	cd b7       	in	r28, 0x3d	; 61
 7c4:	de b7       	in	r29, 0x3e	; 62
 7c6:	a2 97       	sbiw	r28, 0x22	; 34
 7c8:	0f b6       	in	r0, 0x3f	; 63
 7ca:	f8 94       	cli
 7cc:	de bf       	out	0x3e, r29	; 62
 7ce:	0f be       	out	0x3f, r0	; 63
 7d0:	cd bf       	out	0x3d, r28	; 61
	PORT_voidInit();
 7d2:	0e 94 39 02 	call	0x472	; 0x472 <PORT_voidInit>

	RTOS_voidCreateTask(0,1000,&LED1); /*1000 System Ticks*/
 7d6:	47 e9       	ldi	r20, 0x97	; 151
 7d8:	54 e0       	ldi	r21, 0x04	; 4
 7da:	68 ee       	ldi	r22, 0xE8	; 232
 7dc:	73 e0       	ldi	r23, 0x03	; 3
 7de:	80 e0       	ldi	r24, 0x00	; 0
 7e0:	0e 94 73 02 	call	0x4e6	; 0x4e6 <RTOS_voidCreateTask>
	RTOS_voidCreateTask(1,2000,&LED2);
 7e4:	4c ea       	ldi	r20, 0xAC	; 172
 7e6:	54 e0       	ldi	r21, 0x04	; 4
 7e8:	60 ed       	ldi	r22, 0xD0	; 208
 7ea:	77 e0       	ldi	r23, 0x07	; 7
 7ec:	81 e0       	ldi	r24, 0x01	; 1
 7ee:	0e 94 73 02 	call	0x4e6	; 0x4e6 <RTOS_voidCreateTask>
	RTOS_voidCreateTask(2,3000,&LED3);
 7f2:	41 ec       	ldi	r20, 0xC1	; 193
 7f4:	54 e0       	ldi	r21, 0x04	; 4
 7f6:	68 eb       	ldi	r22, 0xB8	; 184
 7f8:	7b e0       	ldi	r23, 0x0B	; 11
 7fa:	82 e0       	ldi	r24, 0x02	; 2
 7fc:	0e 94 73 02 	call	0x4e6	; 0x4e6 <RTOS_voidCreateTask>

	RTOS_voidStart();
 800:	0e 94 63 02 	call	0x4c6	; 0x4c6 <RTOS_voidStart>

	RTOS_voidSuspendTask(0);
 804:	80 e0       	ldi	r24, 0x00	; 0
 806:	0e 94 b8 02 	call	0x570	; 0x570 <RTOS_voidSuspendTask>
 80a:	80 e0       	ldi	r24, 0x00	; 0
 80c:	90 e4       	ldi	r25, 0x40	; 64
 80e:	ac e9       	ldi	r26, 0x9C	; 156
 810:	b5 e4       	ldi	r27, 0x45	; 69
 812:	89 83       	std	Y+1, r24	; 0x01
 814:	9a 83       	std	Y+2, r25	; 0x02
 816:	ab 83       	std	Y+3, r26	; 0x03
 818:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 81a:	20 e0       	ldi	r18, 0x00	; 0
 81c:	30 e0       	ldi	r19, 0x00	; 0
 81e:	4a ef       	ldi	r20, 0xFA	; 250
 820:	54 e4       	ldi	r21, 0x44	; 68
 822:	69 81       	ldd	r22, Y+1	; 0x01
 824:	7a 81       	ldd	r23, Y+2	; 0x02
 826:	8b 81       	ldd	r24, Y+3	; 0x03
 828:	9c 81       	ldd	r25, Y+4	; 0x04
 82a:	0e 94 70 05 	call	0xae0	; 0xae0 <__mulsf3>
 82e:	6b 8b       	std	Y+19, r22	; 0x13
 830:	7c 8b       	std	Y+20, r23	; 0x14
 832:	8d 8b       	std	Y+21, r24	; 0x15
 834:	9e 8b       	std	Y+22, r25	; 0x16
 836:	8b 89       	ldd	r24, Y+19	; 0x13
 838:	9c 89       	ldd	r25, Y+20	; 0x14
 83a:	ad 89       	ldd	r26, Y+21	; 0x15
 83c:	be 89       	ldd	r27, Y+22	; 0x16
 83e:	8d 83       	std	Y+5, r24	; 0x05
 840:	9e 83       	std	Y+6, r25	; 0x06
 842:	af 83       	std	Y+7, r26	; 0x07
 844:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 846:	20 e0       	ldi	r18, 0x00	; 0
 848:	30 e0       	ldi	r19, 0x00	; 0
 84a:	40 e8       	ldi	r20, 0x80	; 128
 84c:	5f e3       	ldi	r21, 0x3F	; 63
 84e:	6d 81       	ldd	r22, Y+5	; 0x05
 850:	7e 81       	ldd	r23, Y+6	; 0x06
 852:	8f 81       	ldd	r24, Y+7	; 0x07
 854:	98 85       	ldd	r25, Y+8	; 0x08
 856:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <__cmpsf2>
 85a:	88 23       	and	r24, r24
 85c:	2c f4       	brge	.+10     	; 0x868 <__stack+0x9>
		__ticks = 1;
 85e:	81 e0       	ldi	r24, 0x01	; 1
 860:	90 e0       	ldi	r25, 0x00	; 0
 862:	9a 87       	std	Y+10, r25	; 0x0a
 864:	89 87       	std	Y+9, r24	; 0x09
 866:	54 c0       	rjmp	.+168    	; 0x910 <__stack+0xb1>
	else if (__tmp > 65535)
 868:	20 e0       	ldi	r18, 0x00	; 0
 86a:	3f ef       	ldi	r19, 0xFF	; 255
 86c:	4f e7       	ldi	r20, 0x7F	; 127
 86e:	57 e4       	ldi	r21, 0x47	; 71
 870:	6d 81       	ldd	r22, Y+5	; 0x05
 872:	7e 81       	ldd	r23, Y+6	; 0x06
 874:	8f 81       	ldd	r24, Y+7	; 0x07
 876:	98 85       	ldd	r25, Y+8	; 0x08
 878:	0e 94 6b 05 	call	0xad6	; 0xad6 <__gesf2>
 87c:	18 16       	cp	r1, r24
 87e:	d4 f5       	brge	.+116    	; 0x8f4 <__stack+0x95>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 880:	20 e0       	ldi	r18, 0x00	; 0
 882:	30 e0       	ldi	r19, 0x00	; 0
 884:	40 e2       	ldi	r20, 0x20	; 32
 886:	51 e4       	ldi	r21, 0x41	; 65
 888:	69 81       	ldd	r22, Y+1	; 0x01
 88a:	7a 81       	ldd	r23, Y+2	; 0x02
 88c:	8b 81       	ldd	r24, Y+3	; 0x03
 88e:	9c 81       	ldd	r25, Y+4	; 0x04
 890:	0e 94 70 05 	call	0xae0	; 0xae0 <__mulsf3>
 894:	6f 8b       	std	Y+23, r22	; 0x17
 896:	78 8f       	std	Y+24, r23	; 0x18
 898:	89 8f       	std	Y+25, r24	; 0x19
 89a:	9a 8f       	std	Y+26, r25	; 0x1a
 89c:	8f 89       	ldd	r24, Y+23	; 0x17
 89e:	98 8d       	ldd	r25, Y+24	; 0x18
 8a0:	a9 8d       	ldd	r26, Y+25	; 0x19
 8a2:	ba 8d       	ldd	r27, Y+26	; 0x1a
 8a4:	8f 87       	std	Y+15, r24	; 0x0f
 8a6:	98 8b       	std	Y+16, r25	; 0x10
 8a8:	a9 8b       	std	Y+17, r26	; 0x11
 8aa:	ba 8b       	std	Y+18, r27	; 0x12
 8ac:	6f 85       	ldd	r22, Y+15	; 0x0f
 8ae:	78 89       	ldd	r23, Y+16	; 0x10
 8b0:	89 89       	ldd	r24, Y+17	; 0x11
 8b2:	9a 89       	ldd	r25, Y+18	; 0x12
 8b4:	0e 94 ef 04 	call	0x9de	; 0x9de <__fixunssfsi>
 8b8:	6b 8f       	std	Y+27, r22	; 0x1b
 8ba:	7c 8f       	std	Y+28, r23	; 0x1c
 8bc:	8d 8f       	std	Y+29, r24	; 0x1d
 8be:	9e 8f       	std	Y+30, r25	; 0x1e
 8c0:	ab 8d       	ldd	r26, Y+27	; 0x1b
 8c2:	bc 8d       	ldd	r27, Y+28	; 0x1c
 8c4:	ba 87       	std	Y+10, r27	; 0x0a
 8c6:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
 8c8:	10 c0       	rjmp	.+32     	; 0x8ea <__stack+0x8b>
 8ca:	88 ec       	ldi	r24, 0xC8	; 200
 8cc:	90 e0       	ldi	r25, 0x00	; 0
 8ce:	9c 87       	std	Y+12, r25	; 0x0c
 8d0:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 8d2:	8b 85       	ldd	r24, Y+11	; 0x0b
 8d4:	9c 85       	ldd	r25, Y+12	; 0x0c
 8d6:	01 97       	sbiw	r24, 0x01	; 1
 8d8:	f1 f7       	brne	.-4      	; 0x8d6 <__stack+0x77>
 8da:	9c 87       	std	Y+12, r25	; 0x0c
 8dc:	8b 87       	std	Y+11, r24	; 0x0b
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 8de:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 8e0:	89 85       	ldd	r24, Y+9	; 0x09
 8e2:	9a 85       	ldd	r25, Y+10	; 0x0a
 8e4:	01 97       	sbiw	r24, 0x01	; 1
 8e6:	9a 87       	std	Y+10, r25	; 0x0a
 8e8:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 8ea:	89 85       	ldd	r24, Y+9	; 0x09
 8ec:	9a 85       	ldd	r25, Y+10	; 0x0a
 8ee:	89 2b       	or	r24, r25
 8f0:	61 f7       	brne	.-40     	; 0x8ca <__stack+0x6b>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
 8f2:	19 c0       	rjmp	.+50     	; 0x926 <__stack+0xc7>
	}
	else
		__ticks = (uint16_t)__tmp;
 8f4:	6d 81       	ldd	r22, Y+5	; 0x05
 8f6:	7e 81       	ldd	r23, Y+6	; 0x06
 8f8:	8f 81       	ldd	r24, Y+7	; 0x07
 8fa:	98 85       	ldd	r25, Y+8	; 0x08
 8fc:	0e 94 ef 04 	call	0x9de	; 0x9de <__fixunssfsi>
 900:	6f 8f       	std	Y+31, r22	; 0x1f
 902:	78 a3       	std	Y+32, r23	; 0x20
 904:	89 a3       	std	Y+33, r24	; 0x21
 906:	9a a3       	std	Y+34, r25	; 0x22
 908:	8f 8d       	ldd	r24, Y+31	; 0x1f
 90a:	98 a1       	ldd	r25, Y+32	; 0x20
 90c:	9a 87       	std	Y+10, r25	; 0x0a
 90e:	89 87       	std	Y+9, r24	; 0x09
 910:	89 85       	ldd	r24, Y+9	; 0x09
 912:	9a 85       	ldd	r25, Y+10	; 0x0a
 914:	9e 87       	std	Y+14, r25	; 0x0e
 916:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 918:	8d 85       	ldd	r24, Y+13	; 0x0d
 91a:	9e 85       	ldd	r25, Y+14	; 0x0e
 91c:	01 97       	sbiw	r24, 0x01	; 1
 91e:	f1 f7       	brne	.-4      	; 0x91c <__stack+0xbd>
 920:	9e 87       	std	Y+14, r25	; 0x0e
 922:	8d 87       	std	Y+13, r24	; 0x0d
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 924:	00 00       	nop
	_delay_ms(5000);

	RTOS_voidResumeTask(0);
 926:	80 e0       	ldi	r24, 0x00	; 0
 928:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <RTOS_voidResumeTask>


	while(1)
 92c:	ff cf       	rjmp	.-2      	; 0x92c <__stack+0xcd>

0000092e <LED1>:

}


void LED1()
{
 92e:	cf 93       	push	r28
 930:	df 93       	push	r29
 932:	cd b7       	in	r28, 0x3d	; 61
 934:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8LedState = 0;
	TOGGLE_BIT(Local_u8LedState ,0);
 936:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <Local_u8LedState.1653>
 93a:	81 e0       	ldi	r24, 0x01	; 1
 93c:	89 27       	eor	r24, r25
 93e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <Local_u8LedState.1653>
	DIO_u8SetPinValue(DIO_u8PORTA, DIO_u8PIN0,Local_u8LedState);
 942:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <Local_u8LedState.1653>
 946:	48 2f       	mov	r20, r24
 948:	60 e0       	ldi	r22, 0x00	; 0
 94a:	80 e0       	ldi	r24, 0x00	; 0
 94c:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_u8SetPinValue>
}
 950:	00 00       	nop
 952:	df 91       	pop	r29
 954:	cf 91       	pop	r28
 956:	08 95       	ret

00000958 <LED2>:

void LED2()
{
 958:	cf 93       	push	r28
 95a:	df 93       	push	r29
 95c:	cd b7       	in	r28, 0x3d	; 61
 95e:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8LedState = 0;
	TOGGLE_BIT(Local_u8LedState ,0);
 960:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <Local_u8LedState.1656>
 964:	81 e0       	ldi	r24, 0x01	; 1
 966:	89 27       	eor	r24, r25
 968:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <Local_u8LedState.1656>
	DIO_u8SetPinValue(DIO_u8PORTA, DIO_u8PIN1,Local_u8LedState);
 96c:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <Local_u8LedState.1656>
 970:	48 2f       	mov	r20, r24
 972:	61 e0       	ldi	r22, 0x01	; 1
 974:	80 e0       	ldi	r24, 0x00	; 0
 976:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_u8SetPinValue>
}
 97a:	00 00       	nop
 97c:	df 91       	pop	r29
 97e:	cf 91       	pop	r28
 980:	08 95       	ret

00000982 <LED3>:

void LED3()
{
 982:	cf 93       	push	r28
 984:	df 93       	push	r29
 986:	cd b7       	in	r28, 0x3d	; 61
 988:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8LedState = 0;
	TOGGLE_BIT(Local_u8LedState ,0);
 98a:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <Local_u8LedState.1659>
 98e:	81 e0       	ldi	r24, 0x01	; 1
 990:	89 27       	eor	r24, r25
 992:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <Local_u8LedState.1659>
	DIO_u8SetPinValue(DIO_u8PORTA, DIO_u8PIN2,Local_u8LedState);
 996:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <Local_u8LedState.1659>
 99a:	48 2f       	mov	r20, r24
 99c:	62 e0       	ldi	r22, 0x02	; 2
 99e:	80 e0       	ldi	r24, 0x00	; 0
 9a0:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_u8SetPinValue>
}
 9a4:	00 00       	nop
 9a6:	df 91       	pop	r29
 9a8:	cf 91       	pop	r28
 9aa:	08 95       	ret

000009ac <__udivmodhi4>:
 9ac:	aa 1b       	sub	r26, r26
 9ae:	bb 1b       	sub	r27, r27
 9b0:	51 e1       	ldi	r21, 0x11	; 17
 9b2:	07 c0       	rjmp	.+14     	; 0x9c2 <__udivmodhi4_ep>

000009b4 <__udivmodhi4_loop>:
 9b4:	aa 1f       	adc	r26, r26
 9b6:	bb 1f       	adc	r27, r27
 9b8:	a6 17       	cp	r26, r22
 9ba:	b7 07       	cpc	r27, r23
 9bc:	10 f0       	brcs	.+4      	; 0x9c2 <__udivmodhi4_ep>
 9be:	a6 1b       	sub	r26, r22
 9c0:	b7 0b       	sbc	r27, r23

000009c2 <__udivmodhi4_ep>:
 9c2:	88 1f       	adc	r24, r24
 9c4:	99 1f       	adc	r25, r25
 9c6:	5a 95       	dec	r21
 9c8:	a9 f7       	brne	.-22     	; 0x9b4 <__udivmodhi4_loop>
 9ca:	80 95       	com	r24
 9cc:	90 95       	com	r25
 9ce:	bc 01       	movw	r22, r24
 9d0:	cd 01       	movw	r24, r26
 9d2:	08 95       	ret

000009d4 <__cmpsf2>:
 9d4:	0e 94 1e 05 	call	0xa3c	; 0xa3c <__fp_cmp>
 9d8:	08 f4       	brcc	.+2      	; 0x9dc <__cmpsf2+0x8>
 9da:	81 e0       	ldi	r24, 0x01	; 1
 9dc:	08 95       	ret

000009de <__fixunssfsi>:
 9de:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fp_splitA>
 9e2:	88 f0       	brcs	.+34     	; 0xa06 <__fixunssfsi+0x28>
 9e4:	9f 57       	subi	r25, 0x7F	; 127
 9e6:	98 f0       	brcs	.+38     	; 0xa0e <__fixunssfsi+0x30>
 9e8:	b9 2f       	mov	r27, r25
 9ea:	99 27       	eor	r25, r25
 9ec:	b7 51       	subi	r27, 0x17	; 23
 9ee:	b0 f0       	brcs	.+44     	; 0xa1c <__fixunssfsi+0x3e>
 9f0:	e1 f0       	breq	.+56     	; 0xa2a <__fixunssfsi+0x4c>
 9f2:	66 0f       	add	r22, r22
 9f4:	77 1f       	adc	r23, r23
 9f6:	88 1f       	adc	r24, r24
 9f8:	99 1f       	adc	r25, r25
 9fa:	1a f0       	brmi	.+6      	; 0xa02 <__fixunssfsi+0x24>
 9fc:	ba 95       	dec	r27
 9fe:	c9 f7       	brne	.-14     	; 0x9f2 <__fixunssfsi+0x14>
 a00:	14 c0       	rjmp	.+40     	; 0xa2a <__fixunssfsi+0x4c>
 a02:	b1 30       	cpi	r27, 0x01	; 1
 a04:	91 f0       	breq	.+36     	; 0xa2a <__fixunssfsi+0x4c>
 a06:	0e 94 64 05 	call	0xac8	; 0xac8 <__fp_zero>
 a0a:	b1 e0       	ldi	r27, 0x01	; 1
 a0c:	08 95       	ret
 a0e:	0c 94 64 05 	jmp	0xac8	; 0xac8 <__fp_zero>
 a12:	67 2f       	mov	r22, r23
 a14:	78 2f       	mov	r23, r24
 a16:	88 27       	eor	r24, r24
 a18:	b8 5f       	subi	r27, 0xF8	; 248
 a1a:	39 f0       	breq	.+14     	; 0xa2a <__fixunssfsi+0x4c>
 a1c:	b9 3f       	cpi	r27, 0xF9	; 249
 a1e:	cc f3       	brlt	.-14     	; 0xa12 <__fixunssfsi+0x34>
 a20:	86 95       	lsr	r24
 a22:	77 95       	ror	r23
 a24:	67 95       	ror	r22
 a26:	b3 95       	inc	r27
 a28:	d9 f7       	brne	.-10     	; 0xa20 <__fixunssfsi+0x42>
 a2a:	3e f4       	brtc	.+14     	; 0xa3a <__fixunssfsi+0x5c>
 a2c:	90 95       	com	r25
 a2e:	80 95       	com	r24
 a30:	70 95       	com	r23
 a32:	61 95       	neg	r22
 a34:	7f 4f       	sbci	r23, 0xFF	; 255
 a36:	8f 4f       	sbci	r24, 0xFF	; 255
 a38:	9f 4f       	sbci	r25, 0xFF	; 255
 a3a:	08 95       	ret

00000a3c <__fp_cmp>:
 a3c:	99 0f       	add	r25, r25
 a3e:	00 08       	sbc	r0, r0
 a40:	55 0f       	add	r21, r21
 a42:	aa 0b       	sbc	r26, r26
 a44:	e0 e8       	ldi	r30, 0x80	; 128
 a46:	fe ef       	ldi	r31, 0xFE	; 254
 a48:	16 16       	cp	r1, r22
 a4a:	17 06       	cpc	r1, r23
 a4c:	e8 07       	cpc	r30, r24
 a4e:	f9 07       	cpc	r31, r25
 a50:	c0 f0       	brcs	.+48     	; 0xa82 <__fp_cmp+0x46>
 a52:	12 16       	cp	r1, r18
 a54:	13 06       	cpc	r1, r19
 a56:	e4 07       	cpc	r30, r20
 a58:	f5 07       	cpc	r31, r21
 a5a:	98 f0       	brcs	.+38     	; 0xa82 <__fp_cmp+0x46>
 a5c:	62 1b       	sub	r22, r18
 a5e:	73 0b       	sbc	r23, r19
 a60:	84 0b       	sbc	r24, r20
 a62:	95 0b       	sbc	r25, r21
 a64:	39 f4       	brne	.+14     	; 0xa74 <__fp_cmp+0x38>
 a66:	0a 26       	eor	r0, r26
 a68:	61 f0       	breq	.+24     	; 0xa82 <__fp_cmp+0x46>
 a6a:	23 2b       	or	r18, r19
 a6c:	24 2b       	or	r18, r20
 a6e:	25 2b       	or	r18, r21
 a70:	21 f4       	brne	.+8      	; 0xa7a <__fp_cmp+0x3e>
 a72:	08 95       	ret
 a74:	0a 26       	eor	r0, r26
 a76:	09 f4       	brne	.+2      	; 0xa7a <__fp_cmp+0x3e>
 a78:	a1 40       	sbci	r26, 0x01	; 1
 a7a:	a6 95       	lsr	r26
 a7c:	8f ef       	ldi	r24, 0xFF	; 255
 a7e:	81 1d       	adc	r24, r1
 a80:	81 1d       	adc	r24, r1
 a82:	08 95       	ret

00000a84 <__fp_split3>:
 a84:	57 fd       	sbrc	r21, 7
 a86:	90 58       	subi	r25, 0x80	; 128
 a88:	44 0f       	add	r20, r20
 a8a:	55 1f       	adc	r21, r21
 a8c:	59 f0       	breq	.+22     	; 0xaa4 <__fp_splitA+0x10>
 a8e:	5f 3f       	cpi	r21, 0xFF	; 255
 a90:	71 f0       	breq	.+28     	; 0xaae <__fp_splitA+0x1a>
 a92:	47 95       	ror	r20

00000a94 <__fp_splitA>:
 a94:	88 0f       	add	r24, r24
 a96:	97 fb       	bst	r25, 7
 a98:	99 1f       	adc	r25, r25
 a9a:	61 f0       	breq	.+24     	; 0xab4 <__fp_splitA+0x20>
 a9c:	9f 3f       	cpi	r25, 0xFF	; 255
 a9e:	79 f0       	breq	.+30     	; 0xabe <__fp_splitA+0x2a>
 aa0:	87 95       	ror	r24
 aa2:	08 95       	ret
 aa4:	12 16       	cp	r1, r18
 aa6:	13 06       	cpc	r1, r19
 aa8:	14 06       	cpc	r1, r20
 aaa:	55 1f       	adc	r21, r21
 aac:	f2 cf       	rjmp	.-28     	; 0xa92 <__fp_split3+0xe>
 aae:	46 95       	lsr	r20
 ab0:	f1 df       	rcall	.-30     	; 0xa94 <__fp_splitA>
 ab2:	08 c0       	rjmp	.+16     	; 0xac4 <__fp_splitA+0x30>
 ab4:	16 16       	cp	r1, r22
 ab6:	17 06       	cpc	r1, r23
 ab8:	18 06       	cpc	r1, r24
 aba:	99 1f       	adc	r25, r25
 abc:	f1 cf       	rjmp	.-30     	; 0xaa0 <__fp_splitA+0xc>
 abe:	86 95       	lsr	r24
 ac0:	71 05       	cpc	r23, r1
 ac2:	61 05       	cpc	r22, r1
 ac4:	08 94       	sec
 ac6:	08 95       	ret

00000ac8 <__fp_zero>:
 ac8:	e8 94       	clt

00000aca <__fp_szero>:
 aca:	bb 27       	eor	r27, r27
 acc:	66 27       	eor	r22, r22
 ace:	77 27       	eor	r23, r23
 ad0:	cb 01       	movw	r24, r22
 ad2:	97 f9       	bld	r25, 7
 ad4:	08 95       	ret

00000ad6 <__gesf2>:
 ad6:	0e 94 1e 05 	call	0xa3c	; 0xa3c <__fp_cmp>
 ada:	08 f4       	brcc	.+2      	; 0xade <__gesf2+0x8>
 adc:	8f ef       	ldi	r24, 0xFF	; 255
 ade:	08 95       	ret

00000ae0 <__mulsf3>:
 ae0:	0e 94 83 05 	call	0xb06	; 0xb06 <__mulsf3x>
 ae4:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__fp_round>
 ae8:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__fp_pscA>
 aec:	38 f0       	brcs	.+14     	; 0xafc <__mulsf3+0x1c>
 aee:	0e 94 ed 05 	call	0xbda	; 0xbda <__fp_pscB>
 af2:	20 f0       	brcs	.+8      	; 0xafc <__mulsf3+0x1c>
 af4:	95 23       	and	r25, r21
 af6:	11 f0       	breq	.+4      	; 0xafc <__mulsf3+0x1c>
 af8:	0c 94 dd 05 	jmp	0xbba	; 0xbba <__fp_inf>
 afc:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__fp_nan>
 b00:	11 24       	eor	r1, r1
 b02:	0c 94 65 05 	jmp	0xaca	; 0xaca <__fp_szero>

00000b06 <__mulsf3x>:
 b06:	0e 94 42 05 	call	0xa84	; 0xa84 <__fp_split3>
 b0a:	70 f3       	brcs	.-36     	; 0xae8 <__mulsf3+0x8>

00000b0c <__mulsf3_pse>:
 b0c:	95 9f       	mul	r25, r21
 b0e:	c1 f3       	breq	.-16     	; 0xb00 <__mulsf3+0x20>
 b10:	95 0f       	add	r25, r21
 b12:	50 e0       	ldi	r21, 0x00	; 0
 b14:	55 1f       	adc	r21, r21
 b16:	62 9f       	mul	r22, r18
 b18:	f0 01       	movw	r30, r0
 b1a:	72 9f       	mul	r23, r18
 b1c:	bb 27       	eor	r27, r27
 b1e:	f0 0d       	add	r31, r0
 b20:	b1 1d       	adc	r27, r1
 b22:	63 9f       	mul	r22, r19
 b24:	aa 27       	eor	r26, r26
 b26:	f0 0d       	add	r31, r0
 b28:	b1 1d       	adc	r27, r1
 b2a:	aa 1f       	adc	r26, r26
 b2c:	64 9f       	mul	r22, r20
 b2e:	66 27       	eor	r22, r22
 b30:	b0 0d       	add	r27, r0
 b32:	a1 1d       	adc	r26, r1
 b34:	66 1f       	adc	r22, r22
 b36:	82 9f       	mul	r24, r18
 b38:	22 27       	eor	r18, r18
 b3a:	b0 0d       	add	r27, r0
 b3c:	a1 1d       	adc	r26, r1
 b3e:	62 1f       	adc	r22, r18
 b40:	73 9f       	mul	r23, r19
 b42:	b0 0d       	add	r27, r0
 b44:	a1 1d       	adc	r26, r1
 b46:	62 1f       	adc	r22, r18
 b48:	83 9f       	mul	r24, r19
 b4a:	a0 0d       	add	r26, r0
 b4c:	61 1d       	adc	r22, r1
 b4e:	22 1f       	adc	r18, r18
 b50:	74 9f       	mul	r23, r20
 b52:	33 27       	eor	r19, r19
 b54:	a0 0d       	add	r26, r0
 b56:	61 1d       	adc	r22, r1
 b58:	23 1f       	adc	r18, r19
 b5a:	84 9f       	mul	r24, r20
 b5c:	60 0d       	add	r22, r0
 b5e:	21 1d       	adc	r18, r1
 b60:	82 2f       	mov	r24, r18
 b62:	76 2f       	mov	r23, r22
 b64:	6a 2f       	mov	r22, r26
 b66:	11 24       	eor	r1, r1
 b68:	9f 57       	subi	r25, 0x7F	; 127
 b6a:	50 40       	sbci	r21, 0x00	; 0
 b6c:	9a f0       	brmi	.+38     	; 0xb94 <__mulsf3_pse+0x88>
 b6e:	f1 f0       	breq	.+60     	; 0xbac <__mulsf3_pse+0xa0>
 b70:	88 23       	and	r24, r24
 b72:	4a f0       	brmi	.+18     	; 0xb86 <__mulsf3_pse+0x7a>
 b74:	ee 0f       	add	r30, r30
 b76:	ff 1f       	adc	r31, r31
 b78:	bb 1f       	adc	r27, r27
 b7a:	66 1f       	adc	r22, r22
 b7c:	77 1f       	adc	r23, r23
 b7e:	88 1f       	adc	r24, r24
 b80:	91 50       	subi	r25, 0x01	; 1
 b82:	50 40       	sbci	r21, 0x00	; 0
 b84:	a9 f7       	brne	.-22     	; 0xb70 <__mulsf3_pse+0x64>
 b86:	9e 3f       	cpi	r25, 0xFE	; 254
 b88:	51 05       	cpc	r21, r1
 b8a:	80 f0       	brcs	.+32     	; 0xbac <__mulsf3_pse+0xa0>
 b8c:	0c 94 dd 05 	jmp	0xbba	; 0xbba <__fp_inf>
 b90:	0c 94 65 05 	jmp	0xaca	; 0xaca <__fp_szero>
 b94:	5f 3f       	cpi	r21, 0xFF	; 255
 b96:	e4 f3       	brlt	.-8      	; 0xb90 <__mulsf3_pse+0x84>
 b98:	98 3e       	cpi	r25, 0xE8	; 232
 b9a:	d4 f3       	brlt	.-12     	; 0xb90 <__mulsf3_pse+0x84>
 b9c:	86 95       	lsr	r24
 b9e:	77 95       	ror	r23
 ba0:	67 95       	ror	r22
 ba2:	b7 95       	ror	r27
 ba4:	f7 95       	ror	r31
 ba6:	e7 95       	ror	r30
 ba8:	9f 5f       	subi	r25, 0xFF	; 255
 baa:	c1 f7       	brne	.-16     	; 0xb9c <__mulsf3_pse+0x90>
 bac:	fe 2b       	or	r31, r30
 bae:	88 0f       	add	r24, r24
 bb0:	91 1d       	adc	r25, r1
 bb2:	96 95       	lsr	r25
 bb4:	87 95       	ror	r24
 bb6:	97 f9       	bld	r25, 7
 bb8:	08 95       	ret

00000bba <__fp_inf>:
 bba:	97 f9       	bld	r25, 7
 bbc:	9f 67       	ori	r25, 0x7F	; 127
 bbe:	80 e8       	ldi	r24, 0x80	; 128
 bc0:	70 e0       	ldi	r23, 0x00	; 0
 bc2:	60 e0       	ldi	r22, 0x00	; 0
 bc4:	08 95       	ret

00000bc6 <__fp_nan>:
 bc6:	9f ef       	ldi	r25, 0xFF	; 255
 bc8:	80 ec       	ldi	r24, 0xC0	; 192
 bca:	08 95       	ret

00000bcc <__fp_pscA>:
 bcc:	00 24       	eor	r0, r0
 bce:	0a 94       	dec	r0
 bd0:	16 16       	cp	r1, r22
 bd2:	17 06       	cpc	r1, r23
 bd4:	18 06       	cpc	r1, r24
 bd6:	09 06       	cpc	r0, r25
 bd8:	08 95       	ret

00000bda <__fp_pscB>:
 bda:	00 24       	eor	r0, r0
 bdc:	0a 94       	dec	r0
 bde:	12 16       	cp	r1, r18
 be0:	13 06       	cpc	r1, r19
 be2:	14 06       	cpc	r1, r20
 be4:	05 06       	cpc	r0, r21
 be6:	08 95       	ret

00000be8 <__fp_round>:
 be8:	09 2e       	mov	r0, r25
 bea:	03 94       	inc	r0
 bec:	00 0c       	add	r0, r0
 bee:	11 f4       	brne	.+4      	; 0xbf4 <__fp_round+0xc>
 bf0:	88 23       	and	r24, r24
 bf2:	52 f0       	brmi	.+20     	; 0xc08 <__fp_round+0x20>
 bf4:	bb 0f       	add	r27, r27
 bf6:	40 f4       	brcc	.+16     	; 0xc08 <__fp_round+0x20>
 bf8:	bf 2b       	or	r27, r31
 bfa:	11 f4       	brne	.+4      	; 0xc00 <__fp_round+0x18>
 bfc:	60 ff       	sbrs	r22, 0
 bfe:	04 c0       	rjmp	.+8      	; 0xc08 <__fp_round+0x20>
 c00:	6f 5f       	subi	r22, 0xFF	; 255
 c02:	7f 4f       	sbci	r23, 0xFF	; 255
 c04:	8f 4f       	sbci	r24, 0xFF	; 255
 c06:	9f 4f       	sbci	r25, 0xFF	; 255
 c08:	08 95       	ret

00000c0a <_exit>:
 c0a:	f8 94       	cli

00000c0c <__stop_program>:
 c0c:	ff cf       	rjmp	.-2      	; 0xc0c <__stop_program>
